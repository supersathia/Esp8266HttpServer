
out/program.elf:     file format elf32-littlearm
out/program.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001181

Program Header:
0x70000001 off    0x000131b0 vaddr 0x1a0031b0 paddr 0x1a0031b0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000170 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000031b8 memsz 0x000031b8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0031b8 align 2**16
         filesz 0x00000044 memsz 0x00000044 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031b0  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  10000000  1a0031b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020044  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020044  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020044  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020044  2**2
                  CONTENTS
  6 .bss          00000170  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020044  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020044  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020044  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020044  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a0031b0  1a0031b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020044  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020044  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020044  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020044  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020044  2**2
                  CONTENTS
 17 .noinit       00000000  100001b8  100001b8  00020044  2**2
                  CONTENTS
 18 .debug_info   0001737d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000037d7  00000000  00000000  000373c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000055b4  00000000  00000000  0003ab98  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000798  00000000  00000000  0004014c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000006f8  00000000  00000000  000408e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000a817  00000000  00000000  00040fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000b372  00000000  00000000  0004b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001d868  00000000  00000000  00056b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000743cd  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  0007444c  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001208  00000000  00000000  00074484  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0031b0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001b8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sapi_esp8266HttpServer.c
1a000444 l     F .text	0000000c SetEsp8622Status
1a000450 l     F .text	00000054 IsWaitedResponse
1a0004a4 l     F .text	000007b8 ExcecuteHttpServerFsm
10000048 l     O .bss	00000001 CurrentConnectionId
10000050 l     O .bss	00000018 Esp8266Delay
10000068 l     O .bss	00000004 Esp8266ResponseToWait
1000006c l     O .bss	00000001 Esp8266Status
10000070 l     O .bss	00000004 PointerOfHttpBody
10000074 l     O .bss	00000004 PointerOfHttpEnd
10000078 l     O .bss	00000004 PointerOfHttpHeader
1000007c l     O .bss	00000014 WifiIp
10000090 l     O .bss	0000001e WifiName
100000b0 l     O .bss	0000001e WifiPass
100000ce l     O .bss	00000001 auxIndex.12179
100000cf l     O .bss	00000001 byteReceived.12178
100000d0 l     O .bss	00000001 index.12216
100000d1 l     O .bss	00000001 parametersReceived.12166
1a002ec0 l     O .text	0000000f Response_CIFSR
1a002ed0 l     O .text	00000007 Response_CIPCLOSE
1a002ed8 l     O .text	0000000c Response_CIPSTATUS
1a002ee4 l     O .text	0000000f Response_CWJAP_1
1a002ef4 l     O .text	0000000c Response_CWJAP_2
1a002f00 l     O .text	00000008 Response_CWJAP_OK
1a002f08 l     O .text	00000003 Response_OK
1a002f0c l     O .text	00000008 Response_SEND_OK
1a002f14 l     O .text	00000009 Response_STATUS_3
00000000 l    df *ABS*	00000000 sapi_stdio.c
1a000d68 l     F .text	00000018 printchar
1a000d80 l     F .text	00000080 prints
1a000e00 l     F .text	000000a2 printi
1a000ea4 l     F .text	00000148 print
100000d2 l     O .bss	00000001 UartPrintf
100000d3 l     O .bss	00000001 prev.11916
00000000 l    df *ABS*	00000000 board.c
1a001028 l     F .text	00000044 Board_LED_Init
1a002f30 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002f3c l     O .text	0000000c InitClkStates
1a002f48 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001208 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00121c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0013d8 l     F .text	000000a0 pll_calc_divs
1a001478 l     F .text	00000100 pll_get_frac
1a001578 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0017ec l     F .text	00000022 Chip_Clock_GetDivRate
100000d4 l     O .bss	00000008 audio_usb_pll_freq
1a002fb4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003020 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001b2c l     F .text	0000002c Chip_UART_GetIndex
1a003068 l     O .text	00000008 UART_BClock
1a003070 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001f0c l     F .text	00000034 gpioObtainPinConfig
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00221c l     F .text	00000002 errorOcurred
1a00221e l     F .text	00000002 doNothing
10000004 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 
1a000300 l       .text	00000000 __CRP_WORD_END__
1a0002fc l       .text	00000000 __CRP_WORD_START__
1a001610 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002724 g     F .text	00000010 strcpy
1a0022a0 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0012b4 g     F .text	00000016 Chip_ADC_DeInit
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a001cd4 g     F .text	0000008c adcConfig
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00238c g     F .text	00000044 uartReadByte
1a0019ae g     F .text	00000024 Chip_GPIO_SetDir
1a001ecc g     F .text	0000003e delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0021f8 g     F .text	00000024 SysTick_Handler
1a001bac g     F .text	00000040 Chip_UART_SetBaud
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0031b8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
53ff670e g       *ABS*	00000000 __valid_user_code_checksum
1a0031b8 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a0022e4 g     F .text	00000044 TIMER3_IRQHandler
1a00188e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a001008 g     F .text	0000001e stdioSprintf
1a0001bc g     F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a002404 g     F .text	00000000 .hidden __aeabi_uldivmod
100001b8 g       .noinit	00000000 _noinit
100001a4 g     O .bss	00000004 SystemCoreClock
1a001b58 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a001eac g     F .text	00000020 delayConfig
1a00125c g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a00190c g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
100001a8 g     O .bss	00000008 tickCounter
1a001108 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000c64 g     F .text	00000010 esp8266GetConnectionId
1a002434 g     F .text	000002dc .hidden __udivmoddi4
1a002f28 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a002174 g     F .text	00000078 tickConfig
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a001f40 g     F .text	00000174 gpioConfig
1a0031b0 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00124e g     F .text	0000000e setStartMode
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a0010a8 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
100001b8 g       .bss	00000000 _ebss
1a000d14 g     F .text	00000014 _outbyte
1a00137a g     F .text	00000028 Chip_ADC_EnableChannel
1a002220 g     F .text	00000040 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a0015c4 g     F .text	0000004c Chip_Clock_EnableCrystal
1a001db8 g     F .text	000000ee boardConfig
1a0012ca g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a001328 g     F .text	00000020 Chip_ADC_SetStartMode
1a002260 g     F .text	00000040 TIMER1_IRQHandler
1a002400 g     F .text	00000002 UART2_IRQHandler
1a001780 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001ea6 g     F .text	00000004 sAPI_NullFuncPtr
1a0023d0 g     F .text	00000030 uartWriteByte
1a00215e g     F .text	00000016 gpioToggle
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a001d60 g     F .text	00000058 adcRead
1a001868 g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a0012d2 g     F .text	00000036 Chip_ADC_ReadStatus
1a001348 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000cd8 g     F .text	0000003c esp8266WriteHttpServer
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a0019ac g     F .text	00000002 Chip_GPIO_Init
1a002f2c g     O .text	00000004 OscRateIn
100001b8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a002710  w    F .text	00000002 .hidden __aeabi_ldiv0
100000dc g     O .bss	000000c8 HttpWebPageBody
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a0018d8 g     F .text	00000034 Chip_Clock_Disable
1a000d28 g     F .text	00000040 outbyte
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a00162c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a002744 g     O .text	00000190 HttpWebPageEnd
1a002714 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000144 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a000cc0 g     F .text	00000018 esp8266ReadHttpServer
1a00189c g     F .text	0000003c Chip_Clock_EnableOpts
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a003078 g     O .text	00000136 gpioPinsConfig
1a001648 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001958 g     F .text	00000054 fpuInit
1a001700 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0011fc g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0020b4 g     F .text	00000056 gpioWrite
1a001274 g     F .text	00000040 Chip_ADC_Init
1a0010d0 g     F .text	00000038 Board_SetupMuxing
1a001bec g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0021ec g     F .text	0000000c tickRead
100001b0 g     O .bss	00000008 tickRateMS
1a0013a2 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100001b8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000c5c g     F .text	00000008 esp8266GetIpAddress
1a002328 g     F .text	00000064 uartConfig
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a001080 g     F .text	00000028 Board_Debug_Init
1a001308 g     F .text	00000020 Chip_ADC_Int_SetChannelCmd
10000044 g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a0019d4 g     F .text	00000158 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001180 g     F .text	0000007c ResetISR
1a0013c4 g     F .text	00000014 SystemCoreClockUpdate
1a0028d4 g     O .text	00000383 HttpWebPageHeader
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002710  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a002734 g     F .text	00000010 strlen
1a002402 g     F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a00210a g     F .text	00000054 gpioRead
1a000fec g     F .text	0000001c stdioPrintf
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000c74 g     F .text	0000004c esp8266ConfigHttpServer
1a00106c g     F .text	00000014 Board_UART_Init
1a001810 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a001174 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 81 11 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 0e 67 ff 53     }............g.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	f9 21 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     .!..............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 21 22 00 1a 61 22 00 1a a1 22 00 1a     ....!"..a"..."..
1a00007c:	e5 22 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ."..............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a bd 01 00 1a 8b 01 00 1a 01 24 00 1a     .............$..
1a0000ac:	03 24 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     .$..............
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a0031b8 	.word	0x1a0031b8
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000044 	.word	0x00000044
1a000120:	1a0031b8 	.word	0x1a0031b8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0031b8 	.word	0x1a0031b8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0031b8 	.word	0x1a0031b8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0031b8 	.word	0x1a0031b8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000170 	.word	0x00000170
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr

1a0001bc <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a0001bc:	4770      	bx	lr
1a0001be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000300:	b530      	push	{r4, r5, lr}
1a000302:	b089      	sub	sp, #36	; 0x24
	uint8_t counter = 0;
	delay_t wifiDelay;
   uint16_t LecturaADC1=0;
   
	// Inicializar la placa
	boardConfig ();
1a000304:	f001 fd58 	bl	1a001db8 <boardConfig>
	// Configura la UART USB a 115200 baudios
	uartConfig (UART_USB, 57600);
1a000308:	f44f 4161 	mov.w	r1, #57600	; 0xe100
1a00030c:	2000      	movs	r0, #0
1a00030e:	f002 f80b 	bl	1a002328 <uartConfig>
   
   // Habilita el ADC para el Pote
   adcConfig(ADC_ENABLE);
1a000312:	2000      	movs	r0, #0
1a000314:	f001 fcde 	bl	1a001cd4 <adcConfig>
	// Envia un mensaje de bienvenida.
	stdioPrintf(UART_USB, "\n\rBienvenido al servidor HTTP Esp8266 con EDU CIAA");
1a000318:	493d      	ldr	r1, [pc, #244]	; (1a000410 <main+0x110>)
1a00031a:	2000      	movs	r0, #0
1a00031c:	f000 fe66 	bl	1a000fec <stdioPrintf>
	stdioPrintf(UART_USB, "\n\rLa configuracion puede tardar hasta 1 minuto.");
1a000320:	493c      	ldr	r1, [pc, #240]	; (1a000414 <main+0x114>)
1a000322:	2000      	movs	r0, #0
1a000324:	f000 fe62 	bl	1a000fec <stdioPrintf>

	error = FALSE;
	// Configura un delay para salir de la configuracion en caso de error.
	delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a000328:	f64e 2260 	movw	r2, #60000	; 0xea60
1a00032c:	2300      	movs	r3, #0
1a00032e:	a802      	add	r0, sp, #8
1a000330:	f001 fdbc 	bl	1a001eac <delayConfig>
	error = FALSE;
1a000334:	2400      	movs	r4, #0

	// Mientras no termine la configuracion o mientras no pase el tiempo maximo, ejecuta la configuracion.
	// A la configuracion se le pasa nombre y contrasenia de RED
	while (!esp8266ConfigHttpServer(WIFI_NAME, WIFI_PASS) && !error){
1a000336:	e004      	b.n	1a000342 <main+0x42>
		if (delayRead(&wifiDelay)){
1a000338:	a802      	add	r0, sp, #8
1a00033a:	f001 fdc7 	bl	1a001ecc <delayRead>
1a00033e:	b100      	cbz	r0, 1a000342 <main+0x42>
			error = TRUE;
1a000340:	2401      	movs	r4, #1
	while (!esp8266ConfigHttpServer(WIFI_NAME, WIFI_PASS) && !error){
1a000342:	4935      	ldr	r1, [pc, #212]	; (1a000418 <main+0x118>)
1a000344:	4835      	ldr	r0, [pc, #212]	; (1a00041c <main+0x11c>)
1a000346:	f000 fc95 	bl	1a000c74 <esp8266ConfigHttpServer>
1a00034a:	b908      	cbnz	r0, 1a000350 <main+0x50>
1a00034c:	2c00      	cmp	r4, #0
1a00034e:	d0f3      	beq.n	1a000338 <main+0x38>
		}
	}

	// Avisa al usuario como salio la configuracion
	if (!error){
1a000350:	b95c      	cbnz	r4, 1a00036a <main+0x6a>
		stdioPrintf(UART_USB, "\n\rServidor HTTP configurado. IP: %s", esp8266GetIpAddress());
1a000352:	f000 fc83 	bl	1a000c5c <esp8266GetIpAddress>
1a000356:	4602      	mov	r2, r0
1a000358:	4931      	ldr	r1, [pc, #196]	; (1a000420 <main+0x120>)
1a00035a:	2000      	movs	r0, #0
1a00035c:	f000 fe46 	bl	1a000fec <stdioPrintf>
		// Enciende LEDG indicando que el modulo esta configurado.
		gpioWrite(LEDG, TRUE);
1a000360:	2101      	movs	r1, #1
1a000362:	2029      	movs	r0, #41	; 0x29
1a000364:	f001 fea6 	bl	1a0020b4 <gpioWrite>
1a000368:	e014      	b.n	1a000394 <main+0x94>
	} else {
		stdioPrintf(UART_USB, "\n\rError al configurar servidor HTTP.");
1a00036a:	492e      	ldr	r1, [pc, #184]	; (1a000424 <main+0x124>)
1a00036c:	2000      	movs	r0, #0
1a00036e:	f000 fe3d 	bl	1a000fec <stdioPrintf>
		// Enciende LEDR indicando que el modulo esta en error.
		gpioWrite(LEDR, TRUE);
1a000372:	2101      	movs	r1, #1
1a000374:	2028      	movs	r0, #40	; 0x28
1a000376:	f001 fe9d 	bl	1a0020b4 <gpioWrite>
1a00037a:	e00b      	b.n	1a000394 <main+0x94>
					error = TRUE;
				}
			}

			// Avisa al usuario como fue el envio
			if (!error){
1a00037c:	2c00      	cmp	r4, #0
1a00037e:	d13b      	bne.n	1a0003f8 <main+0xf8>
				stdioPrintf(UART_USB, "\n\rPeticion respondida al cliente HTTP %d.", esp8266GetConnectionId());
1a000380:	f000 fc70 	bl	1a000c64 <esp8266GetConnectionId>
1a000384:	4602      	mov	r2, r0
1a000386:	4928      	ldr	r1, [pc, #160]	; (1a000428 <main+0x128>)
1a000388:	2000      	movs	r0, #0
1a00038a:	f000 fe2f 	bl	1a000fec <stdioPrintf>
				gpioToggle(LEDG);
1a00038e:	2029      	movs	r0, #41	; 0x29
1a000390:	f001 fee5 	bl	1a00215e <gpioToggle>
		if (esp8266ReadHttpServer()){
1a000394:	f000 fc94 	bl	1a000cc0 <esp8266ReadHttpServer>
1a000398:	2800      	cmp	r0, #0
1a00039a:	d0fb      	beq.n	1a000394 <main+0x94>
         LecturaADC1 = adcRead( CH1 );
1a00039c:	2041      	movs	r0, #65	; 0x41
1a00039e:	f001 fcdf 	bl	1a001d60 <adcRead>
1a0003a2:	4605      	mov	r5, r0
         Tecla2 = gpioRead( TEC2 );
1a0003a4:	2025      	movs	r0, #37	; 0x25
1a0003a6:	f001 feb0 	bl	1a00210a <gpioRead>
         Tecla2 = !Tecla2;
1a0003aa:	fab0 f480 	clz	r4, r0
1a0003ae:	0964      	lsrs	r4, r4, #5
         gpioWrite( LED1, Tecla2 );
1a0003b0:	4621      	mov	r1, r4
1a0003b2:	202b      	movs	r0, #43	; 0x2b
1a0003b4:	f001 fe7e 	bl	1a0020b4 <gpioWrite>
         stdioSprintf(HttpWebPageBody, "%s Estado LED1: %d - VALOR ADC-CH1: %d %s", BEGIN_USER_LINE, Tecla2, LecturaADC1, END_USER_LINE);
1a0003b8:	4b1c      	ldr	r3, [pc, #112]	; (1a00042c <main+0x12c>)
1a0003ba:	9301      	str	r3, [sp, #4]
1a0003bc:	9500      	str	r5, [sp, #0]
1a0003be:	4623      	mov	r3, r4
1a0003c0:	4a1b      	ldr	r2, [pc, #108]	; (1a000430 <main+0x130>)
1a0003c2:	491c      	ldr	r1, [pc, #112]	; (1a000434 <main+0x134>)
1a0003c4:	481c      	ldr	r0, [pc, #112]	; (1a000438 <main+0x138>)
1a0003c6:	f000 fe1f 	bl	1a001008 <stdioSprintf>
			delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a0003ca:	f64e 2260 	movw	r2, #60000	; 0xea60
1a0003ce:	2300      	movs	r3, #0
1a0003d0:	a802      	add	r0, sp, #8
1a0003d2:	f001 fd6b 	bl	1a001eac <delayConfig>
			error = FALSE;
1a0003d6:	2400      	movs	r4, #0
			while (!esp8266WriteHttpServer(HttpWebPageHeader, HttpWebPageBody, HttpWebPageEnd) && !error){
1a0003d8:	4a18      	ldr	r2, [pc, #96]	; (1a00043c <main+0x13c>)
1a0003da:	4917      	ldr	r1, [pc, #92]	; (1a000438 <main+0x138>)
1a0003dc:	4818      	ldr	r0, [pc, #96]	; (1a000440 <main+0x140>)
1a0003de:	f000 fc7b 	bl	1a000cd8 <esp8266WriteHttpServer>
1a0003e2:	2800      	cmp	r0, #0
1a0003e4:	d1ca      	bne.n	1a00037c <main+0x7c>
1a0003e6:	2c00      	cmp	r4, #0
1a0003e8:	d1c8      	bne.n	1a00037c <main+0x7c>
				if (delayRead(&wifiDelay)){
1a0003ea:	a802      	add	r0, sp, #8
1a0003ec:	f001 fd6e 	bl	1a001ecc <delayRead>
1a0003f0:	2800      	cmp	r0, #0
1a0003f2:	d0f1      	beq.n	1a0003d8 <main+0xd8>
					error = TRUE;
1a0003f4:	2401      	movs	r4, #1
1a0003f6:	e7ef      	b.n	1a0003d8 <main+0xd8>
			} else {
				stdioPrintf(UART_USB, "\n\rPeticion respondida al cliente HTTP %d.", esp8266GetConnectionId());
1a0003f8:	f000 fc34 	bl	1a000c64 <esp8266GetConnectionId>
1a0003fc:	4602      	mov	r2, r0
1a0003fe:	490a      	ldr	r1, [pc, #40]	; (1a000428 <main+0x128>)
1a000400:	2000      	movs	r0, #0
1a000402:	f000 fdf3 	bl	1a000fec <stdioPrintf>
				gpioToggle(LEDR);
1a000406:	2028      	movs	r0, #40	; 0x28
1a000408:	f001 fea9 	bl	1a00215e <gpioToggle>
1a00040c:	e7c2      	b.n	1a000394 <main+0x94>
1a00040e:	bf00      	nop
1a000410:	1a002c58 	.word	0x1a002c58
1a000414:	1a002c8c 	.word	0x1a002c8c
1a000418:	1a002cbc 	.word	0x1a002cbc
1a00041c:	1a002cc8 	.word	0x1a002cc8
1a000420:	1a002cd8 	.word	0x1a002cd8
1a000424:	1a002cfc 	.word	0x1a002cfc
1a000428:	1a002d8c 	.word	0x1a002d8c
1a00042c:	1a002d7c 	.word	0x1a002d7c
1a000430:	1a002d24 	.word	0x1a002d24
1a000434:	1a002d50 	.word	0x1a002d50
1a000438:	100000dc 	.word	0x100000dc
1a00043c:	1a002744 	.word	0x1a002744
1a000440:	1a0028d4 	.word	0x1a0028d4

1a000444 <SetEsp8622Status>:
/**
 * Setea el estado global del modulo Esp8266.
 * @param status Estado a setear.
 */
static void    SetEsp8622Status        (Esp8266Status_t status) {
	Esp8266Status = status;
1a000444:	4b01      	ldr	r3, [pc, #4]	; (1a00044c <SetEsp8622Status+0x8>)
1a000446:	7018      	strb	r0, [r3, #0]
1a000448:	4770      	bx	lr
1a00044a:	bf00      	nop
1a00044c:	1000006c 	.word	0x1000006c

1a000450 <IsWaitedResponse>:
static bool_t  IsWaitedResponse        (void) {
1a000450:	b500      	push	{lr}
1a000452:	b083      	sub	sp, #12
	if (uartReadByte(ESP8266_UART, &byteReceived)) {
1a000454:	f10d 0107 	add.w	r1, sp, #7
1a000458:	2001      	movs	r0, #1
1a00045a:	f001 ff97 	bl	1a00238c <uartReadByte>
1a00045e:	4603      	mov	r3, r0
1a000460:	b158      	cbz	r0, 1a00047a <IsWaitedResponse+0x2a>
		if (byteReceived == Esp8266ResponseToWait[index]) {
1a000462:	4b0e      	ldr	r3, [pc, #56]	; (1a00049c <IsWaitedResponse+0x4c>)
1a000464:	681a      	ldr	r2, [r3, #0]
1a000466:	4b0e      	ldr	r3, [pc, #56]	; (1a0004a0 <IsWaitedResponse+0x50>)
1a000468:	781b      	ldrb	r3, [r3, #0]
1a00046a:	5cd0      	ldrb	r0, [r2, r3]
1a00046c:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000470:	4288      	cmp	r0, r1
1a000472:	d006      	beq.n	1a000482 <IsWaitedResponse+0x32>
			index = 0;
1a000474:	2300      	movs	r3, #0
1a000476:	4a0a      	ldr	r2, [pc, #40]	; (1a0004a0 <IsWaitedResponse+0x50>)
1a000478:	7013      	strb	r3, [r2, #0]
}
1a00047a:	4618      	mov	r0, r3
1a00047c:	b003      	add	sp, #12
1a00047e:	f85d fb04 	ldr.w	pc, [sp], #4
			index++;
1a000482:	3301      	adds	r3, #1
1a000484:	b2db      	uxtb	r3, r3
1a000486:	4906      	ldr	r1, [pc, #24]	; (1a0004a0 <IsWaitedResponse+0x50>)
1a000488:	700b      	strb	r3, [r1, #0]
			if (Esp8266ResponseToWait[index] == '\0') {
1a00048a:	5cd3      	ldrb	r3, [r2, r3]
1a00048c:	b91b      	cbnz	r3, 1a000496 <IsWaitedResponse+0x46>
				index = 0;
1a00048e:	2200      	movs	r2, #0
1a000490:	700a      	strb	r2, [r1, #0]
				moduleResponse = TRUE;
1a000492:	2301      	movs	r3, #1
1a000494:	e7f1      	b.n	1a00047a <IsWaitedResponse+0x2a>
bool_t moduleResponse = FALSE;
1a000496:	2300      	movs	r3, #0
1a000498:	e7ef      	b.n	1a00047a <IsWaitedResponse+0x2a>
1a00049a:	bf00      	nop
1a00049c:	10000068 	.word	0x10000068
1a0004a0:	100000d0 	.word	0x100000d0

1a0004a4 <ExcecuteHttpServerFsm>:
static void    ExcecuteHttpServerFsm   (void) {
1a0004a4:	b530      	push	{r4, r5, lr}
1a0004a6:	b083      	sub	sp, #12
	switch (Esp8266Status) {
1a0004a8:	4bab      	ldr	r3, [pc, #684]	; (1a000758 <ExcecuteHttpServerFsm+0x2b4>)
1a0004aa:	781b      	ldrb	r3, [r3, #0]
1a0004ac:	2b29      	cmp	r3, #41	; 0x29
1a0004ae:	d839      	bhi.n	1a000524 <ExcecuteHttpServerFsm+0x80>
1a0004b0:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0004b4:	003a002a 	.word	0x003a002a
1a0004b8:	009e0050 	.word	0x009e0050
1a0004bc:	00ce00b4 	.word	0x00ce00b4
1a0004c0:	010200eb 	.word	0x010200eb
1a0004c4:	0138011f 	.word	0x0138011f
1a0004c8:	0186016c 	.word	0x0186016c
1a0004cc:	00380038 	.word	0x00380038
1a0004d0:	00380038 	.word	0x00380038
1a0004d4:	00380038 	.word	0x00380038
1a0004d8:	00380038 	.word	0x00380038
1a0004dc:	019d0038 	.word	0x019d0038
1a0004e0:	01e101b7 	.word	0x01e101b7
1a0004e4:	003801f8 	.word	0x003801f8
1a0004e8:	02780261 	.word	0x02780261
1a0004ec:	02fa02af 	.word	0x02fa02af
1a0004f0:	03540337 	.word	0x03540337
1a0004f4:	02c40366 	.word	0x02c40366
1a0004f8:	03830298 	.word	0x03830298
1a0004fc:	0215039c 	.word	0x0215039c
1a000500:	0246022c 	.word	0x0246022c
1a000504:	0082006c 	.word	0x0082006c
		uartConfig(ESP8266_UART, ESP8266_BAUD_RATE);
1a000508:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00050c:	2001      	movs	r0, #1
1a00050e:	f001 ff0b 	bl	1a002328 <uartConfig>
		delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000512:	f241 3288 	movw	r2, #5000	; 0x1388
1a000516:	2300      	movs	r3, #0
1a000518:	4890      	ldr	r0, [pc, #576]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00051a:	f001 fcc7 	bl	1a001eac <delayConfig>
		SetEsp8622Status(ESP_SEND_AT);
1a00051e:	2001      	movs	r0, #1
1a000520:	f7ff ff90 	bl	1a000444 <SetEsp8622Status>
}
1a000524:	b003      	add	sp, #12
1a000526:	bd30      	pop	{r4, r5, pc}
		if (delayRead(&Esp8266Delay)) {
1a000528:	488c      	ldr	r0, [pc, #560]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00052a:	f001 fccf 	bl	1a001ecc <delayRead>
1a00052e:	2800      	cmp	r0, #0
1a000530:	d0f8      	beq.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT\r\n");
1a000532:	498b      	ldr	r1, [pc, #556]	; (1a000760 <ExcecuteHttpServerFsm+0x2bc>)
1a000534:	2001      	movs	r0, #1
1a000536:	f000 fd59 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00053a:	4a8a      	ldr	r2, [pc, #552]	; (1a000764 <ExcecuteHttpServerFsm+0x2c0>)
1a00053c:	4b8a      	ldr	r3, [pc, #552]	; (1a000768 <ExcecuteHttpServerFsm+0x2c4>)
1a00053e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000540:	f241 3288 	movw	r2, #5000	; 0x1388
1a000544:	2300      	movs	r3, #0
1a000546:	4885      	ldr	r0, [pc, #532]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a000548:	f001 fcb0 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_AT);
1a00054c:	2002      	movs	r0, #2
1a00054e:	f7ff ff79 	bl	1a000444 <SetEsp8622Status>
1a000552:	e7e7      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a000554:	f7ff ff7c 	bl	1a000450 <IsWaitedResponse>
1a000558:	b970      	cbnz	r0, 1a000578 <ExcecuteHttpServerFsm+0xd4>
		if (delayRead(&Esp8266Delay)) {
1a00055a:	4880      	ldr	r0, [pc, #512]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00055c:	f001 fcb6 	bl	1a001ecc <delayRead>
1a000560:	2800      	cmp	r0, #0
1a000562:	d0df      	beq.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000564:	f241 3288 	movw	r2, #5000	; 0x1388
1a000568:	2300      	movs	r3, #0
1a00056a:	487c      	ldr	r0, [pc, #496]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00056c:	f001 fc9e 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_AT);
1a000570:	2001      	movs	r0, #1
1a000572:	f7ff ff67 	bl	1a000444 <SetEsp8622Status>
1a000576:	e7d5      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000578:	f241 3288 	movw	r2, #5000	; 0x1388
1a00057c:	2300      	movs	r3, #0
1a00057e:	4877      	ldr	r0, [pc, #476]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a000580:	f001 fc94 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CWMODE);
1a000584:	2028      	movs	r0, #40	; 0x28
1a000586:	f7ff ff5d 	bl	1a000444 <SetEsp8622Status>
1a00058a:	e7e6      	b.n	1a00055a <ExcecuteHttpServerFsm+0xb6>
		if (delayRead(&Esp8266Delay)) {
1a00058c:	4873      	ldr	r0, [pc, #460]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00058e:	f001 fc9d 	bl	1a001ecc <delayRead>
1a000592:	2800      	cmp	r0, #0
1a000594:	d0c6      	beq.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");
1a000596:	4975      	ldr	r1, [pc, #468]	; (1a00076c <ExcecuteHttpServerFsm+0x2c8>)
1a000598:	2001      	movs	r0, #1
1a00059a:	f000 fd27 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00059e:	4a71      	ldr	r2, [pc, #452]	; (1a000764 <ExcecuteHttpServerFsm+0x2c0>)
1a0005a0:	4b71      	ldr	r3, [pc, #452]	; (1a000768 <ExcecuteHttpServerFsm+0x2c4>)
1a0005a2:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0005a4:	f241 3288 	movw	r2, #5000	; 0x1388
1a0005a8:	2300      	movs	r3, #0
1a0005aa:	486c      	ldr	r0, [pc, #432]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0005ac:	f001 fc7e 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CWMODE);
1a0005b0:	2029      	movs	r0, #41	; 0x29
1a0005b2:	f7ff ff47 	bl	1a000444 <SetEsp8622Status>
1a0005b6:	e7b5      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a0005b8:	f7ff ff4a 	bl	1a000450 <IsWaitedResponse>
1a0005bc:	b970      	cbnz	r0, 1a0005dc <ExcecuteHttpServerFsm+0x138>
		if (delayRead(&Esp8266Delay)) {
1a0005be:	4867      	ldr	r0, [pc, #412]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0005c0:	f001 fc84 	bl	1a001ecc <delayRead>
1a0005c4:	2800      	cmp	r0, #0
1a0005c6:	d0ad      	beq.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0005c8:	f241 3288 	movw	r2, #5000	; 0x1388
1a0005cc:	2300      	movs	r3, #0
1a0005ce:	4863      	ldr	r0, [pc, #396]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0005d0:	f001 fc6c 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CWMODE);
1a0005d4:	2028      	movs	r0, #40	; 0x28
1a0005d6:	f7ff ff35 	bl	1a000444 <SetEsp8622Status>
1a0005da:	e7a3      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0005dc:	f241 3288 	movw	r2, #5000	; 0x1388
1a0005e0:	2300      	movs	r3, #0
1a0005e2:	485e      	ldr	r0, [pc, #376]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0005e4:	f001 fc62 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CWJAP_CONS);
1a0005e8:	2003      	movs	r0, #3
1a0005ea:	f7ff ff2b 	bl	1a000444 <SetEsp8622Status>
1a0005ee:	e7e6      	b.n	1a0005be <ExcecuteHttpServerFsm+0x11a>
		if (delayRead(&Esp8266Delay)) {
1a0005f0:	485a      	ldr	r0, [pc, #360]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0005f2:	f001 fc6b 	bl	1a001ecc <delayRead>
1a0005f6:	2800      	cmp	r0, #0
1a0005f8:	d094      	beq.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CWJAP?\r\n");
1a0005fa:	495d      	ldr	r1, [pc, #372]	; (1a000770 <ExcecuteHttpServerFsm+0x2cc>)
1a0005fc:	2001      	movs	r0, #1
1a0005fe:	f000 fcf5 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_OK;
1a000602:	4a5c      	ldr	r2, [pc, #368]	; (1a000774 <ExcecuteHttpServerFsm+0x2d0>)
1a000604:	4b58      	ldr	r3, [pc, #352]	; (1a000768 <ExcecuteHttpServerFsm+0x2c4>)
1a000606:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000608:	f241 3288 	movw	r2, #5000	; 0x1388
1a00060c:	2300      	movs	r3, #0
1a00060e:	4853      	ldr	r0, [pc, #332]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a000610:	f001 fc4c 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_1);
1a000614:	2004      	movs	r0, #4
1a000616:	f7ff ff15 	bl	1a000444 <SetEsp8622Status>
1a00061a:	e783      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a00061c:	f7ff ff18 	bl	1a000450 <IsWaitedResponse>
1a000620:	b978      	cbnz	r0, 1a000642 <ExcecuteHttpServerFsm+0x19e>
		if (delayRead(&Esp8266Delay)) {
1a000622:	484e      	ldr	r0, [pc, #312]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a000624:	f001 fc52 	bl	1a001ecc <delayRead>
1a000628:	2800      	cmp	r0, #0
1a00062a:	f43f af7b 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00062e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000632:	2300      	movs	r3, #0
1a000634:	4849      	ldr	r0, [pc, #292]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a000636:	f001 fc39 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CWMODE_SET);
1a00063a:	2006      	movs	r0, #6
1a00063c:	f7ff ff02 	bl	1a000444 <SetEsp8622Status>
1a000640:	e770      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			Esp8266ResponseToWait = Response_OK;
1a000642:	4a48      	ldr	r2, [pc, #288]	; (1a000764 <ExcecuteHttpServerFsm+0x2c0>)
1a000644:	4b48      	ldr	r3, [pc, #288]	; (1a000768 <ExcecuteHttpServerFsm+0x2c4>)
1a000646:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_2);
1a000648:	2005      	movs	r0, #5
1a00064a:	f7ff fefb 	bl	1a000444 <SetEsp8622Status>
1a00064e:	e7e8      	b.n	1a000622 <ExcecuteHttpServerFsm+0x17e>
		if (IsWaitedResponse()){
1a000650:	f7ff fefe 	bl	1a000450 <IsWaitedResponse>
1a000654:	b978      	cbnz	r0, 1a000676 <ExcecuteHttpServerFsm+0x1d2>
		if (delayRead(&Esp8266Delay)) {
1a000656:	4841      	ldr	r0, [pc, #260]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a000658:	f001 fc38 	bl	1a001ecc <delayRead>
1a00065c:	2800      	cmp	r0, #0
1a00065e:	f43f af61 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000662:	f241 3288 	movw	r2, #5000	; 0x1388
1a000666:	2300      	movs	r3, #0
1a000668:	483c      	ldr	r0, [pc, #240]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00066a:	f001 fc1f 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_AT);
1a00066e:	2001      	movs	r0, #1
1a000670:	f7ff fee8 	bl	1a000444 <SetEsp8622Status>
1a000674:	e756      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000676:	f241 3288 	movw	r2, #5000	; 0x1388
1a00067a:	2300      	movs	r3, #0
1a00067c:	4837      	ldr	r0, [pc, #220]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00067e:	f001 fc15 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_CIPMUX_SEND);
1a000682:	2015      	movs	r0, #21
1a000684:	f7ff fede 	bl	1a000444 <SetEsp8622Status>
1a000688:	e7e5      	b.n	1a000656 <ExcecuteHttpServerFsm+0x1b2>
		if (delayRead(&Esp8266Delay)) {
1a00068a:	4834      	ldr	r0, [pc, #208]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00068c:	f001 fc1e 	bl	1a001ecc <delayRead>
1a000690:	2800      	cmp	r0, #0
1a000692:	f43f af47 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");
1a000696:	4935      	ldr	r1, [pc, #212]	; (1a00076c <ExcecuteHttpServerFsm+0x2c8>)
1a000698:	2001      	movs	r0, #1
1a00069a:	f000 fca7 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00069e:	4a31      	ldr	r2, [pc, #196]	; (1a000764 <ExcecuteHttpServerFsm+0x2c0>)
1a0006a0:	4b31      	ldr	r3, [pc, #196]	; (1a000768 <ExcecuteHttpServerFsm+0x2c4>)
1a0006a2:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0006a4:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006a8:	2300      	movs	r3, #0
1a0006aa:	482c      	ldr	r0, [pc, #176]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0006ac:	f001 fbfe 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CWMODE_SET);
1a0006b0:	2007      	movs	r0, #7
1a0006b2:	f7ff fec7 	bl	1a000444 <SetEsp8622Status>
1a0006b6:	e735      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a0006b8:	f7ff feca 	bl	1a000450 <IsWaitedResponse>
1a0006bc:	b978      	cbnz	r0, 1a0006de <ExcecuteHttpServerFsm+0x23a>
		if (delayRead(&Esp8266Delay)) {
1a0006be:	4827      	ldr	r0, [pc, #156]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0006c0:	f001 fc04 	bl	1a001ecc <delayRead>
1a0006c4:	2800      	cmp	r0, #0
1a0006c6:	f43f af2d 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0006ca:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006ce:	2300      	movs	r3, #0
1a0006d0:	4822      	ldr	r0, [pc, #136]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0006d2:	f001 fbeb 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_AT);
1a0006d6:	2001      	movs	r0, #1
1a0006d8:	f7ff feb4 	bl	1a000444 <SetEsp8622Status>
1a0006dc:	e722      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0006de:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006e2:	2300      	movs	r3, #0
1a0006e4:	481d      	ldr	r0, [pc, #116]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0006e6:	f001 fbe1 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CWJAP_SET);
1a0006ea:	2008      	movs	r0, #8
1a0006ec:	f7ff feaa 	bl	1a000444 <SetEsp8622Status>
1a0006f0:	e7e5      	b.n	1a0006be <ExcecuteHttpServerFsm+0x21a>
		if (delayRead(&Esp8266Delay)) {
1a0006f2:	481a      	ldr	r0, [pc, #104]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a0006f4:	f001 fbea 	bl	1a001ecc <delayRead>
1a0006f8:	2800      	cmp	r0, #0
1a0006fa:	f43f af13 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CWJAP=\"%s\",\"%s\"", WifiName, WifiPass);
1a0006fe:	4b1e      	ldr	r3, [pc, #120]	; (1a000778 <ExcecuteHttpServerFsm+0x2d4>)
1a000700:	4a1e      	ldr	r2, [pc, #120]	; (1a00077c <ExcecuteHttpServerFsm+0x2d8>)
1a000702:	491f      	ldr	r1, [pc, #124]	; (1a000780 <ExcecuteHttpServerFsm+0x2dc>)
1a000704:	2001      	movs	r0, #1
1a000706:	f000 fc71 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_1;
1a00070a:	4a1e      	ldr	r2, [pc, #120]	; (1a000784 <ExcecuteHttpServerFsm+0x2e0>)
1a00070c:	4b16      	ldr	r3, [pc, #88]	; (1a000768 <ExcecuteHttpServerFsm+0x2c4>)
1a00070e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000710:	f241 3288 	movw	r2, #5000	; 0x1388
1a000714:	2300      	movs	r3, #0
1a000716:	4811      	ldr	r0, [pc, #68]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a000718:	f001 fbc8 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_1);
1a00071c:	2009      	movs	r0, #9
1a00071e:	f7ff fe91 	bl	1a000444 <SetEsp8622Status>
1a000722:	e6ff      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a000724:	f7ff fe94 	bl	1a000450 <IsWaitedResponse>
1a000728:	b978      	cbnz	r0, 1a00074a <ExcecuteHttpServerFsm+0x2a6>
		if (delayRead(&Esp8266Delay)) {
1a00072a:	480c      	ldr	r0, [pc, #48]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00072c:	f001 fbce 	bl	1a001ecc <delayRead>
1a000730:	2800      	cmp	r0, #0
1a000732:	f43f aef7 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000736:	f241 3288 	movw	r2, #5000	; 0x1388
1a00073a:	2300      	movs	r3, #0
1a00073c:	4807      	ldr	r0, [pc, #28]	; (1a00075c <ExcecuteHttpServerFsm+0x2b8>)
1a00073e:	f001 fbb5 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_AT);
1a000742:	2001      	movs	r0, #1
1a000744:	f7ff fe7e 	bl	1a000444 <SetEsp8622Status>
1a000748:	e6ec      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			Esp8266ResponseToWait = Response_CWJAP_2;
1a00074a:	4a0f      	ldr	r2, [pc, #60]	; (1a000788 <ExcecuteHttpServerFsm+0x2e4>)
1a00074c:	4b06      	ldr	r3, [pc, #24]	; (1a000768 <ExcecuteHttpServerFsm+0x2c4>)
1a00074e:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_2);
1a000750:	200a      	movs	r0, #10
1a000752:	f7ff fe77 	bl	1a000444 <SetEsp8622Status>
1a000756:	e7e8      	b.n	1a00072a <ExcecuteHttpServerFsm+0x286>
1a000758:	1000006c 	.word	0x1000006c
1a00075c:	10000050 	.word	0x10000050
1a000760:	1a002db8 	.word	0x1a002db8
1a000764:	1a002f08 	.word	0x1a002f08
1a000768:	10000068 	.word	0x10000068
1a00076c:	1a002dc0 	.word	0x1a002dc0
1a000770:	1a002dd0 	.word	0x1a002dd0
1a000774:	1a002f00 	.word	0x1a002f00
1a000778:	100000b0 	.word	0x100000b0
1a00077c:	10000090 	.word	0x10000090
1a000780:	1a002ddc 	.word	0x1a002ddc
1a000784:	1a002ee4 	.word	0x1a002ee4
1a000788:	1a002ef4 	.word	0x1a002ef4
		if (IsWaitedResponse()) {
1a00078c:	f7ff fe60 	bl	1a000450 <IsWaitedResponse>
1a000790:	b978      	cbnz	r0, 1a0007b2 <ExcecuteHttpServerFsm+0x30e>
		if (delayRead(&Esp8266Delay)) {
1a000792:	48b6      	ldr	r0, [pc, #728]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000794:	f001 fb9a 	bl	1a001ecc <delayRead>
1a000798:	2800      	cmp	r0, #0
1a00079a:	f43f aec3 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00079e:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007a2:	2300      	movs	r3, #0
1a0007a4:	48b1      	ldr	r0, [pc, #708]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0007a6:	f001 fb81 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_AT);
1a0007aa:	2001      	movs	r0, #1
1a0007ac:	f7ff fe4a 	bl	1a000444 <SetEsp8622Status>
1a0007b0:	e6b8      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			Esp8266ResponseToWait = Response_OK;
1a0007b2:	4aaf      	ldr	r2, [pc, #700]	; (1a000a70 <ExcecuteHttpServerFsm+0x5cc>)
1a0007b4:	4baf      	ldr	r3, [pc, #700]	; (1a000a74 <ExcecuteHttpServerFsm+0x5d0>)
1a0007b6:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_3);
1a0007b8:	200b      	movs	r0, #11
1a0007ba:	f7ff fe43 	bl	1a000444 <SetEsp8622Status>
1a0007be:	e7e8      	b.n	1a000792 <ExcecuteHttpServerFsm+0x2ee>
		if (IsWaitedResponse())
1a0007c0:	f7ff fe46 	bl	1a000450 <IsWaitedResponse>
1a0007c4:	b978      	cbnz	r0, 1a0007e6 <ExcecuteHttpServerFsm+0x342>
		if (delayRead(&Esp8266Delay)) {
1a0007c6:	48a9      	ldr	r0, [pc, #676]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0007c8:	f001 fb80 	bl	1a001ecc <delayRead>
1a0007cc:	2800      	cmp	r0, #0
1a0007ce:	f43f aea9 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007d2:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007d6:	2300      	movs	r3, #0
1a0007d8:	48a4      	ldr	r0, [pc, #656]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0007da:	f001 fb67 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_AT);
1a0007de:	2001      	movs	r0, #1
1a0007e0:	f7ff fe30 	bl	1a000444 <SetEsp8622Status>
1a0007e4:	e69e      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			SetEsp8622Status(ESP_CIPMUX_SEND);
1a0007e6:	2015      	movs	r0, #21
1a0007e8:	f7ff fe2c 	bl	1a000444 <SetEsp8622Status>
1a0007ec:	e7eb      	b.n	1a0007c6 <ExcecuteHttpServerFsm+0x322>
		if (delayRead(&Esp8266Delay)) {
1a0007ee:	489f      	ldr	r0, [pc, #636]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0007f0:	f001 fb6c 	bl	1a001ecc <delayRead>
1a0007f4:	2800      	cmp	r0, #0
1a0007f6:	f43f ae95 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CIPMUX=1\r\n");
1a0007fa:	499f      	ldr	r1, [pc, #636]	; (1a000a78 <ExcecuteHttpServerFsm+0x5d4>)
1a0007fc:	2001      	movs	r0, #1
1a0007fe:	f000 fbf5 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000802:	4a9b      	ldr	r2, [pc, #620]	; (1a000a70 <ExcecuteHttpServerFsm+0x5cc>)
1a000804:	4b9b      	ldr	r3, [pc, #620]	; (1a000a74 <ExcecuteHttpServerFsm+0x5d0>)
1a000806:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000808:	f241 3288 	movw	r2, #5000	; 0x1388
1a00080c:	2300      	movs	r3, #0
1a00080e:	4897      	ldr	r0, [pc, #604]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000810:	f001 fb4c 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CIPMUX);
1a000814:	2016      	movs	r0, #22
1a000816:	f7ff fe15 	bl	1a000444 <SetEsp8622Status>
			auxIndex=0;
1a00081a:	2200      	movs	r2, #0
1a00081c:	4b97      	ldr	r3, [pc, #604]	; (1a000a7c <ExcecuteHttpServerFsm+0x5d8>)
1a00081e:	701a      	strb	r2, [r3, #0]
1a000820:	e680      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a000822:	f7ff fe15 	bl	1a000450 <IsWaitedResponse>
1a000826:	b9e0      	cbnz	r0, 1a000862 <ExcecuteHttpServerFsm+0x3be>
		if (delayRead(&Esp8266Delay)) {
1a000828:	4890      	ldr	r0, [pc, #576]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a00082a:	f001 fb4f 	bl	1a001ecc <delayRead>
1a00082e:	2800      	cmp	r0, #0
1a000830:	f43f ae78 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000834:	f241 3288 	movw	r2, #5000	; 0x1388
1a000838:	2300      	movs	r3, #0
1a00083a:	488c      	ldr	r0, [pc, #560]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a00083c:	f001 fb36 	bl	1a001eac <delayConfig>
			stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%d\r\n", auxIndex);
1a000840:	4c8e      	ldr	r4, [pc, #568]	; (1a000a7c <ExcecuteHttpServerFsm+0x5d8>)
1a000842:	7822      	ldrb	r2, [r4, #0]
1a000844:	498e      	ldr	r1, [pc, #568]	; (1a000a80 <ExcecuteHttpServerFsm+0x5dc>)
1a000846:	2001      	movs	r0, #1
1a000848:	f000 fbd0 	bl	1a000fec <stdioPrintf>
			if (++auxIndex >= 4){
1a00084c:	7823      	ldrb	r3, [r4, #0]
1a00084e:	3301      	adds	r3, #1
1a000850:	b2db      	uxtb	r3, r3
1a000852:	7023      	strb	r3, [r4, #0]
1a000854:	2b03      	cmp	r3, #3
1a000856:	f67f ae65 	bls.w	1a000524 <ExcecuteHttpServerFsm+0x80>
				SetEsp8622Status(ESP_CIPMUX_SEND);
1a00085a:	2015      	movs	r0, #21
1a00085c:	f7ff fdf2 	bl	1a000444 <SetEsp8622Status>
1a000860:	e660      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000862:	f241 3288 	movw	r2, #5000	; 0x1388
1a000866:	2300      	movs	r3, #0
1a000868:	4880      	ldr	r0, [pc, #512]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a00086a:	f001 fb1f 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSERVER);
1a00086e:	2017      	movs	r0, #23
1a000870:	f7ff fde8 	bl	1a000444 <SetEsp8622Status>
1a000874:	e7d8      	b.n	1a000828 <ExcecuteHttpServerFsm+0x384>
		if (delayRead(&Esp8266Delay)) {
1a000876:	487d      	ldr	r0, [pc, #500]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000878:	f001 fb28 	bl	1a001ecc <delayRead>
1a00087c:	2800      	cmp	r0, #0
1a00087e:	f43f ae51 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CIPSERVER=1,80\r\n");
1a000882:	4980      	ldr	r1, [pc, #512]	; (1a000a84 <ExcecuteHttpServerFsm+0x5e0>)
1a000884:	2001      	movs	r0, #1
1a000886:	f000 fbb1 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00088a:	4a79      	ldr	r2, [pc, #484]	; (1a000a70 <ExcecuteHttpServerFsm+0x5cc>)
1a00088c:	4b79      	ldr	r3, [pc, #484]	; (1a000a74 <ExcecuteHttpServerFsm+0x5d0>)
1a00088e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000890:	f241 3288 	movw	r2, #5000	; 0x1388
1a000894:	2300      	movs	r3, #0
1a000896:	4875      	ldr	r0, [pc, #468]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000898:	f001 fb08 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CIPSERVER);
1a00089c:	2018      	movs	r0, #24
1a00089e:	f7ff fdd1 	bl	1a000444 <SetEsp8622Status>
1a0008a2:	e63f      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a0008a4:	f7ff fdd4 	bl	1a000450 <IsWaitedResponse>
1a0008a8:	b978      	cbnz	r0, 1a0008ca <ExcecuteHttpServerFsm+0x426>
		if (delayRead(&Esp8266Delay)) {
1a0008aa:	4870      	ldr	r0, [pc, #448]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0008ac:	f001 fb0e 	bl	1a001ecc <delayRead>
1a0008b0:	2800      	cmp	r0, #0
1a0008b2:	f43f ae37 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0008b6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0008ba:	2300      	movs	r3, #0
1a0008bc:	486b      	ldr	r0, [pc, #428]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0008be:	f001 faf5 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_AT);
1a0008c2:	2001      	movs	r0, #1
1a0008c4:	f7ff fdbe 	bl	1a000444 <SetEsp8622Status>
1a0008c8:	e62c      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0008ca:	f241 3288 	movw	r2, #5000	; 0x1388
1a0008ce:	2300      	movs	r3, #0
1a0008d0:	4866      	ldr	r0, [pc, #408]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0008d2:	f001 faeb 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a0008d6:	2025      	movs	r0, #37	; 0x25
1a0008d8:	f7ff fdb4 	bl	1a000444 <SetEsp8622Status>
1a0008dc:	e7e5      	b.n	1a0008aa <ExcecuteHttpServerFsm+0x406>
		if (delayRead(&Esp8266Delay)) {
1a0008de:	4863      	ldr	r0, [pc, #396]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0008e0:	f001 faf4 	bl	1a001ecc <delayRead>
1a0008e4:	2800      	cmp	r0, #0
1a0008e6:	f43f ae1d 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CIFSR\r\n");
1a0008ea:	4967      	ldr	r1, [pc, #412]	; (1a000a88 <ExcecuteHttpServerFsm+0x5e4>)
1a0008ec:	2001      	movs	r0, #1
1a0008ee:	f000 fb7d 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_CIFSR;
1a0008f2:	4a66      	ldr	r2, [pc, #408]	; (1a000a8c <ExcecuteHttpServerFsm+0x5e8>)
1a0008f4:	4b5f      	ldr	r3, [pc, #380]	; (1a000a74 <ExcecuteHttpServerFsm+0x5d0>)
1a0008f6:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0008f8:	f241 3288 	movw	r2, #5000	; 0x1388
1a0008fc:	2300      	movs	r3, #0
1a0008fe:	485b      	ldr	r0, [pc, #364]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000900:	f001 fad4 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CIFSR);
1a000904:	2026      	movs	r0, #38	; 0x26
1a000906:	f7ff fd9d 	bl	1a000444 <SetEsp8622Status>
1a00090a:	e60b      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a00090c:	f7ff fda0 	bl	1a000450 <IsWaitedResponse>
1a000910:	b978      	cbnz	r0, 1a000932 <ExcecuteHttpServerFsm+0x48e>
		if (delayRead(&Esp8266Delay)) {
1a000912:	4856      	ldr	r0, [pc, #344]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000914:	f001 fada 	bl	1a001ecc <delayRead>
1a000918:	2800      	cmp	r0, #0
1a00091a:	f43f ae03 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00091e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000922:	2300      	movs	r3, #0
1a000924:	4851      	ldr	r0, [pc, #324]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000926:	f001 fac1 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a00092a:	2025      	movs	r0, #37	; 0x25
1a00092c:	f7ff fd8a 	bl	1a000444 <SetEsp8622Status>
1a000930:	e5f8      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			SetEsp8622Status(ESP_LOAD_IP);
1a000932:	2027      	movs	r0, #39	; 0x27
1a000934:	f7ff fd86 	bl	1a000444 <SetEsp8622Status>
			auxIndex=0;
1a000938:	2200      	movs	r2, #0
1a00093a:	4b50      	ldr	r3, [pc, #320]	; (1a000a7c <ExcecuteHttpServerFsm+0x5d8>)
1a00093c:	701a      	strb	r2, [r3, #0]
1a00093e:	e7e8      	b.n	1a000912 <ExcecuteHttpServerFsm+0x46e>
		if (uartReadByte(ESP8266_UART, &byteReceived)) {
1a000940:	4953      	ldr	r1, [pc, #332]	; (1a000a90 <ExcecuteHttpServerFsm+0x5ec>)
1a000942:	2001      	movs	r0, #1
1a000944:	f001 fd22 	bl	1a00238c <uartReadByte>
1a000948:	2800      	cmp	r0, #0
1a00094a:	f43f adeb 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			if (byteReceived != '"') {
1a00094e:	4b50      	ldr	r3, [pc, #320]	; (1a000a90 <ExcecuteHttpServerFsm+0x5ec>)
1a000950:	781a      	ldrb	r2, [r3, #0]
1a000952:	2a22      	cmp	r2, #34	; 0x22
1a000954:	d006      	beq.n	1a000964 <ExcecuteHttpServerFsm+0x4c0>
				WifiIp [auxIndex] = byteReceived;
1a000956:	4949      	ldr	r1, [pc, #292]	; (1a000a7c <ExcecuteHttpServerFsm+0x5d8>)
1a000958:	780b      	ldrb	r3, [r1, #0]
1a00095a:	484e      	ldr	r0, [pc, #312]	; (1a000a94 <ExcecuteHttpServerFsm+0x5f0>)
1a00095c:	54c2      	strb	r2, [r0, r3]
				auxIndex++;
1a00095e:	3301      	adds	r3, #1
1a000960:	700b      	strb	r3, [r1, #0]
1a000962:	e5df      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
				WifiIp [auxIndex] = '\0';
1a000964:	4b45      	ldr	r3, [pc, #276]	; (1a000a7c <ExcecuteHttpServerFsm+0x5d8>)
1a000966:	781b      	ldrb	r3, [r3, #0]
1a000968:	2100      	movs	r1, #0
1a00096a:	4a4a      	ldr	r2, [pc, #296]	; (1a000a94 <ExcecuteHttpServerFsm+0x5f0>)
1a00096c:	54d1      	strb	r1, [r2, r3]
				SetEsp8622Status(ESP_SEND_CIPSTATUS);
1a00096e:	201a      	movs	r0, #26
1a000970:	f7ff fd68 	bl	1a000444 <SetEsp8622Status>
1a000974:	e5d6      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (delayRead(&Esp8266Delay)) {
1a000976:	483d      	ldr	r0, [pc, #244]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000978:	f001 faa8 	bl	1a001ecc <delayRead>
1a00097c:	2800      	cmp	r0, #0
1a00097e:	f43f add1 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CIPSTATUS\r\n");
1a000982:	4945      	ldr	r1, [pc, #276]	; (1a000a98 <ExcecuteHttpServerFsm+0x5f4>)
1a000984:	2001      	movs	r0, #1
1a000986:	f000 fb31 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait = Response_STATUS_3;
1a00098a:	4a44      	ldr	r2, [pc, #272]	; (1a000a9c <ExcecuteHttpServerFsm+0x5f8>)
1a00098c:	4b39      	ldr	r3, [pc, #228]	; (1a000a74 <ExcecuteHttpServerFsm+0x5d0>)
1a00098e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000990:	f241 3288 	movw	r2, #5000	; 0x1388
1a000994:	2300      	movs	r3, #0
1a000996:	4835      	ldr	r0, [pc, #212]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000998:	f001 fa88 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CIPSTATUS_3);
1a00099c:	201b      	movs	r0, #27
1a00099e:	f7ff fd51 	bl	1a000444 <SetEsp8622Status>
1a0009a2:	e5bf      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a0009a4:	f7ff fd54 	bl	1a000450 <IsWaitedResponse>
1a0009a8:	b978      	cbnz	r0, 1a0009ca <ExcecuteHttpServerFsm+0x526>
		if (delayRead(&Esp8266Delay)) {
1a0009aa:	4830      	ldr	r0, [pc, #192]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0009ac:	f001 fa8e 	bl	1a001ecc <delayRead>
1a0009b0:	2800      	cmp	r0, #0
1a0009b2:	f43f adb7 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009b6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009ba:	2300      	movs	r3, #0
1a0009bc:	482b      	ldr	r0, [pc, #172]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0009be:	f001 fa75 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSTATUS);
1a0009c2:	201a      	movs	r0, #26
1a0009c4:	f7ff fd3e 	bl	1a000444 <SetEsp8622Status>
1a0009c8:	e5ac      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009ca:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009ce:	2300      	movs	r3, #0
1a0009d0:	4826      	ldr	r0, [pc, #152]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0009d2:	f001 fa6b 	bl	1a001eac <delayConfig>
			Esp8266ResponseToWait = Response_CIPSTATUS;
1a0009d6:	4a32      	ldr	r2, [pc, #200]	; (1a000aa0 <ExcecuteHttpServerFsm+0x5fc>)
1a0009d8:	4b26      	ldr	r3, [pc, #152]	; (1a000a74 <ExcecuteHttpServerFsm+0x5d0>)
1a0009da:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CIPSTATUS);
1a0009dc:	2022      	movs	r0, #34	; 0x22
1a0009de:	f7ff fd31 	bl	1a000444 <SetEsp8622Status>
1a0009e2:	e7e2      	b.n	1a0009aa <ExcecuteHttpServerFsm+0x506>
		if (IsWaitedResponse()){
1a0009e4:	f7ff fd34 	bl	1a000450 <IsWaitedResponse>
1a0009e8:	b978      	cbnz	r0, 1a000a0a <ExcecuteHttpServerFsm+0x566>
		if (delayRead(&Esp8266Delay)) {
1a0009ea:	4820      	ldr	r0, [pc, #128]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0009ec:	f001 fa6e 	bl	1a001ecc <delayRead>
1a0009f0:	2800      	cmp	r0, #0
1a0009f2:	f43f ad97 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009f6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009fa:	2300      	movs	r3, #0
1a0009fc:	481b      	ldr	r0, [pc, #108]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a0009fe:	f001 fa55 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSTATUS);
1a000a02:	201a      	movs	r0, #26
1a000a04:	f7ff fd1e 	bl	1a000444 <SetEsp8622Status>
1a000a08:	e58c      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			SetEsp8622Status(ESP_WAIT_GET_ID);
1a000a0a:	201c      	movs	r0, #28
1a000a0c:	f7ff fd1a 	bl	1a000444 <SetEsp8622Status>
1a000a10:	e7eb      	b.n	1a0009ea <ExcecuteHttpServerFsm+0x546>
		if (uartReadByte(ESP8266_UART, &byteReceived)) {
1a000a12:	491f      	ldr	r1, [pc, #124]	; (1a000a90 <ExcecuteHttpServerFsm+0x5ec>)
1a000a14:	2001      	movs	r0, #1
1a000a16:	f001 fcb9 	bl	1a00238c <uartReadByte>
1a000a1a:	2800      	cmp	r0, #0
1a000a1c:	f43f ad82 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			CurrentConnectionId = byteReceived;
1a000a20:	4b1b      	ldr	r3, [pc, #108]	; (1a000a90 <ExcecuteHttpServerFsm+0x5ec>)
1a000a22:	781a      	ldrb	r2, [r3, #0]
1a000a24:	4b1f      	ldr	r3, [pc, #124]	; (1a000aa4 <ExcecuteHttpServerFsm+0x600>)
1a000a26:	701a      	strb	r2, [r3, #0]
			Esp8266ResponseToWait = Response_OK;
1a000a28:	4a11      	ldr	r2, [pc, #68]	; (1a000a70 <ExcecuteHttpServerFsm+0x5cc>)
1a000a2a:	4b12      	ldr	r3, [pc, #72]	; (1a000a74 <ExcecuteHttpServerFsm+0x5d0>)
1a000a2c:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CIPSTATUS_OK);
1a000a2e:	2021      	movs	r0, #33	; 0x21
1a000a30:	f7ff fd08 	bl	1a000444 <SetEsp8622Status>
			auxIndex = 0;
1a000a34:	2200      	movs	r2, #0
1a000a36:	4b11      	ldr	r3, [pc, #68]	; (1a000a7c <ExcecuteHttpServerFsm+0x5d8>)
1a000a38:	701a      	strb	r2, [r3, #0]
1a000a3a:	e573      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()){
1a000a3c:	f7ff fd08 	bl	1a000450 <IsWaitedResponse>
1a000a40:	b978      	cbnz	r0, 1a000a62 <ExcecuteHttpServerFsm+0x5be>
		if (delayRead(&Esp8266Delay)) {
1a000a42:	480a      	ldr	r0, [pc, #40]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000a44:	f001 fa42 	bl	1a001ecc <delayRead>
1a000a48:	2800      	cmp	r0, #0
1a000a4a:	f43f ad6b 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a4e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a52:	2300      	movs	r3, #0
1a000a54:	4805      	ldr	r0, [pc, #20]	; (1a000a6c <ExcecuteHttpServerFsm+0x5c8>)
1a000a56:	f001 fa29 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSTATUS);
1a000a5a:	201a      	movs	r0, #26
1a000a5c:	f7ff fcf2 	bl	1a000444 <SetEsp8622Status>
1a000a60:	e560      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			SetEsp8622Status(ESP_SEND_CIPSEND);
1a000a62:	201d      	movs	r0, #29
1a000a64:	f7ff fcee 	bl	1a000444 <SetEsp8622Status>
1a000a68:	e7eb      	b.n	1a000a42 <ExcecuteHttpServerFsm+0x59e>
1a000a6a:	bf00      	nop
1a000a6c:	10000050 	.word	0x10000050
1a000a70:	1a002f08 	.word	0x1a002f08
1a000a74:	10000068 	.word	0x10000068
1a000a78:	1a002df0 	.word	0x1a002df0
1a000a7c:	100000ce 	.word	0x100000ce
1a000a80:	1a002e00 	.word	0x1a002e00
1a000a84:	1a002e14 	.word	0x1a002e14
1a000a88:	1a002e28 	.word	0x1a002e28
1a000a8c:	1a002ec0 	.word	0x1a002ec0
1a000a90:	100000cf 	.word	0x100000cf
1a000a94:	1000007c 	.word	0x1000007c
1a000a98:	1a002e34 	.word	0x1a002e34
1a000a9c:	1a002f14 	.word	0x1a002f14
1a000aa0:	1a002ed8 	.word	0x1a002ed8
1a000aa4:	10000048 	.word	0x10000048
		lenghtOfHttpLines = (strlen(PointerOfHttpHeader) + strlen(PointerOfHttpBody) + strlen(PointerOfHttpEnd));
1a000aa8:	4b5f      	ldr	r3, [pc, #380]	; (1a000c28 <ExcecuteHttpServerFsm+0x784>)
1a000aaa:	6818      	ldr	r0, [r3, #0]
1a000aac:	f001 fe42 	bl	1a002734 <strlen>
1a000ab0:	4604      	mov	r4, r0
1a000ab2:	4b5e      	ldr	r3, [pc, #376]	; (1a000c2c <ExcecuteHttpServerFsm+0x788>)
1a000ab4:	681d      	ldr	r5, [r3, #0]
1a000ab6:	4628      	mov	r0, r5
1a000ab8:	f001 fe3c 	bl	1a002734 <strlen>
1a000abc:	4404      	add	r4, r0
1a000abe:	b2a4      	uxth	r4, r4
1a000ac0:	4b5b      	ldr	r3, [pc, #364]	; (1a000c30 <ExcecuteHttpServerFsm+0x78c>)
1a000ac2:	6818      	ldr	r0, [r3, #0]
1a000ac4:	f001 fe36 	bl	1a002734 <strlen>
1a000ac8:	fa14 f080 	uxtah	r0, r4, r0
1a000acc:	b283      	uxth	r3, r0
		if (lenghtOfHttpLines >= MAX_HTTP_WEB_LENGHT){
1a000ace:	f240 52db 	movw	r2, #1499	; 0x5db
1a000ad2:	4293      	cmp	r3, r2
1a000ad4:	d80c      	bhi.n	1a000af0 <ExcecuteHttpServerFsm+0x64c>
		stdioPrintf(ESP8266_UART, "AT+CIPSEND=%c,%d\r\n", CurrentConnectionId, lenghtOfHttpLines);
1a000ad6:	4a57      	ldr	r2, [pc, #348]	; (1a000c34 <ExcecuteHttpServerFsm+0x790>)
1a000ad8:	7812      	ldrb	r2, [r2, #0]
1a000ada:	4957      	ldr	r1, [pc, #348]	; (1a000c38 <ExcecuteHttpServerFsm+0x794>)
1a000adc:	2001      	movs	r0, #1
1a000ade:	f000 fa85 	bl	1a000fec <stdioPrintf>
		SetEsp8622Status(ESP_WAIT_CIPSEND);
1a000ae2:	201e      	movs	r0, #30
1a000ae4:	f7ff fcae 	bl	1a000444 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_OK;
1a000ae8:	4a54      	ldr	r2, [pc, #336]	; (1a000c3c <ExcecuteHttpServerFsm+0x798>)
1a000aea:	4b55      	ldr	r3, [pc, #340]	; (1a000c40 <ExcecuteHttpServerFsm+0x79c>)
1a000aec:	601a      	str	r2, [r3, #0]
		break;
1a000aee:	e519      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioSprintf(PointerOfHttpBody, "ERROR: La longitud de datos HTTP supera el maximo permitido de %d bytes.", MAX_HTTP_WEB_LENGHT);
1a000af0:	f240 52dc 	movw	r2, #1500	; 0x5dc
1a000af4:	4953      	ldr	r1, [pc, #332]	; (1a000c44 <ExcecuteHttpServerFsm+0x7a0>)
1a000af6:	4628      	mov	r0, r5
1a000af8:	f000 fa86 	bl	1a001008 <stdioSprintf>
			lenghtOfHttpLines = (strlen(PointerOfHttpHeader) + strlen(PointerOfHttpBody) + strlen(PointerOfHttpEnd));
1a000afc:	4b4a      	ldr	r3, [pc, #296]	; (1a000c28 <ExcecuteHttpServerFsm+0x784>)
1a000afe:	6818      	ldr	r0, [r3, #0]
1a000b00:	f001 fe18 	bl	1a002734 <strlen>
1a000b04:	4604      	mov	r4, r0
1a000b06:	4b49      	ldr	r3, [pc, #292]	; (1a000c2c <ExcecuteHttpServerFsm+0x788>)
1a000b08:	6818      	ldr	r0, [r3, #0]
1a000b0a:	f001 fe13 	bl	1a002734 <strlen>
1a000b0e:	4404      	add	r4, r0
1a000b10:	b2a4      	uxth	r4, r4
1a000b12:	4b47      	ldr	r3, [pc, #284]	; (1a000c30 <ExcecuteHttpServerFsm+0x78c>)
1a000b14:	6818      	ldr	r0, [r3, #0]
1a000b16:	f001 fe0d 	bl	1a002734 <strlen>
1a000b1a:	fa14 f380 	uxtah	r3, r4, r0
1a000b1e:	b29b      	uxth	r3, r3
1a000b20:	e7d9      	b.n	1a000ad6 <ExcecuteHttpServerFsm+0x632>
		if (IsWaitedResponse()) {
1a000b22:	f7ff fc95 	bl	1a000450 <IsWaitedResponse>
1a000b26:	b978      	cbnz	r0, 1a000b48 <ExcecuteHttpServerFsm+0x6a4>
		if (delayRead(&Esp8266Delay)) {
1a000b28:	4847      	ldr	r0, [pc, #284]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000b2a:	f001 f9cf 	bl	1a001ecc <delayRead>
1a000b2e:	2800      	cmp	r0, #0
1a000b30:	f43f acf8 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000b34:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b38:	2300      	movs	r3, #0
1a000b3a:	4843      	ldr	r0, [pc, #268]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000b3c:	f001 f9b6 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSTATUS);
1a000b40:	201a      	movs	r0, #26
1a000b42:	f7ff fc7f 	bl	1a000444 <SetEsp8622Status>
1a000b46:	e4ed      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000b48:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b4c:	2300      	movs	r3, #0
1a000b4e:	483e      	ldr	r0, [pc, #248]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000b50:	f001 f9ac 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_HTTP);
1a000b54:	201f      	movs	r0, #31
1a000b56:	f7ff fc75 	bl	1a000444 <SetEsp8622Status>
1a000b5a:	e7e5      	b.n	1a000b28 <ExcecuteHttpServerFsm+0x684>
		stdioPrintf(ESP8266_UART, "%s%s%s", PointerOfHttpHeader, PointerOfHttpBody, PointerOfHttpEnd);
1a000b5c:	4b33      	ldr	r3, [pc, #204]	; (1a000c2c <ExcecuteHttpServerFsm+0x788>)
1a000b5e:	681b      	ldr	r3, [r3, #0]
1a000b60:	4a31      	ldr	r2, [pc, #196]	; (1a000c28 <ExcecuteHttpServerFsm+0x784>)
1a000b62:	6812      	ldr	r2, [r2, #0]
1a000b64:	4932      	ldr	r1, [pc, #200]	; (1a000c30 <ExcecuteHttpServerFsm+0x78c>)
1a000b66:	6809      	ldr	r1, [r1, #0]
1a000b68:	9100      	str	r1, [sp, #0]
1a000b6a:	4938      	ldr	r1, [pc, #224]	; (1a000c4c <ExcecuteHttpServerFsm+0x7a8>)
1a000b6c:	2001      	movs	r0, #1
1a000b6e:	f000 fa3d 	bl	1a000fec <stdioPrintf>
		SetEsp8622Status(ESP_WAIT_HTTP);
1a000b72:	2020      	movs	r0, #32
1a000b74:	f7ff fc66 	bl	1a000444 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_SEND_OK;
1a000b78:	4a35      	ldr	r2, [pc, #212]	; (1a000c50 <ExcecuteHttpServerFsm+0x7ac>)
1a000b7a:	4b31      	ldr	r3, [pc, #196]	; (1a000c40 <ExcecuteHttpServerFsm+0x79c>)
1a000b7c:	601a      	str	r2, [r3, #0]
		break;
1a000b7e:	e4d1      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a000b80:	f7ff fc66 	bl	1a000450 <IsWaitedResponse>
1a000b84:	b978      	cbnz	r0, 1a000ba6 <ExcecuteHttpServerFsm+0x702>
		if (delayRead(&Esp8266Delay)) {
1a000b86:	4830      	ldr	r0, [pc, #192]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000b88:	f001 f9a0 	bl	1a001ecc <delayRead>
1a000b8c:	2800      	cmp	r0, #0
1a000b8e:	f43f acc9 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000b92:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b96:	2300      	movs	r3, #0
1a000b98:	482b      	ldr	r0, [pc, #172]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000b9a:	f001 f987 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSEND);
1a000b9e:	201d      	movs	r0, #29
1a000ba0:	f7ff fc50 	bl	1a000444 <SetEsp8622Status>
1a000ba4:	e4be      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000ba6:	f241 3288 	movw	r2, #5000	; 0x1388
1a000baa:	2300      	movs	r3, #0
1a000bac:	4826      	ldr	r0, [pc, #152]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000bae:	f001 f97d 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPCLOSE);
1a000bb2:	2023      	movs	r0, #35	; 0x23
1a000bb4:	f7ff fc46 	bl	1a000444 <SetEsp8622Status>
1a000bb8:	e7e5      	b.n	1a000b86 <ExcecuteHttpServerFsm+0x6e2>
		if (delayRead(&Esp8266Delay)) {
1a000bba:	4823      	ldr	r0, [pc, #140]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000bbc:	f001 f986 	bl	1a001ecc <delayRead>
1a000bc0:	2800      	cmp	r0, #0
1a000bc2:	f43f acaf 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%c\r\n", CurrentConnectionId);
1a000bc6:	4b1b      	ldr	r3, [pc, #108]	; (1a000c34 <ExcecuteHttpServerFsm+0x790>)
1a000bc8:	781a      	ldrb	r2, [r3, #0]
1a000bca:	4922      	ldr	r1, [pc, #136]	; (1a000c54 <ExcecuteHttpServerFsm+0x7b0>)
1a000bcc:	2001      	movs	r0, #1
1a000bce:	f000 fa0d 	bl	1a000fec <stdioPrintf>
			Esp8266ResponseToWait  = Response_CIPCLOSE;
1a000bd2:	4a21      	ldr	r2, [pc, #132]	; (1a000c58 <ExcecuteHttpServerFsm+0x7b4>)
1a000bd4:	4b1a      	ldr	r3, [pc, #104]	; (1a000c40 <ExcecuteHttpServerFsm+0x79c>)
1a000bd6:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000bd8:	f241 3288 	movw	r2, #5000	; 0x1388
1a000bdc:	2300      	movs	r3, #0
1a000bde:	481a      	ldr	r0, [pc, #104]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000be0:	f001 f964 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_WAIT_CIPCLOSE);
1a000be4:	2024      	movs	r0, #36	; 0x24
1a000be6:	f7ff fc2d 	bl	1a000444 <SetEsp8622Status>
1a000bea:	e49b      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
		if (IsWaitedResponse()) {
1a000bec:	f7ff fc30 	bl	1a000450 <IsWaitedResponse>
1a000bf0:	b978      	cbnz	r0, 1a000c12 <ExcecuteHttpServerFsm+0x76e>
		if (delayRead(&Esp8266Delay)) {
1a000bf2:	4815      	ldr	r0, [pc, #84]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000bf4:	f001 f96a 	bl	1a001ecc <delayRead>
1a000bf8:	2800      	cmp	r0, #0
1a000bfa:	f43f ac93 	beq.w	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000bfe:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c02:	2300      	movs	r3, #0
1a000c04:	4810      	ldr	r0, [pc, #64]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000c06:	f001 f951 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSTATUS);
1a000c0a:	201a      	movs	r0, #26
1a000c0c:	f7ff fc1a 	bl	1a000444 <SetEsp8622Status>
}
1a000c10:	e488      	b.n	1a000524 <ExcecuteHttpServerFsm+0x80>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000c12:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c16:	2300      	movs	r3, #0
1a000c18:	480b      	ldr	r0, [pc, #44]	; (1a000c48 <ExcecuteHttpServerFsm+0x7a4>)
1a000c1a:	f001 f947 	bl	1a001eac <delayConfig>
			SetEsp8622Status(ESP_SEND_CIPSTATUS);
1a000c1e:	201a      	movs	r0, #26
1a000c20:	f7ff fc10 	bl	1a000444 <SetEsp8622Status>
1a000c24:	e7e5      	b.n	1a000bf2 <ExcecuteHttpServerFsm+0x74e>
1a000c26:	bf00      	nop
1a000c28:	10000078 	.word	0x10000078
1a000c2c:	10000070 	.word	0x10000070
1a000c30:	10000074 	.word	0x10000074
1a000c34:	10000048 	.word	0x10000048
1a000c38:	1a002e90 	.word	0x1a002e90
1a000c3c:	1a002f08 	.word	0x1a002f08
1a000c40:	10000068 	.word	0x10000068
1a000c44:	1a002e44 	.word	0x1a002e44
1a000c48:	10000050 	.word	0x10000050
1a000c4c:	1a002ea4 	.word	0x1a002ea4
1a000c50:	1a002f0c 	.word	0x1a002f0c
1a000c54:	1a002eac 	.word	0x1a002eac
1a000c58:	1a002ed0 	.word	0x1a002ed0

1a000c5c <esp8266GetIpAddress>:
}
1a000c5c:	4800      	ldr	r0, [pc, #0]	; (1a000c60 <esp8266GetIpAddress+0x4>)
1a000c5e:	4770      	bx	lr
1a000c60:	1000007c 	.word	0x1000007c

1a000c64 <esp8266GetConnectionId>:
	return CurrentConnectionId - '0';
1a000c64:	4b02      	ldr	r3, [pc, #8]	; (1a000c70 <esp8266GetConnectionId+0xc>)
1a000c66:	7818      	ldrb	r0, [r3, #0]
1a000c68:	3830      	subs	r0, #48	; 0x30
}
1a000c6a:	b2c0      	uxtb	r0, r0
1a000c6c:	4770      	bx	lr
1a000c6e:	bf00      	nop
1a000c70:	10000048 	.word	0x10000048

1a000c74 <esp8266ConfigHttpServer>:
bool_t esp8266ConfigHttpServer(char * wifiName, char * wifiPass){
1a000c74:	b510      	push	{r4, lr}
	if (!parametersReceived){
1a000c76:	4b0e      	ldr	r3, [pc, #56]	; (1a000cb0 <esp8266ConfigHttpServer+0x3c>)
1a000c78:	781b      	ldrb	r3, [r3, #0]
1a000c7a:	b143      	cbz	r3, 1a000c8e <esp8266ConfigHttpServer+0x1a>
	ExcecuteHttpServerFsm();
1a000c7c:	f7ff fc12 	bl	1a0004a4 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPSTATUS);
1a000c80:	4b0c      	ldr	r3, [pc, #48]	; (1a000cb4 <esp8266ConfigHttpServer+0x40>)
1a000c82:	7818      	ldrb	r0, [r3, #0]
}
1a000c84:	281a      	cmp	r0, #26
1a000c86:	bf14      	ite	ne
1a000c88:	2000      	movne	r0, #0
1a000c8a:	2001      	moveq	r0, #1
1a000c8c:	bd10      	pop	{r4, pc}
1a000c8e:	460c      	mov	r4, r1
		strcpy(WifiName, wifiName);
1a000c90:	4601      	mov	r1, r0
1a000c92:	4809      	ldr	r0, [pc, #36]	; (1a000cb8 <esp8266ConfigHttpServer+0x44>)
1a000c94:	f001 fd46 	bl	1a002724 <strcpy>
		strcpy(WifiPass, wifiPass);
1a000c98:	4621      	mov	r1, r4
1a000c9a:	4808      	ldr	r0, [pc, #32]	; (1a000cbc <esp8266ConfigHttpServer+0x48>)
1a000c9c:	f001 fd42 	bl	1a002724 <strcpy>
		SetEsp8622Status(ESP_INIT);
1a000ca0:	2000      	movs	r0, #0
1a000ca2:	f7ff fbcf 	bl	1a000444 <SetEsp8622Status>
		parametersReceived = TRUE;
1a000ca6:	2201      	movs	r2, #1
1a000ca8:	4b01      	ldr	r3, [pc, #4]	; (1a000cb0 <esp8266ConfigHttpServer+0x3c>)
1a000caa:	701a      	strb	r2, [r3, #0]
1a000cac:	e7e6      	b.n	1a000c7c <esp8266ConfigHttpServer+0x8>
1a000cae:	bf00      	nop
1a000cb0:	100000d1 	.word	0x100000d1
1a000cb4:	1000006c 	.word	0x1000006c
1a000cb8:	10000090 	.word	0x10000090
1a000cbc:	100000b0 	.word	0x100000b0

1a000cc0 <esp8266ReadHttpServer>:
bool_t esp8266ReadHttpServer  (){
1a000cc0:	b508      	push	{r3, lr}
	ExcecuteHttpServerFsm();
1a000cc2:	f7ff fbef 	bl	1a0004a4 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPSEND);
1a000cc6:	4b03      	ldr	r3, [pc, #12]	; (1a000cd4 <esp8266ReadHttpServer+0x14>)
1a000cc8:	7818      	ldrb	r0, [r3, #0]
}
1a000cca:	281d      	cmp	r0, #29
1a000ccc:	bf14      	ite	ne
1a000cce:	2000      	movne	r0, #0
1a000cd0:	2001      	moveq	r0, #1
1a000cd2:	bd08      	pop	{r3, pc}
1a000cd4:	1000006c 	.word	0x1000006c

1a000cd8 <esp8266WriteHttpServer>:
bool_t esp8266WriteHttpServer (const char * webHttpHeader, char * webHttpBody, const char * webHttpEnd){
1a000cd8:	b508      	push	{r3, lr}
	if (Esp8266Status == ESP_SEND_CIPSEND){
1a000cda:	4b0a      	ldr	r3, [pc, #40]	; (1a000d04 <esp8266WriteHttpServer+0x2c>)
1a000cdc:	781b      	ldrb	r3, [r3, #0]
1a000cde:	2b1d      	cmp	r3, #29
1a000ce0:	d008      	beq.n	1a000cf4 <esp8266WriteHttpServer+0x1c>
	ExcecuteHttpServerFsm();
1a000ce2:	f7ff fbdf 	bl	1a0004a4 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPCLOSE);
1a000ce6:	4b07      	ldr	r3, [pc, #28]	; (1a000d04 <esp8266WriteHttpServer+0x2c>)
1a000ce8:	7818      	ldrb	r0, [r3, #0]
}
1a000cea:	2823      	cmp	r0, #35	; 0x23
1a000cec:	bf14      	ite	ne
1a000cee:	2000      	movne	r0, #0
1a000cf0:	2001      	moveq	r0, #1
1a000cf2:	bd08      	pop	{r3, pc}
		PointerOfHttpHeader = webHttpHeader;
1a000cf4:	4b04      	ldr	r3, [pc, #16]	; (1a000d08 <esp8266WriteHttpServer+0x30>)
1a000cf6:	6018      	str	r0, [r3, #0]
		PointerOfHttpBody   = webHttpBody;
1a000cf8:	4b04      	ldr	r3, [pc, #16]	; (1a000d0c <esp8266WriteHttpServer+0x34>)
1a000cfa:	6019      	str	r1, [r3, #0]
		PointerOfHttpEnd    = webHttpEnd;
1a000cfc:	4b04      	ldr	r3, [pc, #16]	; (1a000d10 <esp8266WriteHttpServer+0x38>)
1a000cfe:	601a      	str	r2, [r3, #0]
1a000d00:	e7ef      	b.n	1a000ce2 <esp8266WriteHttpServer+0xa>
1a000d02:	bf00      	nop
1a000d04:	1000006c 	.word	0x1000006c
1a000d08:	10000078 	.word	0x10000078
1a000d0c:	10000070 	.word	0x10000070
1a000d10:	10000074 	.word	0x10000074

1a000d14 <_outbyte>:

static int  print     (char **out, int *varg);

/*==================[internal data definition]===============================*/

void        _outbyte  (int c){
1a000d14:	b508      	push	{r3, lr}
	uartWriteByte(UartPrintf, (char)c);
1a000d16:	b2c1      	uxtb	r1, r0
1a000d18:	4b02      	ldr	r3, [pc, #8]	; (1a000d24 <_outbyte+0x10>)
1a000d1a:	7818      	ldrb	r0, [r3, #0]
1a000d1c:	f001 fb58 	bl	1a0023d0 <uartWriteByte>
1a000d20:	bd08      	pop	{r3, pc}
1a000d22:	bf00      	nop
1a000d24:	100000d2 	.word	0x100000d2

1a000d28 <outbyte>:
}

void        outbyte   (int c){
	static char prev = 0;
	if (c < ' ' && c != '\r' && c != '\n' && c != '\t' && c != '\b')
1a000d28:	281f      	cmp	r0, #31
1a000d2a:	dc08      	bgt.n	1a000d3e <outbyte+0x16>
1a000d2c:	280d      	cmp	r0, #13
1a000d2e:	d006      	beq.n	1a000d3e <outbyte+0x16>
1a000d30:	280a      	cmp	r0, #10
1a000d32:	d004      	beq.n	1a000d3e <outbyte+0x16>
1a000d34:	2809      	cmp	r0, #9
1a000d36:	d002      	beq.n	1a000d3e <outbyte+0x16>
1a000d38:	2808      	cmp	r0, #8
1a000d3a:	d000      	beq.n	1a000d3e <outbyte+0x16>
1a000d3c:	4770      	bx	lr
void        outbyte   (int c){
1a000d3e:	b510      	push	{r4, lr}
1a000d40:	4604      	mov	r4, r0
		return;
	if (c == '\n' && prev != '\r') _outbyte('\r');
1a000d42:	280a      	cmp	r0, #10
1a000d44:	d005      	beq.n	1a000d52 <outbyte+0x2a>
	_outbyte(c);
1a000d46:	4620      	mov	r0, r4
1a000d48:	f7ff ffe4 	bl	1a000d14 <_outbyte>
	prev = c;
1a000d4c:	4b05      	ldr	r3, [pc, #20]	; (1a000d64 <outbyte+0x3c>)
1a000d4e:	701c      	strb	r4, [r3, #0]
1a000d50:	bd10      	pop	{r4, pc}
	if (c == '\n' && prev != '\r') _outbyte('\r');
1a000d52:	4b04      	ldr	r3, [pc, #16]	; (1a000d64 <outbyte+0x3c>)
1a000d54:	781b      	ldrb	r3, [r3, #0]
1a000d56:	2b0d      	cmp	r3, #13
1a000d58:	d0f5      	beq.n	1a000d46 <outbyte+0x1e>
1a000d5a:	200d      	movs	r0, #13
1a000d5c:	f7ff ffda 	bl	1a000d14 <_outbyte>
1a000d60:	e7f1      	b.n	1a000d46 <outbyte+0x1e>
1a000d62:	bf00      	nop
1a000d64:	100000d3 	.word	0x100000d3

1a000d68 <printchar>:
 * Sino, llama a putchar, que a fin de cuentas
 * termina sacando un dato por la UART.
 * @param str
 * @param c
 */
static void printchar (char **str, int c){
1a000d68:	b508      	push	{r3, lr}
	extern void putchar(int c);
	if (str) {
1a000d6a:	b128      	cbz	r0, 1a000d78 <printchar+0x10>
		**str = c;
1a000d6c:	6802      	ldr	r2, [r0, #0]
1a000d6e:	7011      	strb	r1, [r2, #0]
		++(*str);
1a000d70:	6802      	ldr	r2, [r0, #0]
1a000d72:	3201      	adds	r2, #1
1a000d74:	6002      	str	r2, [r0, #0]
1a000d76:	bd08      	pop	{r3, pc}
1a000d78:	4608      	mov	r0, r1
	}
	else{
		(void)putchar(c);
1a000d7a:	f7ff ffd5 	bl	1a000d28 <outbyte>
1a000d7e:	bd08      	pop	{r3, pc}

1a000d80 <prints>:
	}
}

static int  prints    (char **out, const char *string, int width, int pad){
1a000d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000d84:	4607      	mov	r7, r0
1a000d86:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
1a000d88:	1e15      	subs	r5, r2, #0
1a000d8a:	dd02      	ble.n	1a000d92 <prints+0x12>
1a000d8c:	460a      	mov	r2, r1
1a000d8e:	2100      	movs	r1, #0
1a000d90:	e004      	b.n	1a000d9c <prints+0x1c>
	register int pc = 0, padchar = ' ';
1a000d92:	f04f 0820 	mov.w	r8, #32
1a000d96:	e00e      	b.n	1a000db6 <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
1a000d98:	3101      	adds	r1, #1
1a000d9a:	3201      	adds	r2, #1
1a000d9c:	7810      	ldrb	r0, [r2, #0]
1a000d9e:	2800      	cmp	r0, #0
1a000da0:	d1fa      	bne.n	1a000d98 <prints+0x18>
		if (len >= width) width = 0;
1a000da2:	42a9      	cmp	r1, r5
1a000da4:	da01      	bge.n	1a000daa <prints+0x2a>
		else width -= len;
1a000da6:	1a6d      	subs	r5, r5, r1
1a000da8:	e000      	b.n	1a000dac <prints+0x2c>
		if (len >= width) width = 0;
1a000daa:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
1a000dac:	f013 0f02 	tst.w	r3, #2
1a000db0:	d106      	bne.n	1a000dc0 <prints+0x40>
	register int pc = 0, padchar = ' ';
1a000db2:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
1a000db6:	f013 0401 	ands.w	r4, r3, #1
1a000dba:	d00a      	beq.n	1a000dd2 <prints+0x52>
	register int pc = 0, padchar = ' ';
1a000dbc:	2400      	movs	r4, #0
1a000dbe:	e010      	b.n	1a000de2 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
1a000dc0:	f04f 0830 	mov.w	r8, #48	; 0x30
1a000dc4:	e7f7      	b.n	1a000db6 <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
1a000dc6:	4641      	mov	r1, r8
1a000dc8:	4638      	mov	r0, r7
1a000dca:	f7ff ffcd 	bl	1a000d68 <printchar>
			++pc;
1a000dce:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
1a000dd0:	3d01      	subs	r5, #1
1a000dd2:	2d00      	cmp	r5, #0
1a000dd4:	dcf7      	bgt.n	1a000dc6 <prints+0x46>
1a000dd6:	e004      	b.n	1a000de2 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
1a000dd8:	4638      	mov	r0, r7
1a000dda:	f7ff ffc5 	bl	1a000d68 <printchar>
		++pc;
1a000dde:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
1a000de0:	3601      	adds	r6, #1
1a000de2:	7831      	ldrb	r1, [r6, #0]
1a000de4:	2900      	cmp	r1, #0
1a000de6:	d1f7      	bne.n	1a000dd8 <prints+0x58>
1a000de8:	e005      	b.n	1a000df6 <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
1a000dea:	4641      	mov	r1, r8
1a000dec:	4638      	mov	r0, r7
1a000dee:	f7ff ffbb 	bl	1a000d68 <printchar>
		++pc;
1a000df2:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
1a000df4:	3d01      	subs	r5, #1
1a000df6:	2d00      	cmp	r5, #0
1a000df8:	dcf7      	bgt.n	1a000dea <prints+0x6a>
	}
	return pc;
}
1a000dfa:	4620      	mov	r0, r4
1a000dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a000e00 <printi>:

static int  printi    (char **out, int i, int b, int sg, int width, int pad, int letbase){
1a000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000e02:	b085      	sub	sp, #20
1a000e04:	4607      	mov	r7, r0
1a000e06:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
1a000e08:	b151      	cbz	r1, 1a000e20 <printi+0x20>
1a000e0a:	461e      	mov	r6, r3
1a000e0c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
1a000e0e:	b113      	cbz	r3, 1a000e16 <printi+0x16>
1a000e10:	2a0a      	cmp	r2, #10
1a000e12:	d012      	beq.n	1a000e3a <printi+0x3a>
	register int t, neg = 0, pc = 0;
1a000e14:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
1a000e16:	ad04      	add	r5, sp, #16
1a000e18:	2300      	movs	r3, #0
1a000e1a:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
1a000e1e:	e018      	b.n	1a000e52 <printi+0x52>
		print_buf[0] = '0';
1a000e20:	2330      	movs	r3, #48	; 0x30
1a000e22:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
1a000e26:	2300      	movs	r3, #0
1a000e28:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
1a000e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a000e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a000e30:	a901      	add	r1, sp, #4
1a000e32:	4638      	mov	r0, r7
1a000e34:	f7ff ffa4 	bl	1a000d80 <prints>
1a000e38:	e029      	b.n	1a000e8e <printi+0x8e>
	if (sg && b == 10 && i < 0) {
1a000e3a:	2900      	cmp	r1, #0
1a000e3c:	db01      	blt.n	1a000e42 <printi+0x42>
	register int t, neg = 0, pc = 0;
1a000e3e:	2600      	movs	r6, #0
1a000e40:	e7e9      	b.n	1a000e16 <printi+0x16>
		u = -i;
1a000e42:	424c      	negs	r4, r1
		neg = 1;
1a000e44:	2601      	movs	r6, #1
1a000e46:	e7e6      	b.n	1a000e16 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
1a000e48:	3330      	adds	r3, #48	; 0x30
1a000e4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
1a000e4e:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
1a000e52:	b14c      	cbz	r4, 1a000e68 <printi+0x68>
		t = u % b;
1a000e54:	fbb4 f3f2 	udiv	r3, r4, r2
1a000e58:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
1a000e5c:	2b09      	cmp	r3, #9
1a000e5e:	ddf3      	ble.n	1a000e48 <printi+0x48>
			t += letbase - '0' - 10;
1a000e60:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
1a000e64:	440b      	add	r3, r1
1a000e66:	e7ef      	b.n	1a000e48 <printi+0x48>
	}

	if (neg) {
1a000e68:	b156      	cbz	r6, 1a000e80 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
1a000e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a000e6c:	b11b      	cbz	r3, 1a000e76 <printi+0x76>
1a000e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a000e70:	f013 0f02 	tst.w	r3, #2
1a000e74:	d10d      	bne.n	1a000e92 <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
1a000e76:	232d      	movs	r3, #45	; 0x2d
1a000e78:	f805 3c01 	strb.w	r3, [r5, #-1]
1a000e7c:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
1a000e7e:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
1a000e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a000e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a000e84:	4629      	mov	r1, r5
1a000e86:	4638      	mov	r0, r7
1a000e88:	f7ff ff7a 	bl	1a000d80 <prints>
1a000e8c:	4430      	add	r0, r6
}
1a000e8e:	b005      	add	sp, #20
1a000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
1a000e92:	212d      	movs	r1, #45	; 0x2d
1a000e94:	4638      	mov	r0, r7
1a000e96:	f7ff ff67 	bl	1a000d68 <printchar>
			--width;
1a000e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a000e9c:	3b01      	subs	r3, #1
1a000e9e:	930a      	str	r3, [sp, #40]	; 0x28
1a000ea0:	e7ee      	b.n	1a000e80 <printi+0x80>
1a000ea2:	Address 0x1a000ea2 is out of bounds.


1a000ea4 <print>:

static int  print     (char **out, int *varg){
1a000ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000ea8:	b086      	sub	sp, #24
1a000eaa:	4606      	mov	r6, r0
	register int width, pad;
	register int pc = 0;
	register char *format = (char *)(*varg++);
1a000eac:	1d0f      	adds	r7, r1, #4
1a000eae:	680c      	ldr	r4, [r1, #0]
	register int pc = 0;
1a000eb0:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
1a000eb2:	e081      	b.n	1a000fb8 <print+0x114>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
1a000eb4:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
1a000eb6:	2301      	movs	r3, #1
1a000eb8:	e08b      	b.n	1a000fd2 <print+0x12e>
			}
			while (*format == '0') {
				++format;
1a000eba:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
1a000ebc:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
1a000ec0:	7822      	ldrb	r2, [r4, #0]
1a000ec2:	2a30      	cmp	r2, #48	; 0x30
1a000ec4:	d0f9      	beq.n	1a000eba <print+0x16>
1a000ec6:	2200      	movs	r2, #0
1a000ec8:	e006      	b.n	1a000ed8 <print+0x34>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
1a000eca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000ece:	0050      	lsls	r0, r2, #1
				width += *format - '0';
1a000ed0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a000ed4:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
1a000ed6:	3401      	adds	r4, #1
1a000ed8:	7821      	ldrb	r1, [r4, #0]
1a000eda:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
1a000ede:	b2c0      	uxtb	r0, r0
1a000ee0:	2809      	cmp	r0, #9
1a000ee2:	d9f2      	bls.n	1a000eca <print+0x26>
			}
			if( *format == 's' ) {
1a000ee4:	2973      	cmp	r1, #115	; 0x73
1a000ee6:	d018      	beq.n	1a000f1a <print+0x76>
				register char *s = *((char **)varg++);
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
1a000ee8:	2964      	cmp	r1, #100	; 0x64
1a000eea:	d022      	beq.n	1a000f32 <print+0x8e>
				pc += printi (out, *varg++, 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
1a000eec:	2978      	cmp	r1, #120	; 0x78
1a000eee:	d02f      	beq.n	1a000f50 <print+0xac>
				pc += printi (out, *varg++, 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
1a000ef0:	2958      	cmp	r1, #88	; 0x58
1a000ef2:	d03c      	beq.n	1a000f6e <print+0xca>
				pc += printi (out, *varg++, 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
1a000ef4:	2975      	cmp	r1, #117	; 0x75
1a000ef6:	d049      	beq.n	1a000f8c <print+0xe8>
				pc += printi (out, *varg++, 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
1a000ef8:	2963      	cmp	r1, #99	; 0x63
1a000efa:	d15c      	bne.n	1a000fb6 <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = *varg++;
1a000efc:	f107 0804 	add.w	r8, r7, #4
1a000f00:	6839      	ldr	r1, [r7, #0]
1a000f02:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
1a000f06:	2100      	movs	r1, #0
1a000f08:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
1a000f0c:	a905      	add	r1, sp, #20
1a000f0e:	4630      	mov	r0, r6
1a000f10:	f7ff ff36 	bl	1a000d80 <prints>
1a000f14:	4405      	add	r5, r0
				scr[0] = *varg++;
1a000f16:	4647      	mov	r7, r8
				continue;
1a000f18:	e04d      	b.n	1a000fb6 <print+0x112>
				register char *s = *((char **)varg++);
1a000f1a:	f107 0804 	add.w	r8, r7, #4
1a000f1e:	6839      	ldr	r1, [r7, #0]
				pc += prints (out, s?s:"(null)", width, pad);
1a000f20:	b129      	cbz	r1, 1a000f2e <print+0x8a>
1a000f22:	4630      	mov	r0, r6
1a000f24:	f7ff ff2c 	bl	1a000d80 <prints>
1a000f28:	4405      	add	r5, r0
				register char *s = *((char **)varg++);
1a000f2a:	4647      	mov	r7, r8
				continue;
1a000f2c:	e043      	b.n	1a000fb6 <print+0x112>
				pc += prints (out, s?s:"(null)", width, pad);
1a000f2e:	492e      	ldr	r1, [pc, #184]	; (1a000fe8 <print+0x144>)
1a000f30:	e7f7      	b.n	1a000f22 <print+0x7e>
				pc += printi (out, *varg++, 10, 1, width, pad, 'a');
1a000f32:	f107 0804 	add.w	r8, r7, #4
1a000f36:	6839      	ldr	r1, [r7, #0]
1a000f38:	2061      	movs	r0, #97	; 0x61
1a000f3a:	9002      	str	r0, [sp, #8]
1a000f3c:	9301      	str	r3, [sp, #4]
1a000f3e:	9200      	str	r2, [sp, #0]
1a000f40:	2301      	movs	r3, #1
1a000f42:	220a      	movs	r2, #10
1a000f44:	4630      	mov	r0, r6
1a000f46:	f7ff ff5b 	bl	1a000e00 <printi>
1a000f4a:	4405      	add	r5, r0
1a000f4c:	4647      	mov	r7, r8
				continue;
1a000f4e:	e032      	b.n	1a000fb6 <print+0x112>
				pc += printi (out, *varg++, 16, 0, width, pad, 'a');
1a000f50:	f107 0804 	add.w	r8, r7, #4
1a000f54:	6839      	ldr	r1, [r7, #0]
1a000f56:	2061      	movs	r0, #97	; 0x61
1a000f58:	9002      	str	r0, [sp, #8]
1a000f5a:	9301      	str	r3, [sp, #4]
1a000f5c:	9200      	str	r2, [sp, #0]
1a000f5e:	2300      	movs	r3, #0
1a000f60:	2210      	movs	r2, #16
1a000f62:	4630      	mov	r0, r6
1a000f64:	f7ff ff4c 	bl	1a000e00 <printi>
1a000f68:	4405      	add	r5, r0
1a000f6a:	4647      	mov	r7, r8
				continue;
1a000f6c:	e023      	b.n	1a000fb6 <print+0x112>
				pc += printi (out, *varg++, 16, 0, width, pad, 'A');
1a000f6e:	f107 0804 	add.w	r8, r7, #4
1a000f72:	6839      	ldr	r1, [r7, #0]
1a000f74:	2041      	movs	r0, #65	; 0x41
1a000f76:	9002      	str	r0, [sp, #8]
1a000f78:	9301      	str	r3, [sp, #4]
1a000f7a:	9200      	str	r2, [sp, #0]
1a000f7c:	2300      	movs	r3, #0
1a000f7e:	2210      	movs	r2, #16
1a000f80:	4630      	mov	r0, r6
1a000f82:	f7ff ff3d 	bl	1a000e00 <printi>
1a000f86:	4405      	add	r5, r0
1a000f88:	4647      	mov	r7, r8
				continue;
1a000f8a:	e014      	b.n	1a000fb6 <print+0x112>
				pc += printi (out, *varg++, 10, 0, width, pad, 'a');
1a000f8c:	f107 0804 	add.w	r8, r7, #4
1a000f90:	6839      	ldr	r1, [r7, #0]
1a000f92:	2061      	movs	r0, #97	; 0x61
1a000f94:	9002      	str	r0, [sp, #8]
1a000f96:	9301      	str	r3, [sp, #4]
1a000f98:	9200      	str	r2, [sp, #0]
1a000f9a:	2300      	movs	r3, #0
1a000f9c:	220a      	movs	r2, #10
1a000f9e:	4630      	mov	r0, r6
1a000fa0:	f7ff ff2e 	bl	1a000e00 <printi>
1a000fa4:	4405      	add	r5, r0
1a000fa6:	4647      	mov	r7, r8
				continue;
1a000fa8:	e005      	b.n	1a000fb6 <print+0x112>
			++format;
1a000faa:	4614      	mov	r4, r2
			}
		}
		else {
			out:
			printchar (out, *format);
1a000fac:	7821      	ldrb	r1, [r4, #0]
1a000fae:	4630      	mov	r0, r6
1a000fb0:	f7ff feda 	bl	1a000d68 <printchar>
			++pc;
1a000fb4:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
1a000fb6:	3401      	adds	r4, #1
1a000fb8:	7823      	ldrb	r3, [r4, #0]
1a000fba:	b163      	cbz	r3, 1a000fd6 <print+0x132>
		if (*format == '%') {
1a000fbc:	2b25      	cmp	r3, #37	; 0x25
1a000fbe:	d1f5      	bne.n	1a000fac <print+0x108>
			++format;
1a000fc0:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
1a000fc2:	7863      	ldrb	r3, [r4, #1]
1a000fc4:	b13b      	cbz	r3, 1a000fd6 <print+0x132>
			if (*format == '%') goto out;
1a000fc6:	2b25      	cmp	r3, #37	; 0x25
1a000fc8:	d0ef      	beq.n	1a000faa <print+0x106>
			if (*format == '-') {
1a000fca:	2b2d      	cmp	r3, #45	; 0x2d
1a000fcc:	f43f af72 	beq.w	1a000eb4 <print+0x10>
			width = pad = 0;
1a000fd0:	2300      	movs	r3, #0
1a000fd2:	4614      	mov	r4, r2
1a000fd4:	e774      	b.n	1a000ec0 <print+0x1c>
		}
	}
	if (out) **out = '\0';
1a000fd6:	b116      	cbz	r6, 1a000fde <print+0x13a>
1a000fd8:	6833      	ldr	r3, [r6, #0]
1a000fda:	2200      	movs	r2, #0
1a000fdc:	701a      	strb	r2, [r3, #0]
	return pc;
}
1a000fde:	4628      	mov	r0, r5
1a000fe0:	b006      	add	sp, #24
1a000fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000fe6:	bf00      	nop
1a000fe8:	1a002f20 	.word	0x1a002f20

1a000fec <stdioPrintf>:
 * Realiza un printf sobre la UART seleccionada
 * @param uartPrintf UART_USB, UART_232 o UART_485
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioPrintf(uartMap_t uartPrintf, const char *format, ...){
1a000fec:	b40e      	push	{r1, r2, r3}
1a000fee:	b500      	push	{lr}
	register int *varg = (int *)(&format);
	UartPrintf = uartPrintf;
1a000ff0:	4b04      	ldr	r3, [pc, #16]	; (1a001004 <stdioPrintf+0x18>)
1a000ff2:	7018      	strb	r0, [r3, #0]
	return print(0, varg);
1a000ff4:	a901      	add	r1, sp, #4
1a000ff6:	2000      	movs	r0, #0
1a000ff8:	f7ff ff54 	bl	1a000ea4 <print>
}
1a000ffc:	f85d eb04 	ldr.w	lr, [sp], #4
1a001000:	b003      	add	sp, #12
1a001002:	4770      	bx	lr
1a001004:	100000d2 	.word	0x100000d2

1a001008 <stdioSprintf>:
 * sprintf de la libreria standard de C.
 * @param out el array a guardar los datos.
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioSprintf(char *out, const char *format, ...){
1a001008:	b40e      	push	{r1, r2, r3}
1a00100a:	b500      	push	{lr}
1a00100c:	b082      	sub	sp, #8
1a00100e:	ab02      	add	r3, sp, #8
1a001010:	f843 0d04 	str.w	r0, [r3, #-4]!
	register int *varg = (int *)(&format);
	return print(&out, varg);
1a001014:	a903      	add	r1, sp, #12
1a001016:	4618      	mov	r0, r3
1a001018:	f7ff ff44 	bl	1a000ea4 <print>
}
1a00101c:	b002      	add	sp, #8
1a00101e:	f85d eb04 	ldr.w	lr, [sp], #4
1a001022:	b003      	add	sp, #12
1a001024:	4770      	bx	lr
1a001026:	Address 0x1a001026 is out of bounds.


1a001028 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001028:	2200      	movs	r2, #0
1a00102a:	2a05      	cmp	r2, #5
1a00102c:	d819      	bhi.n	1a001062 <Board_LED_Init+0x3a>
{
1a00102e:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a001030:	490c      	ldr	r1, [pc, #48]	; (1a001064 <Board_LED_Init+0x3c>)
1a001032:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a001036:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00103a:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a00103c:	4b0a      	ldr	r3, [pc, #40]	; (1a001068 <Board_LED_Init+0x40>)
1a00103e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001042:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a001046:	2001      	movs	r0, #1
1a001048:	40a0      	lsls	r0, r4
1a00104a:	4301      	orrs	r1, r0
1a00104c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a001050:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001054:	2100      	movs	r1, #0
1a001056:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001058:	3201      	adds	r2, #1
1a00105a:	2a05      	cmp	r2, #5
1a00105c:	d9e8      	bls.n	1a001030 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a00105e:	bc70      	pop	{r4, r5, r6}
1a001060:	4770      	bx	lr
1a001062:	4770      	bx	lr
1a001064:	1a002f30 	.word	0x1a002f30
1a001068:	400f4000 	.word	0x400f4000

1a00106c <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00106c:	4b03      	ldr	r3, [pc, #12]	; (1a00107c <Board_UART_Init+0x10>)
1a00106e:	2212      	movs	r2, #18
1a001070:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a001074:	22d1      	movs	r2, #209	; 0xd1
1a001076:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a00107a:	4770      	bx	lr
1a00107c:	40086000 	.word	0x40086000

1a001080 <Board_Debug_Init>:
{
1a001080:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a001082:	4c08      	ldr	r4, [pc, #32]	; (1a0010a4 <Board_Debug_Init+0x24>)
1a001084:	4620      	mov	r0, r4
1a001086:	f7ff fff1 	bl	1a00106c <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a00108a:	4620      	mov	r0, r4
1a00108c:	f000 fd64 	bl	1a001b58 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a001090:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001094:	4620      	mov	r0, r4
1a001096:	f000 fda9 	bl	1a001bec <Chip_UART_SetBaudFDR>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a00109a:	2303      	movs	r3, #3
1a00109c:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00109e:	2301      	movs	r3, #1
1a0010a0:	65e3      	str	r3, [r4, #92]	; 0x5c
1a0010a2:	bd10      	pop	{r4, pc}
1a0010a4:	400c1000 	.word	0x400c1000

1a0010a8 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a0010a8:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a0010aa:	f7ff ffe9 	bl	1a001080 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a0010ae:	4806      	ldr	r0, [pc, #24]	; (1a0010c8 <Board_Init+0x20>)
1a0010b0:	f000 fc7c 	bl	1a0019ac <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a0010b4:	f7ff ffb8 	bl	1a001028 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a0010b8:	4a04      	ldr	r2, [pc, #16]	; (1a0010cc <Board_Init+0x24>)
1a0010ba:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a0010be:	f043 0304 	orr.w	r3, r3, #4
1a0010c2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a0010c6:	bd08      	pop	{r3, pc}
1a0010c8:	400f4000 	.word	0x400f4000
1a0010cc:	40043000 	.word	0x40043000

1a0010d0 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0010d0:	2300      	movs	r3, #0
1a0010d2:	2b17      	cmp	r3, #23
1a0010d4:	d812      	bhi.n	1a0010fc <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a0010d6:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0010d8:	4a09      	ldr	r2, [pc, #36]	; (1a001100 <Board_SetupMuxing+0x30>)
1a0010da:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0010de:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0010e2:	784a      	ldrb	r2, [r1, #1]
1a0010e4:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a0010e6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0010ea:	4906      	ldr	r1, [pc, #24]	; (1a001104 <Board_SetupMuxing+0x34>)
1a0010ec:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0010f0:	3301      	adds	r3, #1
1a0010f2:	2b17      	cmp	r3, #23
1a0010f4:	d9f0      	bls.n	1a0010d8 <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0010f6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0010fa:	4770      	bx	lr
1a0010fc:	4770      	bx	lr
1a0010fe:	bf00      	nop
1a001100:	1a002f48 	.word	0x1a002f48
1a001104:	40086000 	.word	0x40086000

1a001108 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001108:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00110a:	4a17      	ldr	r2, [pc, #92]	; (1a001168 <Board_SetupClocking+0x60>)
1a00110c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001114:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001118:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00111c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001124:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001128:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00112c:	2201      	movs	r2, #1
1a00112e:	490f      	ldr	r1, [pc, #60]	; (1a00116c <Board_SetupClocking+0x64>)
1a001130:	2006      	movs	r0, #6
1a001132:	f000 fc4f 	bl	1a0019d4 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001136:	2400      	movs	r4, #0
1a001138:	e00a      	b.n	1a001150 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00113a:	480d      	ldr	r0, [pc, #52]	; (1a001170 <Board_SetupClocking+0x68>)
1a00113c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001140:	78cb      	ldrb	r3, [r1, #3]
1a001142:	788a      	ldrb	r2, [r1, #2]
1a001144:	7849      	ldrb	r1, [r1, #1]
1a001146:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00114a:	f000 fb61 	bl	1a001810 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00114e:	3401      	adds	r4, #1
1a001150:	2c02      	cmp	r4, #2
1a001152:	d9f2      	bls.n	1a00113a <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001154:	4b04      	ldr	r3, [pc, #16]	; (1a001168 <Board_SetupClocking+0x60>)
1a001156:	685a      	ldr	r2, [r3, #4]
1a001158:	f022 020c 	bic.w	r2, r2, #12
1a00115c:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00115e:	685a      	ldr	r2, [r3, #4]
1a001160:	f042 0203 	orr.w	r2, r2, #3
1a001164:	605a      	str	r2, [r3, #4]
1a001166:	bd10      	pop	{r4, pc}
1a001168:	40043000 	.word	0x40043000
1a00116c:	0c28cb00 	.word	0x0c28cb00
1a001170:	1a002f3c 	.word	0x1a002f3c

1a001174 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001174:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a001176:	f7ff ffab 	bl	1a0010d0 <Board_SetupMuxing>
   Board_SetupClocking();
1a00117a:	f7ff ffc5 	bl	1a001108 <Board_SetupClocking>
1a00117e:	bd08      	pop	{r3, pc}

1a001180 <ResetISR>:
void ResetISR(void) {
1a001180:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a001182:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001184:	4a16      	ldr	r2, [pc, #88]	; (1a0011e0 <ResetISR+0x60>)
1a001186:	4b17      	ldr	r3, [pc, #92]	; (1a0011e4 <ResetISR+0x64>)
1a001188:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00118a:	4a17      	ldr	r2, [pc, #92]	; (1a0011e8 <ResetISR+0x68>)
1a00118c:	3304      	adds	r3, #4
1a00118e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001190:	2300      	movs	r3, #0
1a001192:	e005      	b.n	1a0011a0 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001194:	f04f 31ff 	mov.w	r1, #4294967295
1a001198:	4a14      	ldr	r2, [pc, #80]	; (1a0011ec <ResetISR+0x6c>)
1a00119a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00119e:	3301      	adds	r3, #1
1a0011a0:	2b07      	cmp	r3, #7
1a0011a2:	d9f7      	bls.n	1a001194 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0011a4:	b662      	cpsie	i
    SystemInit();
1a0011a6:	f000 f829 	bl	1a0011fc <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0011aa:	4b11      	ldr	r3, [pc, #68]	; (1a0011f0 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0011ac:	e007      	b.n	1a0011be <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a0011ae:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0011b2:	689a      	ldr	r2, [r3, #8]
1a0011b4:	6859      	ldr	r1, [r3, #4]
1a0011b6:	6818      	ldr	r0, [r3, #0]
1a0011b8:	f7fe ffe8 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a0011bc:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0011be:	4a0d      	ldr	r2, [pc, #52]	; (1a0011f4 <ResetISR+0x74>)
1a0011c0:	4293      	cmp	r3, r2
1a0011c2:	d3f4      	bcc.n	1a0011ae <ResetISR+0x2e>
1a0011c4:	e006      	b.n	1a0011d4 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a0011c6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0011c8:	6859      	ldr	r1, [r3, #4]
1a0011ca:	f854 0b08 	ldr.w	r0, [r4], #8
1a0011ce:	f7fe ffec 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a0011d2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0011d4:	4a08      	ldr	r2, [pc, #32]	; (1a0011f8 <ResetISR+0x78>)
1a0011d6:	4293      	cmp	r3, r2
1a0011d8:	d3f5      	bcc.n	1a0011c6 <ResetISR+0x46>
    main();
1a0011da:	f7ff f891 	bl	1a000300 <main>
1a0011de:	e7fe      	b.n	1a0011de <ResetISR+0x5e>
1a0011e0:	10df1000 	.word	0x10df1000
1a0011e4:	40053100 	.word	0x40053100
1a0011e8:	01dff7ff 	.word	0x01dff7ff
1a0011ec:	e000e280 	.word	0xe000e280
1a0011f0:	1a000114 	.word	0x1a000114
1a0011f4:	1a000150 	.word	0x1a000150
1a0011f8:	1a000178 	.word	0x1a000178

1a0011fc <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0011fc:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0011fe:	f000 fbab 	bl	1a001958 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a001202:	f7ff ffb7 	bl	1a001174 <Board_SystemInit>
1a001206:	bd08      	pop	{r3, pc}

1a001208 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
   CHIP_CCU_CLK_T clkADC;

   if (pADC == LPC_ADC1) {
1a001208:	4b03      	ldr	r3, [pc, #12]	; (1a001218 <Chip_ADC_GetClockIndex+0x10>)
1a00120a:	4298      	cmp	r0, r3
1a00120c:	d001      	beq.n	1a001212 <Chip_ADC_GetClockIndex+0xa>
       clkADC = CLK_APB3_ADC1;
   }
   else {
       clkADC = CLK_APB3_ADC0;
1a00120e:	2003      	movs	r0, #3
   }

   return clkADC;
}
1a001210:	4770      	bx	lr
       clkADC = CLK_APB3_ADC1;
1a001212:	2004      	movs	r0, #4
1a001214:	4770      	bx	lr
1a001216:	bf00      	nop
1a001218:	400e4000 	.word	0x400e4000

1a00121c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00121c:	b570      	push	{r4, r5, r6, lr}
1a00121e:	460d      	mov	r5, r1
1a001220:	4614      	mov	r4, r2
1a001222:	461e      	mov	r6, r3
      A/D converter, which should be less than or equal to 4.5MHz.
      A fully conversion requires (bits_accuracy+1) of these clocks.
      ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
      ADC rate = ADC clock / (the number of clocks required for each conversion);
    */
   adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001224:	f7ff fff0 	bl	1a001208 <Chip_ADC_GetClockIndex>
1a001228:	f000 fb70 	bl	1a00190c <Chip_Clock_GetRate>
   if (burstMode) {
1a00122c:	b965      	cbnz	r5, 1a001248 <getClkDiv+0x2c>
       fullAdcRate = adcRate * clks;
   }
   else {
       fullAdcRate = adcRate * getFullConvClk();
1a00122e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001232:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   }

   /* Get the round value by fomular: (2*A + B)/(2*B) */
   div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001236:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00123a:	0064      	lsls	r4, r4, #1
1a00123c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001240:	b2c0      	uxtb	r0, r0
1a001242:	3801      	subs	r0, #1
   return div;
}
1a001244:	b2c0      	uxtb	r0, r0
1a001246:	bd70      	pop	{r4, r5, r6, pc}
       fullAdcRate = adcRate * clks;
1a001248:	fb04 f406 	mul.w	r4, r4, r6
1a00124c:	e7f3      	b.n	1a001236 <getClkDiv+0x1a>

1a00124e <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
   uint32_t temp;
   temp = pADC->CR & (~ADC_CR_START_MASK);
1a00124e:	6803      	ldr	r3, [r0, #0]
1a001250:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
   pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a001254:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a001258:	6001      	str	r1, [r0, #0]
1a00125a:	4770      	bx	lr

1a00125c <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
   uint32_t temp;
   temp = pADC->DR[channel];
1a00125c:	3104      	adds	r1, #4
1a00125e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   if (!ADC_DR_DONE(temp)) {
1a001262:	2b00      	cmp	r3, #0
1a001264:	db01      	blt.n	1a00126a <readAdcVal+0xe>
       return ERROR;
1a001266:	2000      	movs	r0, #0
   }
   /*  if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
   /*  return ERROR; */
   *data = (uint16_t) ADC_DR_RESULT(temp);
   return SUCCESS;
}
1a001268:	4770      	bx	lr
   *data = (uint16_t) ADC_DR_RESULT(temp);
1a00126a:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a00126e:	8013      	strh	r3, [r2, #0]
   return SUCCESS;
1a001270:	2001      	movs	r0, #1
1a001272:	4770      	bx	lr

1a001274 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001274:	b538      	push	{r3, r4, r5, lr}
1a001276:	4605      	mov	r5, r0
1a001278:	460c      	mov	r4, r1
   uint8_t div;
   uint32_t cr = 0;
   uint32_t clk;

   Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00127a:	f7ff ffc5 	bl	1a001208 <Chip_ADC_GetClockIndex>
1a00127e:	2301      	movs	r3, #1
1a001280:	461a      	mov	r2, r3
1a001282:	4619      	mov	r1, r3
1a001284:	f000 fb0a 	bl	1a00189c <Chip_Clock_EnableOpts>

   pADC->INTEN = 0;        /* Disable all interrupts */
1a001288:	2100      	movs	r1, #0
1a00128a:	60e9      	str	r1, [r5, #12]

   cr |= ADC_CR_PDN;
   ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00128c:	4a08      	ldr	r2, [pc, #32]	; (1a0012b0 <Chip_ADC_Init+0x3c>)
1a00128e:	6022      	str	r2, [r4, #0]
   ADCSetup->bitsAccuracy = ADC_10BITS;
1a001290:	7121      	strb	r1, [r4, #4]
   clk = 11;
   ADCSetup->burstMode = false;
1a001292:	7161      	strb	r1, [r4, #5]
   div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001294:	230b      	movs	r3, #11
1a001296:	4628      	mov	r0, r5
1a001298:	f7ff ffc0 	bl	1a00121c <getClkDiv>
   cr |= ADC_CR_CLKDIV(div);
1a00129c:	0200      	lsls	r0, r0, #8
1a00129e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
   cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0012a2:	7923      	ldrb	r3, [r4, #4]
1a0012a4:	045b      	lsls	r3, r3, #17
1a0012a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0012aa:	4318      	orrs	r0, r3
   pADC->CR = cr;
1a0012ac:	6028      	str	r0, [r5, #0]
1a0012ae:	bd38      	pop	{r3, r4, r5, pc}
1a0012b0:	00061a80 	.word	0x00061a80

1a0012b4 <Chip_ADC_DeInit>:
}

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a0012b4:	b508      	push	{r3, lr}
   pADC->INTEN = 0x00000100;
1a0012b6:	f44f 7280 	mov.w	r2, #256	; 0x100
1a0012ba:	60c2      	str	r2, [r0, #12]
   pADC->CR = 0;
1a0012bc:	2200      	movs	r2, #0
1a0012be:	6002      	str	r2, [r0, #0]
   Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a0012c0:	f7ff ffa2 	bl	1a001208 <Chip_ADC_GetClockIndex>
1a0012c4:	f000 fb08 	bl	1a0018d8 <Chip_Clock_Disable>
1a0012c8:	bd08      	pop	{r3, pc}

1a0012ca <Chip_ADC_ReadValue>:
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a0012ca:	b508      	push	{r3, lr}
   return readAdcVal(pADC, channel, data);
1a0012cc:	f7ff ffc6 	bl	1a00125c <readAdcVal>
}
1a0012d0:	bd08      	pop	{r3, pc}

1a0012d2 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
   switch (StatusType) {
1a0012d2:	2a01      	cmp	r2, #1
1a0012d4:	d00a      	beq.n	1a0012ec <Chip_ADC_ReadStatus+0x1a>
1a0012d6:	b11a      	cbz	r2, 1a0012e0 <Chip_ADC_ReadStatus+0xe>
1a0012d8:	2a02      	cmp	r2, #2
1a0012da:	d00f      	beq.n	1a0012fc <Chip_ADC_ReadStatus+0x2a>
       return pADC->STAT >> 16 ? SET : RESET;

   default:
       break;
   }
   return RESET;
1a0012dc:	2000      	movs	r0, #0
}
1a0012de:	4770      	bx	lr
       return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0012e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0012e2:	40c8      	lsrs	r0, r1
1a0012e4:	f000 0001 	and.w	r0, r0, #1
1a0012e8:	b2c0      	uxtb	r0, r0
1a0012ea:	4770      	bx	lr
       channel += 8;
1a0012ec:	3108      	adds	r1, #8
1a0012ee:	b2c9      	uxtb	r1, r1
       return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0012f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0012f2:	40c8      	lsrs	r0, r1
1a0012f4:	f000 0001 	and.w	r0, r0, #1
1a0012f8:	b2c0      	uxtb	r0, r0
1a0012fa:	4770      	bx	lr
       return pADC->STAT >> 16 ? SET : RESET;
1a0012fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0012fe:	0c1b      	lsrs	r3, r3, #16
1a001300:	bf14      	ite	ne
1a001302:	2001      	movne	r0, #1
1a001304:	2000      	moveq	r0, #0
1a001306:	4770      	bx	lr

1a001308 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
   if (NewState == ENABLE) {
1a001308:	2a01      	cmp	r2, #1
1a00130a:	d007      	beq.n	1a00131c <Chip_ADC_Int_SetChannelCmd+0x14>
       pADC->INTEN |= (1UL << channel);
   }
   else {
       pADC->INTEN &= (~(1UL << channel));
1a00130c:	68c3      	ldr	r3, [r0, #12]
1a00130e:	2201      	movs	r2, #1
1a001310:	fa02 f101 	lsl.w	r1, r2, r1
1a001314:	ea23 0101 	bic.w	r1, r3, r1
1a001318:	60c1      	str	r1, [r0, #12]
1a00131a:	4770      	bx	lr
       pADC->INTEN |= (1UL << channel);
1a00131c:	68c3      	ldr	r3, [r0, #12]
1a00131e:	fa02 f101 	lsl.w	r1, r2, r1
1a001322:	4319      	orrs	r1, r3
1a001324:	60c1      	str	r1, [r0, #12]
1a001326:	4770      	bx	lr

1a001328 <Chip_ADC_SetStartMode>:
   }
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a001328:	b508      	push	{r3, lr}
   if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a00132a:	2901      	cmp	r1, #1
1a00132c:	d904      	bls.n	1a001338 <Chip_ADC_SetStartMode+0x10>
       if (EdgeOption) {
1a00132e:	b932      	cbnz	r2, 1a00133e <Chip_ADC_SetStartMode+0x16>
           pADC->CR |= ADC_CR_EDGE;
       }
       else {
           pADC->CR &= ~ADC_CR_EDGE;
1a001330:	6803      	ldr	r3, [r0, #0]
1a001332:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a001336:	6003      	str	r3, [r0, #0]
       }
   }
   setStartMode(pADC, (uint8_t) mode);
1a001338:	f7ff ff89 	bl	1a00124e <setStartMode>
1a00133c:	bd08      	pop	{r3, pc}
           pADC->CR |= ADC_CR_EDGE;
1a00133e:	6803      	ldr	r3, [r0, #0]
1a001340:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a001344:	6003      	str	r3, [r0, #0]
1a001346:	e7f7      	b.n	1a001338 <Chip_ADC_SetStartMode+0x10>

1a001348 <Chip_ADC_SetSampleRate>:
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001348:	b570      	push	{r4, r5, r6, lr}
1a00134a:	4605      	mov	r5, r0
1a00134c:	460e      	mov	r6, r1
   uint8_t div;
   uint32_t cr;

   cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00134e:	6804      	ldr	r4, [r0, #0]
1a001350:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001354:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
   ADCSetup->adcRate = rate;
1a001358:	600a      	str	r2, [r1, #0]
   div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00135a:	790b      	ldrb	r3, [r1, #4]
1a00135c:	f1c3 030b 	rsb	r3, r3, #11
1a001360:	b2db      	uxtb	r3, r3
1a001362:	7949      	ldrb	r1, [r1, #5]
1a001364:	f7ff ff5a 	bl	1a00121c <getClkDiv>
   cr |= ADC_CR_CLKDIV(div);
1a001368:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00136c:	7934      	ldrb	r4, [r6, #4]
1a00136e:	0464      	lsls	r4, r4, #17
1a001370:	f404 2460 	and.w	r4, r4, #917504	; 0xe0000
1a001374:	4320      	orrs	r0, r4
   pADC->CR = cr;
1a001376:	6028      	str	r0, [r5, #0]
1a001378:	bd70      	pop	{r4, r5, r6, pc}

1a00137a <Chip_ADC_EnableChannel>:
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
   if (NewState == ENABLE) {
1a00137a:	2a01      	cmp	r2, #1
1a00137c:	d00b      	beq.n	1a001396 <Chip_ADC_EnableChannel+0x1c>
       pADC->CR |= ADC_CR_CH_SEL(channel);
   }
   else {
       pADC->CR &= ~ADC_CR_START_MASK;
1a00137e:	6803      	ldr	r3, [r0, #0]
1a001380:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a001384:	6003      	str	r3, [r0, #0]
       pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a001386:	6803      	ldr	r3, [r0, #0]
1a001388:	2201      	movs	r2, #1
1a00138a:	fa02 f101 	lsl.w	r1, r2, r1
1a00138e:	ea23 0101 	bic.w	r1, r3, r1
1a001392:	6001      	str	r1, [r0, #0]
1a001394:	4770      	bx	lr
       pADC->CR |= ADC_CR_CH_SEL(channel);
1a001396:	6803      	ldr	r3, [r0, #0]
1a001398:	fa02 f101 	lsl.w	r1, r2, r1
1a00139c:	4319      	orrs	r1, r3
1a00139e:	6001      	str	r1, [r0, #0]
1a0013a0:	4770      	bx	lr

1a0013a2 <Chip_ADC_SetBurstCmd>:
   }
}

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a0013a2:	b538      	push	{r3, r4, r5, lr}
1a0013a4:	4604      	mov	r4, r0
1a0013a6:	460d      	mov	r5, r1
   setStartMode(pADC, ADC_NO_START);
1a0013a8:	2100      	movs	r1, #0
1a0013aa:	f7ff ff50 	bl	1a00124e <setStartMode>

    if (NewState == DISABLE) {
1a0013ae:	b125      	cbz	r5, 1a0013ba <Chip_ADC_SetBurstCmd+0x18>
       pADC->CR &= ~ADC_CR_BURST;
   }
   else {
       pADC->CR |= ADC_CR_BURST;
1a0013b0:	6823      	ldr	r3, [r4, #0]
1a0013b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0013b6:	6023      	str	r3, [r4, #0]
1a0013b8:	bd38      	pop	{r3, r4, r5, pc}
       pADC->CR &= ~ADC_CR_BURST;
1a0013ba:	6823      	ldr	r3, [r4, #0]
1a0013bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a0013c0:	6023      	str	r3, [r4, #0]
1a0013c2:	bd38      	pop	{r3, r4, r5, pc}

1a0013c4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0013c4:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0013c6:	2069      	movs	r0, #105	; 0x69
1a0013c8:	f000 faa0 	bl	1a00190c <Chip_Clock_GetRate>
1a0013cc:	4b01      	ldr	r3, [pc, #4]	; (1a0013d4 <SystemCoreClockUpdate+0x10>)
1a0013ce:	6018      	str	r0, [r3, #0]
1a0013d0:	bd08      	pop	{r3, pc}
1a0013d2:	bf00      	nop
1a0013d4:	100001a4 	.word	0x100001a4

1a0013d8 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0013d8:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a0013da:	680b      	ldr	r3, [r1, #0]
1a0013dc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0013e0:	d002      	beq.n	1a0013e8 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a0013e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0013e6:	600b      	str	r3, [r1, #0]
1a0013e8:	4607      	mov	r7, r0
1a0013ea:	2501      	movs	r5, #1
1a0013ec:	e03b      	b.n	1a001466 <pll_calc_divs+0x8e>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a0013ee:	694b      	ldr	r3, [r1, #20]
1a0013f0:	fb03 f302 	mul.w	r3, r3, r2
1a0013f4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0013f8:	e014      	b.n	1a001424 <pll_calc_divs+0x4c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0013fa:	461c      	mov	r4, r3
1a0013fc:	e020      	b.n	1a001440 <pll_calc_divs+0x68>
       return -val;
1a0013fe:	f1ce 0e00 	rsb	lr, lr, #0
1a001402:	e020      	b.n	1a001446 <pll_calc_divs+0x6e>
           for (m = 1; m <= 256; m++) {
1a001404:	3201      	adds	r2, #1
1a001406:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00140a:	dc26      	bgt.n	1a00145a <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a00140c:	680c      	ldr	r4, [r1, #0]
1a00140e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001412:	d0ec      	beq.n	1a0013ee <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001414:	1c73      	adds	r3, r6, #1
1a001416:	fa02 fe03 	lsl.w	lr, r2, r3
1a00141a:	694b      	ldr	r3, [r1, #20]
1a00141c:	fb03 f30e 	mul.w	r3, r3, lr
1a001420:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001424:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a001470 <pll_calc_divs+0x98>
1a001428:	4573      	cmp	r3, lr
1a00142a:	d9eb      	bls.n	1a001404 <pll_calc_divs+0x2c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a00142c:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a001474 <pll_calc_divs+0x9c>
1a001430:	4573      	cmp	r3, lr
1a001432:	d812      	bhi.n	1a00145a <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a001434:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001438:	d1df      	bne.n	1a0013fa <pll_calc_divs+0x22>
               } else {
                   fout = fcco >> (p + 1);
1a00143a:	1c74      	adds	r4, r6, #1
1a00143c:	fa23 f404 	lsr.w	r4, r3, r4
   if (val < 0)
1a001440:	ebb0 0e04 	subs.w	lr, r0, r4
1a001444:	d4db      	bmi.n	1a0013fe <pll_calc_divs+0x26>
               }

               if (ABS(freq - fout) < prev) {
1a001446:	4577      	cmp	r7, lr
1a001448:	d9dc      	bls.n	1a001404 <pll_calc_divs+0x2c>
                   ppll->nsel = n;
1a00144a:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a00144c:	1c77      	adds	r7, r6, #1
1a00144e:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a001450:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a001452:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a001454:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a001456:	4677      	mov	r7, lr
1a001458:	e7d4      	b.n	1a001404 <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a00145a:	3601      	adds	r6, #1
1a00145c:	2e03      	cmp	r6, #3
1a00145e:	dc01      	bgt.n	1a001464 <pll_calc_divs+0x8c>
1a001460:	2201      	movs	r2, #1
1a001462:	e7d0      	b.n	1a001406 <pll_calc_divs+0x2e>
   for (n = 1; n <= 4; n++) {
1a001464:	3501      	adds	r5, #1
1a001466:	2d04      	cmp	r5, #4
1a001468:	dc01      	bgt.n	1a00146e <pll_calc_divs+0x96>
1a00146a:	2600      	movs	r6, #0
1a00146c:	e7f6      	b.n	1a00145c <pll_calc_divs+0x84>
               }
           }
       }
   }
}
1a00146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001470:	094c5eff 	.word	0x094c5eff
1a001474:	1312d000 	.word	0x1312d000

1a001478 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001478:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00147a:	b099      	sub	sp, #100	; 0x64
1a00147c:	4605      	mov	r5, r0
1a00147e:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001480:	2260      	movs	r2, #96	; 0x60
1a001482:	2100      	movs	r1, #0
1a001484:	4668      	mov	r0, sp
1a001486:	f001 f945 	bl	1a002714 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00148a:	2380      	movs	r3, #128	; 0x80
1a00148c:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a00148e:	6963      	ldr	r3, [r4, #20]
1a001490:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a001492:	7923      	ldrb	r3, [r4, #4]
1a001494:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a001498:	4669      	mov	r1, sp
1a00149a:	4628      	mov	r0, r5
1a00149c:	f7ff ff9c 	bl	1a0013d8 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a0014a0:	9b06      	ldr	r3, [sp, #24]
1a0014a2:	429d      	cmp	r5, r3
1a0014a4:	d02f      	beq.n	1a001506 <pll_get_frac+0x8e>
   if (val < 0)
1a0014a6:	1aeb      	subs	r3, r5, r3
1a0014a8:	d436      	bmi.n	1a001518 <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a0014aa:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a0014ac:	2340      	movs	r3, #64	; 0x40
1a0014ae:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a0014b0:	6963      	ldr	r3, [r4, #20]
1a0014b2:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a0014b4:	7923      	ldrb	r3, [r4, #4]
1a0014b6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a0014ba:	a910      	add	r1, sp, #64	; 0x40
1a0014bc:	4628      	mov	r0, r5
1a0014be:	f7ff ff8b 	bl	1a0013d8 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a0014c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0014c4:	429d      	cmp	r5, r3
1a0014c6:	d029      	beq.n	1a00151c <pll_get_frac+0xa4>
   if (val < 0)
1a0014c8:	1aeb      	subs	r3, r5, r3
1a0014ca:	d42f      	bmi.n	1a00152c <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a0014cc:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a0014ce:	2340      	movs	r3, #64	; 0x40
1a0014d0:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a0014d2:	6963      	ldr	r3, [r4, #20]
1a0014d4:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a0014d6:	7923      	ldrb	r3, [r4, #4]
1a0014d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a0014dc:	a908      	add	r1, sp, #32
1a0014de:	4628      	mov	r0, r5
1a0014e0:	f7ff ff7a 	bl	1a0013d8 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a0014e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0014e6:	429d      	cmp	r5, r3
1a0014e8:	d022      	beq.n	1a001530 <pll_get_frac+0xb8>
   if (val < 0)
1a0014ea:	1aed      	subs	r5, r5, r3
1a0014ec:	d428      	bmi.n	1a001540 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0014ee:	42ae      	cmp	r6, r5
1a0014f0:	dc30      	bgt.n	1a001554 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a0014f2:	42be      	cmp	r6, r7
1a0014f4:	dc26      	bgt.n	1a001544 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a0014f6:	466d      	mov	r5, sp
1a0014f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0014fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0014fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001504:	e006      	b.n	1a001514 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a001506:	466d      	mov	r5, sp
1a001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00150c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a001514:	b019      	add	sp, #100	; 0x64
1a001516:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a001518:	425b      	negs	r3, r3
1a00151a:	e7c6      	b.n	1a0014aa <pll_get_frac+0x32>
       *ppll = pll[2];
1a00151c:	ad10      	add	r5, sp, #64	; 0x40
1a00151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001522:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a00152a:	e7f3      	b.n	1a001514 <pll_get_frac+0x9c>
       return -val;
1a00152c:	425b      	negs	r3, r3
1a00152e:	e7cd      	b.n	1a0014cc <pll_get_frac+0x54>
       *ppll = pll[1];
1a001530:	ad08      	add	r5, sp, #32
1a001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001536:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00153a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a00153e:	e7e9      	b.n	1a001514 <pll_get_frac+0x9c>
       return -val;
1a001540:	426d      	negs	r5, r5
1a001542:	e7d4      	b.n	1a0014ee <pll_get_frac+0x76>
           *ppll = pll[2];
1a001544:	ad10      	add	r5, sp, #64	; 0x40
1a001546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00154a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00154e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001552:	e7df      	b.n	1a001514 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a001554:	42af      	cmp	r7, r5
1a001556:	db07      	blt.n	1a001568 <pll_get_frac+0xf0>
           *ppll = pll[1];
1a001558:	ad08      	add	r5, sp, #32
1a00155a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00155c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00155e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001566:	e7d5      	b.n	1a001514 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a001568:	ad10      	add	r5, sp, #64	; 0x40
1a00156a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00156c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00156e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001576:	e7cd      	b.n	1a001514 <pll_get_frac+0x9c>

1a001578 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001578:	b430      	push	{r4, r5}
1a00157a:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a00157c:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00157e:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001580:	e000      	b.n	1a001584 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a001582:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001584:	281c      	cmp	r0, #28
1a001586:	d118      	bne.n	1a0015ba <Chip_Clock_FindBaseClock+0x42>
1a001588:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00158c:	0051      	lsls	r1, r2, #1
1a00158e:	4a0c      	ldr	r2, [pc, #48]	; (1a0015c0 <Chip_Clock_FindBaseClock+0x48>)
1a001590:	440a      	add	r2, r1
1a001592:	7914      	ldrb	r4, [r2, #4]
1a001594:	42a0      	cmp	r0, r4
1a001596:	d010      	beq.n	1a0015ba <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001598:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00159c:	004a      	lsls	r2, r1, #1
1a00159e:	4908      	ldr	r1, [pc, #32]	; (1a0015c0 <Chip_Clock_FindBaseClock+0x48>)
1a0015a0:	5a8a      	ldrh	r2, [r1, r2]
1a0015a2:	42aa      	cmp	r2, r5
1a0015a4:	d8ed      	bhi.n	1a001582 <Chip_Clock_FindBaseClock+0xa>
1a0015a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0015aa:	0051      	lsls	r1, r2, #1
1a0015ac:	4a04      	ldr	r2, [pc, #16]	; (1a0015c0 <Chip_Clock_FindBaseClock+0x48>)
1a0015ae:	440a      	add	r2, r1
1a0015b0:	8852      	ldrh	r2, [r2, #2]
1a0015b2:	4295      	cmp	r5, r2
1a0015b4:	d8e5      	bhi.n	1a001582 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a0015b6:	4620      	mov	r0, r4
1a0015b8:	e7e4      	b.n	1a001584 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a0015ba:	bc30      	pop	{r4, r5}
1a0015bc:	4770      	bx	lr
1a0015be:	bf00      	nop
1a0015c0:	1a002fb4 	.word	0x1a002fb4

1a0015c4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0015c4:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a0015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0015ca:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0015cc:	4a0d      	ldr	r2, [pc, #52]	; (1a001604 <Chip_Clock_EnableCrystal+0x40>)
1a0015ce:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a0015d0:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0015d4:	6992      	ldr	r2, [r2, #24]
1a0015d6:	4291      	cmp	r1, r2
1a0015d8:	d001      	beq.n	1a0015de <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0015da:	4a0a      	ldr	r2, [pc, #40]	; (1a001604 <Chip_Clock_EnableCrystal+0x40>)
1a0015dc:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a0015de:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a0015e2:	4a09      	ldr	r2, [pc, #36]	; (1a001608 <Chip_Clock_EnableCrystal+0x44>)
1a0015e4:	6811      	ldr	r1, [r2, #0]
1a0015e6:	4a09      	ldr	r2, [pc, #36]	; (1a00160c <Chip_Clock_EnableCrystal+0x48>)
1a0015e8:	4291      	cmp	r1, r2
1a0015ea:	d901      	bls.n	1a0015f0 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a0015ec:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0015f0:	4a04      	ldr	r2, [pc, #16]	; (1a001604 <Chip_Clock_EnableCrystal+0x40>)
1a0015f2:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a0015f4:	9b01      	ldr	r3, [sp, #4]
1a0015f6:	1e5a      	subs	r2, r3, #1
1a0015f8:	9201      	str	r2, [sp, #4]
1a0015fa:	2b00      	cmp	r3, #0
1a0015fc:	d1fa      	bne.n	1a0015f4 <Chip_Clock_EnableCrystal+0x30>
}
1a0015fe:	b002      	add	sp, #8
1a001600:	4770      	bx	lr
1a001602:	bf00      	nop
1a001604:	40050000 	.word	0x40050000
1a001608:	1a002f2c 	.word	0x1a002f2c
1a00160c:	01312cff 	.word	0x01312cff

1a001610 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001610:	3012      	adds	r0, #18
1a001612:	4b05      	ldr	r3, [pc, #20]	; (1a001628 <Chip_Clock_GetDividerSource+0x18>)
1a001614:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a001618:	f010 0f01 	tst.w	r0, #1
1a00161c:	d001      	beq.n	1a001622 <Chip_Clock_GetDividerSource+0x12>
       return CLKINPUT_PD;
1a00161e:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001620:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001622:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001626:	4770      	bx	lr
1a001628:	40050000 	.word	0x40050000

1a00162c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00162c:	f100 0212 	add.w	r2, r0, #18
1a001630:	4b03      	ldr	r3, [pc, #12]	; (1a001640 <Chip_Clock_GetDividerDivisor+0x14>)
1a001632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001636:	4b03      	ldr	r3, [pc, #12]	; (1a001644 <Chip_Clock_GetDividerDivisor+0x18>)
1a001638:	5c18      	ldrb	r0, [r3, r0]
}
1a00163a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00163e:	4770      	bx	lr
1a001640:	40050000 	.word	0x40050000
1a001644:	1a002fac 	.word	0x1a002fac

1a001648 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001648:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a00164a:	2810      	cmp	r0, #16
1a00164c:	d80a      	bhi.n	1a001664 <Chip_Clock_GetClockInputHz+0x1c>
1a00164e:	e8df f000 	tbb	[pc, r0]
1a001652:	0b44      	.short	0x0b44
1a001654:	0921180d 	.word	0x0921180d
1a001658:	2d2a2724 	.word	0x2d2a2724
1a00165c:	34300909 	.word	0x34300909
1a001660:	3c38      	.short	0x3c38
1a001662:	40          	.byte	0x40
1a001663:	00          	.byte	0x00
   uint32_t rate = 0;
1a001664:	2000      	movs	r0, #0
1a001666:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a001668:	481e      	ldr	r0, [pc, #120]	; (1a0016e4 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a00166a:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00166c:	4b1e      	ldr	r3, [pc, #120]	; (1a0016e8 <Chip_Clock_GetClockInputHz+0xa0>)
1a00166e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001672:	f003 0307 	and.w	r3, r3, #7
1a001676:	2b04      	cmp	r3, #4
1a001678:	d001      	beq.n	1a00167e <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a00167a:	481c      	ldr	r0, [pc, #112]	; (1a0016ec <Chip_Clock_GetClockInputHz+0xa4>)
1a00167c:	bd08      	pop	{r3, pc}
   uint32_t rate = 0;
1a00167e:	2000      	movs	r0, #0
1a001680:	bd08      	pop	{r3, pc}
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001682:	4b19      	ldr	r3, [pc, #100]	; (1a0016e8 <Chip_Clock_GetClockInputHz+0xa0>)
1a001684:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001688:	f003 0307 	and.w	r3, r3, #7
1a00168c:	2b04      	cmp	r3, #4
1a00168e:	d027      	beq.n	1a0016e0 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a001690:	4816      	ldr	r0, [pc, #88]	; (1a0016ec <Chip_Clock_GetClockInputHz+0xa4>)
1a001692:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a001694:	4b16      	ldr	r3, [pc, #88]	; (1a0016f0 <Chip_Clock_GetClockInputHz+0xa8>)
1a001696:	6818      	ldr	r0, [r3, #0]
       break;
1a001698:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a00169a:	4b16      	ldr	r3, [pc, #88]	; (1a0016f4 <Chip_Clock_GetClockInputHz+0xac>)
1a00169c:	6818      	ldr	r0, [r3, #0]
       break;
1a00169e:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0016a0:	4b15      	ldr	r3, [pc, #84]	; (1a0016f8 <Chip_Clock_GetClockInputHz+0xb0>)
1a0016a2:	6818      	ldr	r0, [r3, #0]
       break;
1a0016a4:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0016a6:	4b14      	ldr	r3, [pc, #80]	; (1a0016f8 <Chip_Clock_GetClockInputHz+0xb0>)
1a0016a8:	6858      	ldr	r0, [r3, #4]
       break;
1a0016aa:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a0016ac:	f000 f868 	bl	1a001780 <Chip_Clock_GetMainPLLHz>
       break;
1a0016b0:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0016b2:	2100      	movs	r1, #0
1a0016b4:	f000 f89a 	bl	1a0017ec <Chip_Clock_GetDivRate>
       break;
1a0016b8:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0016ba:	2101      	movs	r1, #1
1a0016bc:	f000 f896 	bl	1a0017ec <Chip_Clock_GetDivRate>
       break;
1a0016c0:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0016c2:	2102      	movs	r1, #2
1a0016c4:	f000 f892 	bl	1a0017ec <Chip_Clock_GetDivRate>
       break;
1a0016c8:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0016ca:	2103      	movs	r1, #3
1a0016cc:	f000 f88e 	bl	1a0017ec <Chip_Clock_GetDivRate>
       break;
1a0016d0:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0016d2:	2104      	movs	r1, #4
1a0016d4:	f000 f88a 	bl	1a0017ec <Chip_Clock_GetDivRate>
       break;
1a0016d8:	bd08      	pop	{r3, pc}
       rate = CRYSTAL_32K_FREQ_IN;
1a0016da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0016de:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a0016e0:	4806      	ldr	r0, [pc, #24]	; (1a0016fc <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a0016e2:	bd08      	pop	{r3, pc}
1a0016e4:	00b71b00 	.word	0x00b71b00
1a0016e8:	40043000 	.word	0x40043000
1a0016ec:	017d7840 	.word	0x017d7840
1a0016f0:	1a002f28 	.word	0x1a002f28
1a0016f4:	1a002f2c 	.word	0x1a002f2c
1a0016f8:	100000d4 	.word	0x100000d4
1a0016fc:	02faf080 	.word	0x02faf080

1a001700 <Chip_Clock_CalcMainPLLValue>:
{
1a001700:	b538      	push	{r3, r4, r5, lr}
1a001702:	4605      	mov	r5, r0
1a001704:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001706:	7908      	ldrb	r0, [r1, #4]
1a001708:	f7ff ff9e 	bl	1a001648 <Chip_Clock_GetClockInputHz>
1a00170c:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00170e:	4b19      	ldr	r3, [pc, #100]	; (1a001774 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001710:	442b      	add	r3, r5
1a001712:	4a19      	ldr	r2, [pc, #100]	; (1a001778 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001714:	4293      	cmp	r3, r2
1a001716:	d821      	bhi.n	1a00175c <Chip_Clock_CalcMainPLLValue+0x5c>
1a001718:	b318      	cbz	r0, 1a001762 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00171a:	2380      	movs	r3, #128	; 0x80
1a00171c:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a00171e:	2300      	movs	r3, #0
1a001720:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a001722:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a001724:	fbb5 f3f0 	udiv	r3, r5, r0
1a001728:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00172a:	4a14      	ldr	r2, [pc, #80]	; (1a00177c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00172c:	4295      	cmp	r5, r2
1a00172e:	d903      	bls.n	1a001738 <Chip_Clock_CalcMainPLLValue+0x38>
1a001730:	fb03 f000 	mul.w	r0, r3, r0
1a001734:	4285      	cmp	r5, r0
1a001736:	d007      	beq.n	1a001748 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a001738:	4621      	mov	r1, r4
1a00173a:	4628      	mov	r0, r5
1a00173c:	f7ff fe9c 	bl	1a001478 <pll_get_frac>
       if (!ppll->nsel) {
1a001740:	68a3      	ldr	r3, [r4, #8]
1a001742:	b18b      	cbz	r3, 1a001768 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a001744:	3b01      	subs	r3, #1
1a001746:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a001748:	6923      	ldr	r3, [r4, #16]
1a00174a:	b183      	cbz	r3, 1a00176e <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a00174c:	68e2      	ldr	r2, [r4, #12]
1a00174e:	b10a      	cbz	r2, 1a001754 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a001750:	3a01      	subs	r2, #1
1a001752:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a001754:	3b01      	subs	r3, #1
1a001756:	6123      	str	r3, [r4, #16]
   return 0;
1a001758:	2000      	movs	r0, #0
1a00175a:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a00175c:	f04f 30ff 	mov.w	r0, #4294967295
1a001760:	bd38      	pop	{r3, r4, r5, pc}
1a001762:	f04f 30ff 	mov.w	r0, #4294967295
1a001766:	bd38      	pop	{r3, r4, r5, pc}
           return -1;
1a001768:	f04f 30ff 	mov.w	r0, #4294967295
1a00176c:	bd38      	pop	{r3, r4, r5, pc}
       return - 1;
1a00176e:	f04f 30ff 	mov.w	r0, #4294967295
}
1a001772:	bd38      	pop	{r3, r4, r5, pc}
1a001774:	ff6b3a10 	.word	0xff6b3a10
1a001778:	0b940510 	.word	0x0b940510
1a00177c:	094c5eff 	.word	0x094c5eff

1a001780 <Chip_Clock_GetMainPLLHz>:
{
1a001780:	b530      	push	{r4, r5, lr}
1a001782:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001784:	4d17      	ldr	r5, [pc, #92]	; (1a0017e4 <Chip_Clock_GetMainPLLHz+0x64>)
1a001786:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001788:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00178c:	f7ff ff5c 	bl	1a001648 <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a001790:	4b15      	ldr	r3, [pc, #84]	; (1a0017e8 <Chip_Clock_GetMainPLLHz+0x68>)
1a001792:	681b      	ldr	r3, [r3, #0]
1a001794:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001796:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001798:	f013 0f01 	tst.w	r3, #1
1a00179c:	d01f      	beq.n	1a0017de <Chip_Clock_GetMainPLLHz+0x5e>
   msel = (PLLReg >> 16) & 0xFF;
1a00179e:	f3c4 4207 	ubfx	r2, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a0017a2:	f3c4 3301 	ubfx	r3, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a0017a6:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a0017aa:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a0017ae:	3201      	adds	r2, #1
   n = nsel + 1;
1a0017b0:	3301      	adds	r3, #1
   p = ptab[psel];
1a0017b2:	f10d 0e08 	add.w	lr, sp, #8
1a0017b6:	4471      	add	r1, lr
1a0017b8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a0017bc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0017c0:	d108      	bne.n	1a0017d4 <Chip_Clock_GetMainPLLHz+0x54>
1a0017c2:	b93d      	cbnz	r5, 1a0017d4 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a0017c4:	0049      	lsls	r1, r1, #1
1a0017c6:	fbb2 f2f1 	udiv	r2, r2, r1
1a0017ca:	fbb0 f0f3 	udiv	r0, r0, r3
1a0017ce:	fb00 f002 	mul.w	r0, r0, r2
1a0017d2:	e005      	b.n	1a0017e0 <Chip_Clock_GetMainPLLHz+0x60>
       return m * (freq / n);
1a0017d4:	fbb0 f0f3 	udiv	r0, r0, r3
1a0017d8:	fb00 f002 	mul.w	r0, r0, r2
1a0017dc:	e000      	b.n	1a0017e0 <Chip_Clock_GetMainPLLHz+0x60>
       return 0;
1a0017de:	2000      	movs	r0, #0
}
1a0017e0:	b003      	add	sp, #12
1a0017e2:	bd30      	pop	{r4, r5, pc}
1a0017e4:	40050000 	.word	0x40050000
1a0017e8:	1a002fa8 	.word	0x1a002fa8

1a0017ec <Chip_Clock_GetDivRate>:
{
1a0017ec:	b538      	push	{r3, r4, r5, lr}
1a0017ee:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a0017f0:	4608      	mov	r0, r1
1a0017f2:	f7ff ff0d 	bl	1a001610 <Chip_Clock_GetDividerSource>
1a0017f6:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a0017f8:	4620      	mov	r0, r4
1a0017fa:	f7ff ff17 	bl	1a00162c <Chip_Clock_GetDividerDivisor>
1a0017fe:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001800:	4628      	mov	r0, r5
1a001802:	f7ff ff21 	bl	1a001648 <Chip_Clock_GetClockInputHz>
1a001806:	3401      	adds	r4, #1
}
1a001808:	fbb0 f0f4 	udiv	r0, r0, r4
1a00180c:	bd38      	pop	{r3, r4, r5, pc}
1a00180e:	Address 0x1a00180e is out of bounds.


1a001810 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001810:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001812:	f100 0416 	add.w	r4, r0, #22
1a001816:	00a4      	lsls	r4, r4, #2
1a001818:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a00181c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001820:	6865      	ldr	r5, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a001822:	281b      	cmp	r0, #27
1a001824:	d813      	bhi.n	1a00184e <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a001826:	2911      	cmp	r1, #17
1a001828:	d01a      	beq.n	1a001860 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00182a:	4c0e      	ldr	r4, [pc, #56]	; (1a001864 <Chip_Clock_SetBaseClock+0x54>)
1a00182c:	402c      	ands	r4, r5

           if (autoblocken) {
1a00182e:	b10a      	cbz	r2, 1a001834 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a001830:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a001834:	b10b      	cbz	r3, 1a00183a <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a001836:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a00183a:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00183e:	3016      	adds	r0, #22
1a001840:	0080      	lsls	r0, r0, #2
1a001842:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001846:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00184a:	6044      	str	r4, [r0, #4]
1a00184c:	e008      	b.n	1a001860 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a00184e:	f045 0501 	orr.w	r5, r5, #1
1a001852:	3016      	adds	r0, #22
1a001854:	0080      	lsls	r0, r0, #2
1a001856:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00185a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00185e:	6045      	str	r5, [r0, #4]
   }
}
1a001860:	bc30      	pop	{r4, r5}
1a001862:	4770      	bx	lr
1a001864:	e0fff7fe 	.word	0xe0fff7fe

1a001868 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a001868:	281b      	cmp	r0, #27
1a00186a:	d901      	bls.n	1a001870 <Chip_Clock_GetBaseClock+0x8>
       return CLKINPUT_PD;
1a00186c:	2011      	movs	r0, #17
1a00186e:	4770      	bx	lr
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a001870:	3016      	adds	r0, #22
1a001872:	0080      	lsls	r0, r0, #2
1a001874:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001878:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00187c:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a00187e:	f010 0f01 	tst.w	r0, #1
1a001882:	d001      	beq.n	1a001888 <Chip_Clock_GetBaseClock+0x20>
       return CLKINPUT_PD;
1a001884:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001886:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001888:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00188c:	4770      	bx	lr

1a00188e <Chip_Clock_GetBaseClocktHz>:
{
1a00188e:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001890:	f7ff ffea 	bl	1a001868 <Chip_Clock_GetBaseClock>
1a001894:	f7ff fed8 	bl	1a001648 <Chip_Clock_GetClockInputHz>
}
1a001898:	bd08      	pop	{r3, pc}
1a00189a:	Address 0x1a00189a is out of bounds.


1a00189c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a00189c:	b969      	cbnz	r1, 1a0018ba <Chip_Clock_EnableOpts+0x1e>
   uint32_t reg = 1;
1a00189e:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a0018a0:	b10a      	cbz	r2, 1a0018a6 <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a0018a2:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a0018a6:	2b02      	cmp	r3, #2
1a0018a8:	d009      	beq.n	1a0018be <Chip_Clock_EnableOpts+0x22>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a0018aa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0018ae:	d209      	bcs.n	1a0018c4 <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0018b0:	3020      	adds	r0, #32
1a0018b2:	4b07      	ldr	r3, [pc, #28]	; (1a0018d0 <Chip_Clock_EnableOpts+0x34>)
1a0018b4:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0018b8:	4770      	bx	lr
       reg |= (1 << 1);
1a0018ba:	2103      	movs	r1, #3
1a0018bc:	e7f0      	b.n	1a0018a0 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a0018be:	f041 0120 	orr.w	r1, r1, #32
1a0018c2:	e7f2      	b.n	1a0018aa <Chip_Clock_EnableOpts+0xe>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0018c4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0018c8:	4b02      	ldr	r3, [pc, #8]	; (1a0018d4 <Chip_Clock_EnableOpts+0x38>)
1a0018ca:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0018ce:	4770      	bx	lr
1a0018d0:	40051000 	.word	0x40051000
1a0018d4:	40052000 	.word	0x40052000

1a0018d8 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
   /* Stop peripheral clock */
   if (clk >= CLK_CCU2_START) {
1a0018d8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0018dc:	d208      	bcs.n	1a0018f0 <Chip_Clock_Disable+0x18>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a0018de:	4a09      	ldr	r2, [pc, #36]	; (1a001904 <Chip_Clock_Disable+0x2c>)
1a0018e0:	3020      	adds	r0, #32
1a0018e2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0018e6:	f023 0301 	bic.w	r3, r3, #1
1a0018ea:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0018ee:	4770      	bx	lr
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a0018f0:	4a05      	ldr	r2, [pc, #20]	; (1a001908 <Chip_Clock_Disable+0x30>)
1a0018f2:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0018f6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0018fa:	f023 0301 	bic.w	r3, r3, #1
1a0018fe:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001902:	4770      	bx	lr
1a001904:	40051000 	.word	0x40051000
1a001908:	40052000 	.word	0x40052000

1a00190c <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00190c:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a00190e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001912:	d309      	bcc.n	1a001928 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001914:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001918:	4a0d      	ldr	r2, [pc, #52]	; (1a001950 <Chip_Clock_GetRate+0x44>)
1a00191a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a00191e:	f014 0f01 	tst.w	r4, #1
1a001922:	d107      	bne.n	1a001934 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a001924:	2000      	movs	r0, #0
   }

   return rate;
}
1a001926:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001928:	f100 0320 	add.w	r3, r0, #32
1a00192c:	4a09      	ldr	r2, [pc, #36]	; (1a001954 <Chip_Clock_GetRate+0x48>)
1a00192e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001932:	e7f4      	b.n	1a00191e <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a001934:	f7ff fe20 	bl	1a001578 <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001938:	f7ff ffa9 	bl	1a00188e <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a00193c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001940:	d103      	bne.n	1a00194a <Chip_Clock_GetRate+0x3e>
           div = 1;
1a001942:	2301      	movs	r3, #1
       rate = rate / div;
1a001944:	fbb0 f0f3 	udiv	r0, r0, r3
1a001948:	bd10      	pop	{r4, pc}
           div = 2;/* No other dividers supported */
1a00194a:	2302      	movs	r3, #2
1a00194c:	e7fa      	b.n	1a001944 <Chip_Clock_GetRate+0x38>
1a00194e:	bf00      	nop
1a001950:	40052000 	.word	0x40052000
1a001954:	40051000 	.word	0x40051000

1a001958 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001958:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a00195a:	4b0f      	ldr	r3, [pc, #60]	; (1a001998 <fpuInit+0x40>)
1a00195c:	681b      	ldr	r3, [r3, #0]
1a00195e:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a001960:	4b0e      	ldr	r3, [pc, #56]	; (1a00199c <fpuInit+0x44>)
1a001962:	681b      	ldr	r3, [r3, #0]
1a001964:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001966:	9a02      	ldr	r2, [sp, #8]
1a001968:	4b0d      	ldr	r3, [pc, #52]	; (1a0019a0 <fpuInit+0x48>)
1a00196a:	429a      	cmp	r2, r3
1a00196c:	d00c      	beq.n	1a001988 <fpuInit+0x30>
1a00196e:	2300      	movs	r3, #0

   if (vfpPresent) {
1a001970:	b143      	cbz	r3, 1a001984 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a001972:	4a0c      	ldr	r2, [pc, #48]	; (1a0019a4 <fpuInit+0x4c>)
1a001974:	6813      	ldr	r3, [r2, #0]
1a001976:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a001978:	9b03      	ldr	r3, [sp, #12]
1a00197a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00197e:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a001980:	9b03      	ldr	r3, [sp, #12]
1a001982:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a001984:	b004      	add	sp, #16
1a001986:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001988:	9a01      	ldr	r2, [sp, #4]
1a00198a:	4b07      	ldr	r3, [pc, #28]	; (1a0019a8 <fpuInit+0x50>)
1a00198c:	429a      	cmp	r2, r3
1a00198e:	d001      	beq.n	1a001994 <fpuInit+0x3c>
1a001990:	2300      	movs	r3, #0
1a001992:	e7ed      	b.n	1a001970 <fpuInit+0x18>
1a001994:	2301      	movs	r3, #1
1a001996:	e7eb      	b.n	1a001970 <fpuInit+0x18>
1a001998:	e000ef40 	.word	0xe000ef40
1a00199c:	e000ef44 	.word	0xe000ef44
1a0019a0:	10110021 	.word	0x10110021
1a0019a4:	e000ed88 	.word	0xe000ed88
1a0019a8:	11000011 	.word	0x11000011

1a0019ac <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0019ac:	4770      	bx	lr

1a0019ae <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a0019ae:	b943      	cbnz	r3, 1a0019c2 <Chip_GPIO_SetDir+0x14>
       pGPIO->DIR[portNum] |= bitValue;
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a0019b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a0019b4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a0019b8:	ea23 0202 	bic.w	r2, r3, r2
1a0019bc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a0019c0:	4770      	bx	lr
       pGPIO->DIR[portNum] |= bitValue;
1a0019c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a0019c6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a0019ca:	431a      	orrs	r2, r3
1a0019cc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a0019d0:	4770      	bx	lr
1a0019d2:	Address 0x1a0019d2 is out of bounds.


1a0019d4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0019d4:	b570      	push	{r4, r5, r6, lr}
1a0019d6:	b092      	sub	sp, #72	; 0x48
1a0019d8:	4605      	mov	r5, r0
1a0019da:	460e      	mov	r6, r1
1a0019dc:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a0019de:	f241 537c 	movw	r3, #5500	; 0x157c
1a0019e2:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a0019e4:	2806      	cmp	r0, #6
1a0019e6:	d044      	beq.n	1a001a72 <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0019e8:	2300      	movs	r3, #0
1a0019ea:	2201      	movs	r2, #1
1a0019ec:	4629      	mov	r1, r5
1a0019ee:	2004      	movs	r0, #4
1a0019f0:	f7ff ff0e 	bl	1a001810 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a0019f4:	4a4a      	ldr	r2, [pc, #296]	; (1a001b20 <Chip_SetupCoreClock+0x14c>)
1a0019f6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0019f8:	f043 0301 	orr.w	r3, r3, #1
1a0019fc:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a0019fe:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001a02:	a909      	add	r1, sp, #36	; 0x24
1a001a04:	4630      	mov	r0, r6
1a001a06:	f7ff fe7b 	bl	1a001700 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a001a0a:	4b46      	ldr	r3, [pc, #280]	; (1a001b24 <Chip_SetupCoreClock+0x150>)
1a001a0c:	429e      	cmp	r6, r3
1a001a0e:	d938      	bls.n	1a001a82 <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a001a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001a12:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001a16:	d001      	beq.n	1a001a1c <Chip_SetupCoreClock+0x48>
1a001a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001a1a:	b36a      	cbz	r2, 1a001a78 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a001a1c:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a001a20:	a901      	add	r1, sp, #4
1a001a22:	4840      	ldr	r0, [pc, #256]	; (1a001b24 <Chip_SetupCoreClock+0x150>)
1a001a24:	f7ff fe6c 	bl	1a001700 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a001a28:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001a2c:	9b01      	ldr	r3, [sp, #4]
1a001a2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001a32:	9a05      	ldr	r2, [sp, #20]
1a001a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001a38:	9a03      	ldr	r2, [sp, #12]
1a001a3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001a3e:	9a04      	ldr	r2, [sp, #16]
1a001a40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001a44:	4a36      	ldr	r2, [pc, #216]	; (1a001b20 <Chip_SetupCoreClock+0x14c>)
1a001a46:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001a48:	4b35      	ldr	r3, [pc, #212]	; (1a001b20 <Chip_SetupCoreClock+0x14c>)
1a001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a001a4c:	f013 0f01 	tst.w	r3, #1
1a001a50:	d0fa      	beq.n	1a001a48 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001a52:	2300      	movs	r3, #0
1a001a54:	2201      	movs	r2, #1
1a001a56:	2109      	movs	r1, #9
1a001a58:	2004      	movs	r0, #4
1a001a5a:	f7ff fed9 	bl	1a001810 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a001a5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a001a60:	1e5a      	subs	r2, r3, #1
1a001a62:	9211      	str	r2, [sp, #68]	; 0x44
1a001a64:	2b00      	cmp	r3, #0
1a001a66:	d1fa      	bne.n	1a001a5e <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a001a68:	f241 537c 	movw	r3, #5500	; 0x157c
1a001a6c:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a001a6e:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a001a70:	e008      	b.n	1a001a84 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a001a72:	f7ff fda7 	bl	1a0015c4 <Chip_Clock_EnableCrystal>
1a001a76:	e7b7      	b.n	1a0019e8 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a001a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001a7c:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a001a7e:	2501      	movs	r5, #1
1a001a80:	e000      	b.n	1a001a84 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a001a82:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a001a84:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a001a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001a8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001a94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a001a96:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001a9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001aa0:	4a1f      	ldr	r2, [pc, #124]	; (1a001b20 <Chip_SetupCoreClock+0x14c>)
1a001aa2:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001aa4:	4b1e      	ldr	r3, [pc, #120]	; (1a001b20 <Chip_SetupCoreClock+0x14c>)
1a001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a001aa8:	f013 0f01 	tst.w	r3, #1
1a001aac:	d0fa      	beq.n	1a001aa4 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001aae:	2300      	movs	r3, #0
1a001ab0:	2201      	movs	r2, #1
1a001ab2:	2109      	movs	r1, #9
1a001ab4:	2004      	movs	r0, #4
1a001ab6:	f7ff feab 	bl	1a001810 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a001aba:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a001abc:	1e5a      	subs	r2, r3, #1
1a001abe:	9211      	str	r2, [sp, #68]	; 0x44
1a001ac0:	2b00      	cmp	r3, #0
1a001ac2:	d1fa      	bne.n	1a001aba <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a001ac4:	b1d5      	cbz	r5, 1a001afc <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a001ac6:	f241 537c 	movw	r3, #5500	; 0x157c
1a001aca:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a001acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001ad2:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a001ad4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a001ad8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001ae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a001ae4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a001aea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001aee:	4a0c      	ldr	r2, [pc, #48]	; (1a001b20 <Chip_SetupCoreClock+0x14c>)
1a001af0:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a001af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a001af4:	1e5a      	subs	r2, r3, #1
1a001af6:	9211      	str	r2, [sp, #68]	; 0x44
1a001af8:	2b00      	cmp	r3, #0
1a001afa:	d1fa      	bne.n	1a001af2 <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a001afc:	b174      	cbz	r4, 1a001b1c <Chip_SetupCoreClock+0x148>
1a001afe:	2400      	movs	r4, #0
1a001b00:	e00a      	b.n	1a001b18 <Chip_SetupCoreClock+0x144>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001b02:	4809      	ldr	r0, [pc, #36]	; (1a001b28 <Chip_SetupCoreClock+0x154>)
1a001b04:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001b08:	78cb      	ldrb	r3, [r1, #3]
1a001b0a:	788a      	ldrb	r2, [r1, #2]
1a001b0c:	7849      	ldrb	r1, [r1, #1]
1a001b0e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001b12:	f7ff fe7d 	bl	1a001810 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001b16:	3401      	adds	r4, #1
1a001b18:	2c11      	cmp	r4, #17
1a001b1a:	d9f2      	bls.n	1a001b02 <Chip_SetupCoreClock+0x12e>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a001b1c:	b012      	add	sp, #72	; 0x48
1a001b1e:	bd70      	pop	{r4, r5, r6, pc}
1a001b20:	40050000 	.word	0x40050000
1a001b24:	068e7780 	.word	0x068e7780
1a001b28:	1a003020 	.word	0x1a003020

1a001b2c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a001b2c:	4b09      	ldr	r3, [pc, #36]	; (1a001b54 <Chip_UART_GetIndex+0x28>)
1a001b2e:	4298      	cmp	r0, r3
1a001b30:	d009      	beq.n	1a001b46 <Chip_UART_GetIndex+0x1a>
1a001b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001b36:	4298      	cmp	r0, r3
1a001b38:	d007      	beq.n	1a001b4a <Chip_UART_GetIndex+0x1e>
1a001b3a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001b3e:	4298      	cmp	r0, r3
1a001b40:	d005      	beq.n	1a001b4e <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a001b42:	2000      	movs	r0, #0
1a001b44:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a001b46:	2002      	movs	r0, #2
1a001b48:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a001b4a:	2003      	movs	r0, #3
1a001b4c:	4770      	bx	lr
           return 1;
1a001b4e:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a001b50:	4770      	bx	lr
1a001b52:	bf00      	nop
1a001b54:	400c1000 	.word	0x400c1000

1a001b58 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001b58:	b530      	push	{r4, r5, lr}
1a001b5a:	b083      	sub	sp, #12
1a001b5c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001b5e:	f7ff ffe5 	bl	1a001b2c <Chip_UART_GetIndex>
1a001b62:	2301      	movs	r3, #1
1a001b64:	461a      	mov	r2, r3
1a001b66:	4619      	mov	r1, r3
1a001b68:	4d0e      	ldr	r5, [pc, #56]	; (1a001ba4 <Chip_UART_Init+0x4c>)
1a001b6a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001b6e:	f7ff fe95 	bl	1a00189c <Chip_Clock_EnableOpts>
   pUART->FCR = fcr;
1a001b72:	2307      	movs	r3, #7
1a001b74:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001b76:	2300      	movs	r3, #0
1a001b78:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a001b7a:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a001b7c:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a001b7e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a001b80:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a001b82:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a001b84:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001b86:	4b08      	ldr	r3, [pc, #32]	; (1a001ba8 <Chip_UART_Init+0x50>)
1a001b88:	429c      	cmp	r4, r3
1a001b8a:	d005      	beq.n	1a001b98 <Chip_UART_Init+0x40>
   pUART->LCR = config;
1a001b8c:	2303      	movs	r3, #3
1a001b8e:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a001b90:	2310      	movs	r3, #16
1a001b92:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a001b94:	b003      	add	sp, #12
1a001b96:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a001b98:	2300      	movs	r3, #0
1a001b9a:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a001b9c:	69a3      	ldr	r3, [r4, #24]
1a001b9e:	9301      	str	r3, [sp, #4]
1a001ba0:	e7f4      	b.n	1a001b8c <Chip_UART_Init+0x34>
1a001ba2:	bf00      	nop
1a001ba4:	1a003070 	.word	0x1a003070
1a001ba8:	40082000 	.word	0x40082000

1a001bac <Chip_UART_SetBaud>:
   return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001bac:	b538      	push	{r3, r4, r5, lr}
1a001bae:	4605      	mov	r5, r0
1a001bb0:	460c      	mov	r4, r1
   uint32_t div, divh, divl, clkin;

   /* Determine UART clock in rate without FDR */
   clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001bb2:	f7ff ffbb 	bl	1a001b2c <Chip_UART_GetIndex>
1a001bb6:	4b0c      	ldr	r3, [pc, #48]	; (1a001be8 <Chip_UART_SetBaud+0x3c>)
1a001bb8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001bbc:	f7ff fea6 	bl	1a00190c <Chip_Clock_GetRate>
   div = clkin / (baudrate * 16);
1a001bc0:	0123      	lsls	r3, r4, #4
1a001bc2:	fbb0 f3f3 	udiv	r3, r0, r3
1a001bc6:	b2d9      	uxtb	r1, r3
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a001bc8:	68ea      	ldr	r2, [r5, #12]
1a001bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001bce:	60ea      	str	r2, [r5, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a001bd0:	6029      	str	r1, [r5, #0]
1a001bd2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a001bd6:	606a      	str	r2, [r5, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001bd8:	68ea      	ldr	r2, [r5, #12]
1a001bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001bde:	60ea      	str	r2, [r5, #12]
   Chip_UART_DisableDivisorAccess(pUART);

   /* Fractional FDR alreadt setup for 1 in UART init */

   return clkin / div;
}
1a001be0:	fbb0 f0f3 	udiv	r0, r0, r3
1a001be4:	bd38      	pop	{r3, r4, r5, pc}
1a001be6:	bf00      	nop
1a001be8:	1a003068 	.word	0x1a003068

1a001bec <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001bf0:	b083      	sub	sp, #12
1a001bf2:	4683      	mov	fp, r0
1a001bf4:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001bf6:	f7ff ff99 	bl	1a001b2c <Chip_UART_GetIndex>
1a001bfa:	4b35      	ldr	r3, [pc, #212]	; (1a001cd0 <Chip_UART_SetBaudFDR+0xe4>)
1a001bfc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001c00:	f7ff fe84 	bl	1a00190c <Chip_Clock_GetRate>
1a001c04:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a001c06:	f04f 37ff 	mov.w	r7, #4294967295

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a001c0a:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a001c0c:	2300      	movs	r3, #0
1a001c0e:	9301      	str	r3, [sp, #4]
1a001c10:	46a2      	mov	sl, r4
1a001c12:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a001c14:	e02a      	b.n	1a001c6c <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a001c16:	4243      	negs	r3, r0
               div ++;
1a001c18:	1c4a      	adds	r2, r1, #1
1a001c1a:	e017      	b.n	1a001c4c <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a001c1c:	b30b      	cbz	r3, 1a001c62 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a001c1e:	461f      	mov	r7, r3
           sd = d;
1a001c20:	9501      	str	r5, [sp, #4]
           sm = m;
1a001c22:	46a2      	mov	sl, r4
           sdiv = div;
1a001c24:	4691      	mov	r9, r2
       for (d = 0; d < m; d++) {
1a001c26:	3501      	adds	r5, #1
1a001c28:	42ac      	cmp	r4, r5
1a001c2a:	d91e      	bls.n	1a001c6a <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001c2c:	0933      	lsrs	r3, r6, #4
1a001c2e:	0730      	lsls	r0, r6, #28
1a001c30:	fba4 0100 	umull	r0, r1, r4, r0
1a001c34:	fb04 1103 	mla	r1, r4, r3, r1
1a001c38:	1962      	adds	r2, r4, r5
1a001c3a:	fb08 f202 	mul.w	r2, r8, r2
1a001c3e:	2300      	movs	r3, #0
1a001c40:	f000 fbe0 	bl	1a002404 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a001c44:	4603      	mov	r3, r0
           div = (uint32_t) (dval >> 32);
1a001c46:	460a      	mov	r2, r1
           if ((int)diff < 0) {
1a001c48:	2800      	cmp	r0, #0
1a001c4a:	dbe4      	blt.n	1a001c16 <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001c4c:	429f      	cmp	r7, r3
1a001c4e:	d3ea      	bcc.n	1a001c26 <Chip_UART_SetBaudFDR+0x3a>
1a001c50:	2a00      	cmp	r2, #0
1a001c52:	d0e8      	beq.n	1a001c26 <Chip_UART_SetBaudFDR+0x3a>
1a001c54:	0c11      	lsrs	r1, r2, #16
1a001c56:	d1e6      	bne.n	1a001c26 <Chip_UART_SetBaudFDR+0x3a>
1a001c58:	2a02      	cmp	r2, #2
1a001c5a:	d8df      	bhi.n	1a001c1c <Chip_UART_SetBaudFDR+0x30>
1a001c5c:	2d00      	cmp	r5, #0
1a001c5e:	d1e2      	bne.n	1a001c26 <Chip_UART_SetBaudFDR+0x3a>
1a001c60:	e7dc      	b.n	1a001c1c <Chip_UART_SetBaudFDR+0x30>
           odiff = diff;
1a001c62:	461f      	mov	r7, r3
           sd = d;
1a001c64:	9501      	str	r5, [sp, #4]
           sm = m;
1a001c66:	46a2      	mov	sl, r4
           sdiv = div;
1a001c68:	4691      	mov	r9, r2
   for (m = 1; odiff && m < 16; m++) {
1a001c6a:	3401      	adds	r4, #1
1a001c6c:	b11f      	cbz	r7, 1a001c76 <Chip_UART_SetBaudFDR+0x8a>
1a001c6e:	2c0f      	cmp	r4, #15
1a001c70:	d801      	bhi.n	1a001c76 <Chip_UART_SetBaudFDR+0x8a>
1a001c72:	2500      	movs	r5, #0
1a001c74:	e7d8      	b.n	1a001c28 <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a001c76:	f1b9 0f00 	cmp.w	r9, #0
1a001c7a:	d024      	beq.n	1a001cc6 <Chip_UART_SetBaudFDR+0xda>
   pUART->LCR |= UART_LCR_DLAB_EN;
1a001c7c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001c84:	f8cb 300c 	str.w	r3, [fp, #12]
1a001c88:	fa5f f389 	uxtb.w	r3, r9
   pUART->DLL = (uint32_t) dll;
1a001c8c:	f8cb 3000 	str.w	r3, [fp]
1a001c90:	f3c9 2307 	ubfx	r3, r9, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a001c94:	f8cb 3004 	str.w	r3, [fp, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001c98:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001ca0:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001ca4:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001ca8:	b2db      	uxtb	r3, r3
1a001caa:	9901      	ldr	r1, [sp, #4]
1a001cac:	f001 020f 	and.w	r2, r1, #15
1a001cb0:	4313      	orrs	r3, r2
1a001cb2:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001cb6:	0933      	lsrs	r3, r6, #4
1a001cb8:	fb03 f30a 	mul.w	r3, r3, sl
1a001cbc:	448a      	add	sl, r1
1a001cbe:	fb0a f909 	mul.w	r9, sl, r9
1a001cc2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001cc6:	4648      	mov	r0, r9
1a001cc8:	b003      	add	sp, #12
1a001cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001cce:	bf00      	nop
1a001cd0:	1a003068 	.word	0x1a003068

1a001cd4 <adcConfig>:
/*
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcConfig( adcConfig_t config ){
1a001cd4:	b510      	push	{r4, lr}
1a001cd6:	b082      	sub	sp, #8

   switch(config){
1a001cd8:	b118      	cbz	r0, 1a001ce2 <adcConfig+0xe>
1a001cda:	2801      	cmp	r0, #1
1a001cdc:	d038      	beq.n	1a001d50 <adcConfig+0x7c>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
      break;
   }

}
1a001cde:	b002      	add	sp, #8
1a001ce0:	bd10      	pop	{r4, pc}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a001ce2:	4c1d      	ldr	r4, [pc, #116]	; (1a001d58 <adcConfig+0x84>)
1a001ce4:	4669      	mov	r1, sp
1a001ce6:	4620      	mov	r0, r4
1a001ce8:	f7ff fac4 	bl	1a001274 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a001cec:	2100      	movs	r1, #0
1a001cee:	4620      	mov	r0, r4
1a001cf0:	f7ff fb57 	bl	1a0013a2 <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a001cf4:	4a19      	ldr	r2, [pc, #100]	; (1a001d5c <adcConfig+0x88>)
1a001cf6:	4669      	mov	r1, sp
1a001cf8:	4620      	mov	r0, r4
1a001cfa:	f7ff fb25 	bl	1a001348 <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a001cfe:	2200      	movs	r2, #0
1a001d00:	2101      	movs	r1, #1
1a001d02:	4620      	mov	r0, r4
1a001d04:	f7ff fb39 	bl	1a00137a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a001d08:	2200      	movs	r2, #0
1a001d0a:	2101      	movs	r1, #1
1a001d0c:	4620      	mov	r0, r4
1a001d0e:	f7ff fafb 	bl	1a001308 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a001d12:	2200      	movs	r2, #0
1a001d14:	2102      	movs	r1, #2
1a001d16:	4620      	mov	r0, r4
1a001d18:	f7ff fb2f 	bl	1a00137a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a001d1c:	2200      	movs	r2, #0
1a001d1e:	2102      	movs	r1, #2
1a001d20:	4620      	mov	r0, r4
1a001d22:	f7ff faf1 	bl	1a001308 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a001d26:	2200      	movs	r2, #0
1a001d28:	2103      	movs	r1, #3
1a001d2a:	4620      	mov	r0, r4
1a001d2c:	f7ff fb25 	bl	1a00137a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a001d30:	2200      	movs	r2, #0
1a001d32:	2103      	movs	r1, #3
1a001d34:	4620      	mov	r0, r4
1a001d36:	f7ff fae7 	bl	1a001308 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a001d3a:	2200      	movs	r2, #0
1a001d3c:	2104      	movs	r1, #4
1a001d3e:	4620      	mov	r0, r4
1a001d40:	f7ff fb1b 	bl	1a00137a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a001d44:	2200      	movs	r2, #0
1a001d46:	2104      	movs	r1, #4
1a001d48:	4620      	mov	r0, r4
1a001d4a:	f7ff fadd 	bl	1a001308 <Chip_ADC_Int_SetChannelCmd>
      break;
1a001d4e:	e7c6      	b.n	1a001cde <adcConfig+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a001d50:	4801      	ldr	r0, [pc, #4]	; (1a001d58 <adcConfig+0x84>)
1a001d52:	f7ff faaf 	bl	1a0012b4 <Chip_ADC_DeInit>
}
1a001d56:	e7c2      	b.n	1a001cde <adcConfig+0xa>
1a001d58:	400e3000 	.word	0x400e3000
1a001d5c:	00030d40 	.word	0x00030d40

1a001d60 <adcRead>:
/*
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput ){
1a001d60:	b570      	push	{r4, r5, r6, lr}
1a001d62:	b082      	sub	sp, #8

   uint8_t lpcAdcChannel = 66 - analogInput;
1a001d64:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a001d68:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a001d6a:	2600      	movs	r6, #0
1a001d6c:	f8ad 6006 	strh.w	r6, [sp, #6]

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a001d70:	4d10      	ldr	r5, [pc, #64]	; (1a001db4 <adcRead+0x54>)
1a001d72:	2201      	movs	r2, #1
1a001d74:	4621      	mov	r1, r4
1a001d76:	4628      	mov	r0, r5
1a001d78:	f7ff faff 	bl	1a00137a <Chip_ADC_EnableChannel>
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a001d7c:	4632      	mov	r2, r6
1a001d7e:	2101      	movs	r1, #1
1a001d80:	4628      	mov	r0, r5
1a001d82:	f7ff fad1 	bl	1a001328 <Chip_ADC_SetStartMode>

   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a001d86:	2200      	movs	r2, #0
1a001d88:	4621      	mov	r1, r4
1a001d8a:	480a      	ldr	r0, [pc, #40]	; (1a001db4 <adcRead+0x54>)
1a001d8c:	f7ff faa1 	bl	1a0012d2 <Chip_ADC_ReadStatus>
   while(
1a001d90:	2801      	cmp	r0, #1
1a001d92:	d1f8      	bne.n	1a001d86 <adcRead+0x26>
   );
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a001d94:	4d07      	ldr	r5, [pc, #28]	; (1a001db4 <adcRead+0x54>)
1a001d96:	f10d 0206 	add.w	r2, sp, #6
1a001d9a:	4621      	mov	r1, r4
1a001d9c:	4628      	mov	r0, r5
1a001d9e:	f7ff fa94 	bl	1a0012ca <Chip_ADC_ReadValue>

   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a001da2:	2200      	movs	r2, #0
1a001da4:	4621      	mov	r1, r4
1a001da6:	4628      	mov	r0, r5
1a001da8:	f7ff fae7 	bl	1a00137a <Chip_ADC_EnableChannel>

   return analogValue;
}
1a001dac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a001db0:	b002      	add	sp, #8
1a001db2:	bd70      	pop	{r4, r5, r6, pc}
1a001db4:	400e3000 	.word	0x400e3000

1a001db8 <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a001db8:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a001dba:	f7ff fb03 	bl	1a0013c4 <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001dbe:	f7ff f973 	bl	1a0010a8 <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a001dc2:	2200      	movs	r2, #0
1a001dc4:	2001      	movs	r0, #1
1a001dc6:	2100      	movs	r1, #0
1a001dc8:	f000 f9d4 	bl	1a002174 <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a001dcc:	2105      	movs	r1, #5
1a001dce:	2000      	movs	r0, #0
1a001dd0:	f000 f8b6 	bl	1a001f40 <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a001dd4:	2100      	movs	r1, #0
1a001dd6:	2024      	movs	r0, #36	; 0x24
1a001dd8:	f000 f8b2 	bl	1a001f40 <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a001ddc:	2100      	movs	r1, #0
1a001dde:	2025      	movs	r0, #37	; 0x25
1a001de0:	f000 f8ae 	bl	1a001f40 <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a001de4:	2100      	movs	r1, #0
1a001de6:	2026      	movs	r0, #38	; 0x26
1a001de8:	f000 f8aa 	bl	1a001f40 <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a001dec:	2100      	movs	r1, #0
1a001dee:	2027      	movs	r0, #39	; 0x27
1a001df0:	f000 f8a6 	bl	1a001f40 <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a001df4:	2101      	movs	r1, #1
1a001df6:	2028      	movs	r0, #40	; 0x28
1a001df8:	f000 f8a2 	bl	1a001f40 <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a001dfc:	2101      	movs	r1, #1
1a001dfe:	2029      	movs	r0, #41	; 0x29
1a001e00:	f000 f89e 	bl	1a001f40 <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a001e04:	2101      	movs	r1, #1
1a001e06:	202a      	movs	r0, #42	; 0x2a
1a001e08:	f000 f89a 	bl	1a001f40 <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a001e0c:	2101      	movs	r1, #1
1a001e0e:	202b      	movs	r0, #43	; 0x2b
1a001e10:	f000 f896 	bl	1a001f40 <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a001e14:	2101      	movs	r1, #1
1a001e16:	202c      	movs	r0, #44	; 0x2c
1a001e18:	f000 f892 	bl	1a001f40 <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a001e1c:	2101      	movs	r1, #1
1a001e1e:	202d      	movs	r0, #45	; 0x2d
1a001e20:	f000 f88e 	bl	1a001f40 <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a001e24:	2100      	movs	r1, #0
1a001e26:	202e      	movs	r0, #46	; 0x2e
1a001e28:	f000 f88a 	bl	1a001f40 <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a001e2c:	2100      	movs	r1, #0
1a001e2e:	202f      	movs	r0, #47	; 0x2f
1a001e30:	f000 f886 	bl	1a001f40 <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a001e34:	2100      	movs	r1, #0
1a001e36:	2030      	movs	r0, #48	; 0x30
1a001e38:	f000 f882 	bl	1a001f40 <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a001e3c:	2100      	movs	r1, #0
1a001e3e:	2031      	movs	r0, #49	; 0x31
1a001e40:	f000 f87e 	bl	1a001f40 <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a001e44:	2100      	movs	r1, #0
1a001e46:	2032      	movs	r0, #50	; 0x32
1a001e48:	f000 f87a 	bl	1a001f40 <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a001e4c:	2100      	movs	r1, #0
1a001e4e:	2033      	movs	r0, #51	; 0x33
1a001e50:	f000 f876 	bl	1a001f40 <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a001e54:	2100      	movs	r1, #0
1a001e56:	2034      	movs	r0, #52	; 0x34
1a001e58:	f000 f872 	bl	1a001f40 <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a001e5c:	2100      	movs	r1, #0
1a001e5e:	2035      	movs	r0, #53	; 0x35
1a001e60:	f000 f86e 	bl	1a001f40 <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a001e64:	2101      	movs	r1, #1
1a001e66:	2036      	movs	r0, #54	; 0x36
1a001e68:	f000 f86a 	bl	1a001f40 <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a001e6c:	2101      	movs	r1, #1
1a001e6e:	2037      	movs	r0, #55	; 0x37
1a001e70:	f000 f866 	bl	1a001f40 <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a001e74:	2101      	movs	r1, #1
1a001e76:	2038      	movs	r0, #56	; 0x38
1a001e78:	f000 f862 	bl	1a001f40 <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a001e7c:	2101      	movs	r1, #1
1a001e7e:	2039      	movs	r0, #57	; 0x39
1a001e80:	f000 f85e 	bl	1a001f40 <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a001e84:	2101      	movs	r1, #1
1a001e86:	203a      	movs	r0, #58	; 0x3a
1a001e88:	f000 f85a 	bl	1a001f40 <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a001e8c:	2101      	movs	r1, #1
1a001e8e:	203b      	movs	r0, #59	; 0x3b
1a001e90:	f000 f856 	bl	1a001f40 <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a001e94:	2101      	movs	r1, #1
1a001e96:	203c      	movs	r0, #60	; 0x3c
1a001e98:	f000 f852 	bl	1a001f40 <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a001e9c:	2101      	movs	r1, #1
1a001e9e:	203d      	movs	r0, #61	; 0x3d
1a001ea0:	f000 f84e 	bl	1a001f40 <gpioConfig>
1a001ea4:	bd08      	pop	{r3, pc}

1a001ea6 <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a001ea6:	2001      	movs	r0, #1
1a001ea8:	4770      	bx	lr
1a001eaa:	Address 0x1a001eaa is out of bounds.


1a001eac <delayConfig>:
 }


/* ---- Non Blocking Delay ---- */

void delayConfig( delay_t * delay, tick_t duration ){
1a001eac:	b510      	push	{r4, lr}
1a001eae:	4604      	mov	r4, r0
1a001eb0:	4610      	mov	r0, r2
1a001eb2:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001eb4:	4b04      	ldr	r3, [pc, #16]	; (1a001ec8 <delayConfig+0x1c>)
1a001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001eba:	f000 faa3 	bl	1a002404 <__aeabi_uldivmod>
1a001ebe:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001ec2:	2300      	movs	r3, #0
1a001ec4:	7423      	strb	r3, [r4, #16]
1a001ec6:	bd10      	pop	{r4, pc}
1a001ec8:	100001b0 	.word	0x100001b0

1a001ecc <delayRead>:
}

bool_t delayRead( delay_t * delay ){
1a001ecc:	b538      	push	{r3, r4, r5, lr}
1a001ece:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ){
1a001ed0:	7c05      	ldrb	r5, [r0, #16]
1a001ed2:	b185      	cbz	r5, 1a001ef6 <delayRead+0x2a>
      delay->startTime = tickRead();
      delay->running = 1;
   }
   else{
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ){
1a001ed4:	f000 f98a 	bl	1a0021ec <tickRead>
1a001ed8:	e9d4 2300 	ldrd	r2, r3, [r4]
1a001edc:	1a80      	subs	r0, r0, r2
1a001ede:	eb61 0103 	sbc.w	r1, r1, r3
1a001ee2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001ee6:	4299      	cmp	r1, r3
1a001ee8:	bf08      	it	eq
1a001eea:	4290      	cmpeq	r0, r2
1a001eec:	d30b      	bcc.n	1a001f06 <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a001eee:	2300      	movs	r3, #0
1a001ef0:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001ef2:	2501      	movs	r5, #1
1a001ef4:	e005      	b.n	1a001f02 <delayRead+0x36>
      delay->startTime = tickRead();
1a001ef6:	f000 f979 	bl	1a0021ec <tickRead>
1a001efa:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a001efe:	2301      	movs	r3, #1
1a001f00:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a001f02:	4628      	mov	r0, r5
1a001f04:	bd38      	pop	{r3, r4, r5, pc}
   bool_t timeArrived = 0;
1a001f06:	2500      	movs	r5, #0
1a001f08:	e7fb      	b.n	1a001f02 <delayRead+0x36>
1a001f0a:	Address 0x1a001f0a is out of bounds.


1a001f0c <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a001f0c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a001f0e:	4d0b      	ldr	r5, [pc, #44]	; (1a001f3c <gpioObtainPinConfig+0x30>)
1a001f10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001f14:	182c      	adds	r4, r5, r0
1a001f16:	5628      	ldrsb	r0, [r5, r0]
1a001f18:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a001f1a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001f1e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a001f20:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001f24:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a001f26:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001f2a:	9b02      	ldr	r3, [sp, #8]
1a001f2c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a001f2e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001f32:	9b03      	ldr	r3, [sp, #12]
1a001f34:	701a      	strb	r2, [r3, #0]
}
1a001f36:	bc30      	pop	{r4, r5}
1a001f38:	4770      	bx	lr
1a001f3a:	bf00      	nop
1a001f3c:	1a003078 	.word	0x1a003078

1a001f40 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a001f40:	b530      	push	{r4, r5, lr}
1a001f42:	b085      	sub	sp, #20
1a001f44:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001f46:	2300      	movs	r3, #0
1a001f48:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001f4c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001f50:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001f54:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001f58:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001f5c:	f10d 030b 	add.w	r3, sp, #11
1a001f60:	9301      	str	r3, [sp, #4]
1a001f62:	ab03      	add	r3, sp, #12
1a001f64:	9300      	str	r3, [sp, #0]
1a001f66:	f10d 030d 	add.w	r3, sp, #13
1a001f6a:	f10d 020e 	add.w	r2, sp, #14
1a001f6e:	f10d 010f 	add.w	r1, sp, #15
1a001f72:	f7ff ffcb 	bl	1a001f0c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a001f76:	2c05      	cmp	r4, #5
1a001f78:	f200 8096 	bhi.w	1a0020a8 <gpioConfig+0x168>
1a001f7c:	e8df f004 	tbb	[pc, r4]
1a001f80:	3d237109 	.word	0x3d237109
1a001f84:	0357      	.short	0x0357

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001f86:	4849      	ldr	r0, [pc, #292]	; (1a0020ac <gpioConfig+0x16c>)
1a001f88:	f7ff fd10 	bl	1a0019ac <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001f8c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001f8e:	b005      	add	sp, #20
1a001f90:	bd30      	pop	{r4, r5, pc}
         Chip_SCU_PinMux(
1a001f92:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001f96:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001f9a:	f89d 200d 	ldrb.w	r2, [sp, #13]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001f9e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001fa2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001fa6:	4942      	ldr	r1, [pc, #264]	; (1a0020b0 <gpioConfig+0x170>)
1a001fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001fac:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001fb0:	2401      	movs	r4, #1
1a001fb2:	2300      	movs	r3, #0
1a001fb4:	fa04 f202 	lsl.w	r2, r4, r2
1a001fb8:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001fbc:	483b      	ldr	r0, [pc, #236]	; (1a0020ac <gpioConfig+0x16c>)
1a001fbe:	f7ff fcf6 	bl	1a0019ae <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001fc2:	4620      	mov	r0, r4
      break;
1a001fc4:	e7e3      	b.n	1a001f8e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001fc6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001fca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001fce:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001fd2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001fd6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001fda:	4935      	ldr	r1, [pc, #212]	; (1a0020b0 <gpioConfig+0x170>)
1a001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001fe0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001fe4:	2401      	movs	r4, #1
1a001fe6:	2300      	movs	r3, #0
1a001fe8:	fa04 f202 	lsl.w	r2, r4, r2
1a001fec:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001ff0:	482e      	ldr	r0, [pc, #184]	; (1a0020ac <gpioConfig+0x16c>)
1a001ff2:	f7ff fcdc 	bl	1a0019ae <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001ff6:	4620      	mov	r0, r4
      break;
1a001ff8:	e7c9      	b.n	1a001f8e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a001ffa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ffe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002002:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002006:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00200a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00200e:	4928      	ldr	r1, [pc, #160]	; (1a0020b0 <gpioConfig+0x170>)
1a002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002014:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002018:	2401      	movs	r4, #1
1a00201a:	2300      	movs	r3, #0
1a00201c:	fa04 f202 	lsl.w	r2, r4, r2
1a002020:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a002024:	4821      	ldr	r0, [pc, #132]	; (1a0020ac <gpioConfig+0x16c>)
1a002026:	f7ff fcc2 	bl	1a0019ae <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00202a:	4620      	mov	r0, r4
      break;
1a00202c:	e7af      	b.n	1a001f8e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a00202e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002032:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002036:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00203a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00203e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002042:	491b      	ldr	r1, [pc, #108]	; (1a0020b0 <gpioConfig+0x170>)
1a002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002048:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00204c:	2401      	movs	r4, #1
1a00204e:	2300      	movs	r3, #0
1a002050:	fa04 f202 	lsl.w	r2, r4, r2
1a002054:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a002058:	4814      	ldr	r0, [pc, #80]	; (1a0020ac <gpioConfig+0x16c>)
1a00205a:	f7ff fca8 	bl	1a0019ae <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00205e:	4620      	mov	r0, r4
      break;
1a002060:	e795      	b.n	1a001f8e <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a002062:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002066:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00206a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00206e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002072:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002076:	490e      	ldr	r1, [pc, #56]	; (1a0020b0 <gpioConfig+0x170>)
1a002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00207c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002080:	2401      	movs	r4, #1
1a002082:	4d0a      	ldr	r5, [pc, #40]	; (1a0020ac <gpioConfig+0x16c>)
1a002084:	4623      	mov	r3, r4
1a002086:	fa04 f202 	lsl.w	r2, r4, r2
1a00208a:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a00208e:	4628      	mov	r0, r5
1a002090:	f7ff fc8d 	bl	1a0019ae <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a002094:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a002098:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00209c:	eb05 1542 	add.w	r5, r5, r2, lsl #5
1a0020a0:	2200      	movs	r2, #0
1a0020a2:	54ea      	strb	r2, [r5, r3]
   bool_t ret_val     = 1;
1a0020a4:	4620      	mov	r0, r4
1a0020a6:	e772      	b.n	1a001f8e <gpioConfig+0x4e>
         ret_val = 0;
1a0020a8:	2000      	movs	r0, #0
1a0020aa:	e770      	b.n	1a001f8e <gpioConfig+0x4e>
1a0020ac:	400f4000 	.word	0x400f4000
1a0020b0:	40086000 	.word	0x40086000

1a0020b4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a0020b4:	b510      	push	{r4, lr}
1a0020b6:	b084      	sub	sp, #16
1a0020b8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0020ba:	2300      	movs	r3, #0
1a0020bc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0020c0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0020c4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0020c8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0020cc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a0020d0:	f10d 030b 	add.w	r3, sp, #11
1a0020d4:	9301      	str	r3, [sp, #4]
1a0020d6:	ab03      	add	r3, sp, #12
1a0020d8:	9300      	str	r3, [sp, #0]
1a0020da:	f10d 030d 	add.w	r3, sp, #13
1a0020de:	f10d 020e 	add.w	r2, sp, #14
1a0020e2:	f10d 010f 	add.w	r1, sp, #15
1a0020e6:	f7ff ff11 	bl	1a001f0c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0020ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0020ee:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0020f2:	3400      	adds	r4, #0
1a0020f4:	bf18      	it	ne
1a0020f6:	2401      	movne	r4, #1
1a0020f8:	015b      	lsls	r3, r3, #5
1a0020fa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0020fe:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002102:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002104:	2001      	movs	r0, #1
1a002106:	b004      	add	sp, #16
1a002108:	bd10      	pop	{r4, pc}

1a00210a <gpioRead>:

   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin ){
1a00210a:	b500      	push	{lr}
1a00210c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00210e:	2300      	movs	r3, #0
1a002110:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002114:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002118:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00211c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002120:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a002124:	f10d 030b 	add.w	r3, sp, #11
1a002128:	9301      	str	r3, [sp, #4]
1a00212a:	ab03      	add	r3, sp, #12
1a00212c:	9300      	str	r3, [sp, #0]
1a00212e:	f10d 030d 	add.w	r3, sp, #13
1a002132:	f10d 020e 	add.w	r2, sp, #14
1a002136:	f10d 010f 	add.w	r1, sp, #15
1a00213a:	f7ff fee7 	bl	1a001f0c <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00213e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a002142:	f89d 200b 	ldrb.w	r2, [sp, #11]
   return (bool) pGPIO->B[port][pin];
1a002146:	015b      	lsls	r3, r3, #5
1a002148:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00214c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a002150:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a002152:	3000      	adds	r0, #0
1a002154:	bf18      	it	ne
1a002156:	2001      	movne	r0, #1
1a002158:	b005      	add	sp, #20
1a00215a:	f85d fb04 	ldr.w	pc, [sp], #4

1a00215e <gpioToggle>:
bool_t gpioToggle( gpioMap_t pin ){
1a00215e:	b510      	push	{r4, lr}
1a002160:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a002162:	f7ff ffd2 	bl	1a00210a <gpioRead>
1a002166:	fab0 f180 	clz	r1, r0
1a00216a:	0949      	lsrs	r1, r1, #5
1a00216c:	4620      	mov	r0, r4
1a00216e:	f7ff ffa1 	bl	1a0020b4 <gpioWrite>
}
1a002172:	bd10      	pop	{r4, pc}

1a002174 <tickConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig( tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {
1a002174:	b508      	push	{r3, lr}

   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ){
1a002176:	b112      	cbz	r2, 1a00217e <tickConfig+0xa>
1a002178:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a00217a:	4a17      	ldr	r2, [pc, #92]	; (1a0021d8 <tickConfig+0x64>)
1a00217c:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ){
1a00217e:	f110 32ff 	adds.w	r2, r0, #4294967295
1a002182:	f141 33ff 	adc.w	r3, r1, #4294967295
1a002186:	2b00      	cmp	r3, #0
1a002188:	bf08      	it	eq
1a00218a:	2a32      	cmpeq	r2, #50	; 0x32
1a00218c:	d220      	bcs.n	1a0021d0 <tickConfig+0x5c>
1a00218e:	4602      	mov	r2, r0
1a002190:	460b      	mov	r3, r1

		tickRateMS = tickRateMSvalue;
1a002192:	4912      	ldr	r1, [pc, #72]	; (1a0021dc <tickConfig+0x68>)
1a002194:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a002198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00219c:	2100      	movs	r1, #0
1a00219e:	f000 f931 	bl	1a002404 <__aeabi_uldivmod>

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a0021a2:	4602      	mov	r2, r0
1a0021a4:	460b      	mov	r3, r1
1a0021a6:	490e      	ldr	r1, [pc, #56]	; (1a0021e0 <tickConfig+0x6c>)
1a0021a8:	6808      	ldr	r0, [r1, #0]
1a0021aa:	2100      	movs	r1, #0
1a0021ac:	f000 f92a 	bl	1a002404 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a0021b0:	3801      	subs	r0, #1
1a0021b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0021b6:	d20d      	bcs.n	1a0021d4 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a0021b8:	4b0a      	ldr	r3, [pc, #40]	; (1a0021e4 <tickConfig+0x70>)
1a0021ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a0021bc:	21e0      	movs	r1, #224	; 0xe0
1a0021be:	4a0a      	ldr	r2, [pc, #40]	; (1a0021e8 <tickConfig+0x74>)
1a0021c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a0021c4:	2200      	movs	r2, #0
1a0021c6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0021c8:	2207      	movs	r2, #7
1a0021ca:	601a      	str	r2, [r3, #0]
   bool_t ret_val = 1;
1a0021cc:	2001      	movs	r0, #1
1a0021ce:	bd08      	pop	{r3, pc}
   }
   else{
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a0021d0:	2000      	movs	r0, #0
1a0021d2:	bd08      	pop	{r3, pc}
   bool_t ret_val = 1;
1a0021d4:	2001      	movs	r0, #1
   }

   return ret_val;
}
1a0021d6:	bd08      	pop	{r3, pc}
1a0021d8:	10000000 	.word	0x10000000
1a0021dc:	100001b0 	.word	0x100001b0
1a0021e0:	100001a4 	.word	0x100001a4
1a0021e4:	e000e010 	.word	0xe000e010
1a0021e8:	e000ed00 	.word	0xe000ed00

1a0021ec <tickRead>:


/* Read Tick Counter */
tick_t tickRead( void ) {
   return tickCounter;
}
1a0021ec:	4b01      	ldr	r3, [pc, #4]	; (1a0021f4 <tickRead+0x8>)
1a0021ee:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0021f2:	4770      	bx	lr
1a0021f4:	100001a8 	.word	0x100001a8

1a0021f8 <SysTick_Handler>:
/*==================[ISR external functions definition]======================*/

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void SysTick_Handler(void) {
1a0021f8:	b508      	push	{r3, lr}
   tickCounter++;
1a0021fa:	4906      	ldr	r1, [pc, #24]	; (1a002214 <SysTick_Handler+0x1c>)
1a0021fc:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002200:	3201      	adds	r2, #1
1a002202:	f143 0300 	adc.w	r3, r3, #0
1a002206:	e9c1 2300 	strd	r2, r3, [r1]

	/* Execute Tick Hook function */
	(* tickHookFunction )( 0 );
1a00220a:	4b03      	ldr	r3, [pc, #12]	; (1a002218 <SysTick_Handler+0x20>)
1a00220c:	681b      	ldr	r3, [r3, #0]
1a00220e:	2000      	movs	r0, #0
1a002210:	4798      	blx	r3
1a002212:	bd08      	pop	{r3, pc}
1a002214:	100001a8 	.word	0x100001a8
1a002218:	10000000 	.word	0x10000000

1a00221c <errorOcurred>:
/*==================[internal functions definition]==========================*/

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
1a00221c:	e7fe      	b.n	1a00221c <errorOcurred>

1a00221e <doNothing>:
   while(1);
}

static void doNothing(void){
1a00221e:	4770      	bx	lr

1a002220 <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a002220:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002222:	2400      	movs	r4, #0
1a002224:	e001      	b.n	1a00222a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a002226:	3401      	adds	r4, #1
1a002228:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00222a:	2c03      	cmp	r4, #3
1a00222c:	d812      	bhi.n	1a002254 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a00222e:	b265      	sxtb	r5, r4
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002230:	4b09      	ldr	r3, [pc, #36]	; (1a002258 <TIMER0_IRQHandler+0x38>)
1a002232:	681a      	ldr	r2, [r3, #0]
1a002234:	f004 010f 	and.w	r1, r4, #15
1a002238:	2301      	movs	r3, #1
1a00223a:	408b      	lsls	r3, r1
1a00223c:	421a      	tst	r2, r3
1a00223e:	d0f2      	beq.n	1a002226 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a002240:	4b06      	ldr	r3, [pc, #24]	; (1a00225c <TIMER0_IRQHandler+0x3c>)
1a002242:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a002246:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a002248:	2301      	movs	r3, #1
1a00224a:	fa03 f505 	lsl.w	r5, r3, r5
1a00224e:	4b02      	ldr	r3, [pc, #8]	; (1a002258 <TIMER0_IRQHandler+0x38>)
1a002250:	601d      	str	r5, [r3, #0]
1a002252:	e7e8      	b.n	1a002226 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002254:	bd38      	pop	{r3, r4, r5, pc}
1a002256:	bf00      	nop
1a002258:	40084000 	.word	0x40084000
1a00225c:	10000004 	.word	0x10000004

1a002260 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a002260:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002262:	2400      	movs	r4, #0
1a002264:	e001      	b.n	1a00226a <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a002266:	3401      	adds	r4, #1
1a002268:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00226a:	2c03      	cmp	r4, #3
1a00226c:	d813      	bhi.n	1a002296 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a00226e:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002270:	4b09      	ldr	r3, [pc, #36]	; (1a002298 <TIMER1_IRQHandler+0x38>)
1a002272:	681a      	ldr	r2, [r3, #0]
1a002274:	f004 010f 	and.w	r1, r4, #15
1a002278:	2301      	movs	r3, #1
1a00227a:	408b      	lsls	r3, r1
1a00227c:	421a      	tst	r2, r3
1a00227e:	d0f2      	beq.n	1a002266 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a002280:	1d23      	adds	r3, r4, #4
1a002282:	4a06      	ldr	r2, [pc, #24]	; (1a00229c <TIMER1_IRQHandler+0x3c>)
1a002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002288:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a00228a:	2301      	movs	r3, #1
1a00228c:	fa03 f505 	lsl.w	r5, r3, r5
1a002290:	4b01      	ldr	r3, [pc, #4]	; (1a002298 <TIMER1_IRQHandler+0x38>)
1a002292:	601d      	str	r5, [r3, #0]
1a002294:	e7e7      	b.n	1a002266 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002296:	bd38      	pop	{r3, r4, r5, pc}
1a002298:	40085000 	.word	0x40085000
1a00229c:	10000004 	.word	0x10000004

1a0022a0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a0022a0:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0022a2:	2400      	movs	r4, #0
1a0022a4:	e001      	b.n	1a0022aa <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0022a6:	3401      	adds	r4, #1
1a0022a8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0022aa:	2c03      	cmp	r4, #3
1a0022ac:	d814      	bhi.n	1a0022d8 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a0022ae:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0022b0:	4b0a      	ldr	r3, [pc, #40]	; (1a0022dc <TIMER2_IRQHandler+0x3c>)
1a0022b2:	681a      	ldr	r2, [r3, #0]
1a0022b4:	f004 010f 	and.w	r1, r4, #15
1a0022b8:	2301      	movs	r3, #1
1a0022ba:	408b      	lsls	r3, r1
1a0022bc:	421a      	tst	r2, r3
1a0022be:	d0f2      	beq.n	1a0022a6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0022c0:	f104 0308 	add.w	r3, r4, #8
1a0022c4:	4a06      	ldr	r2, [pc, #24]	; (1a0022e0 <TIMER2_IRQHandler+0x40>)
1a0022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0022ca:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0022cc:	2301      	movs	r3, #1
1a0022ce:	fa03 f505 	lsl.w	r5, r3, r5
1a0022d2:	4b02      	ldr	r3, [pc, #8]	; (1a0022dc <TIMER2_IRQHandler+0x3c>)
1a0022d4:	601d      	str	r5, [r3, #0]
1a0022d6:	e7e6      	b.n	1a0022a6 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0022d8:	bd38      	pop	{r3, r4, r5, pc}
1a0022da:	bf00      	nop
1a0022dc:	400c3000 	.word	0x400c3000
1a0022e0:	10000004 	.word	0x10000004

1a0022e4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a0022e4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0022e6:	2400      	movs	r4, #0
1a0022e8:	e001      	b.n	1a0022ee <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0022ea:	3401      	adds	r4, #1
1a0022ec:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0022ee:	2c03      	cmp	r4, #3
1a0022f0:	d814      	bhi.n	1a00231c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a0022f2:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0022f4:	4b0a      	ldr	r3, [pc, #40]	; (1a002320 <TIMER3_IRQHandler+0x3c>)
1a0022f6:	681a      	ldr	r2, [r3, #0]
1a0022f8:	f004 010f 	and.w	r1, r4, #15
1a0022fc:	2301      	movs	r3, #1
1a0022fe:	408b      	lsls	r3, r1
1a002300:	421a      	tst	r2, r3
1a002302:	d0f2      	beq.n	1a0022ea <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a002304:	f104 030c 	add.w	r3, r4, #12
1a002308:	4a06      	ldr	r2, [pc, #24]	; (1a002324 <TIMER3_IRQHandler+0x40>)
1a00230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00230e:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a002310:	2301      	movs	r3, #1
1a002312:	fa03 f505 	lsl.w	r5, r3, r5
1a002316:	4b02      	ldr	r3, [pc, #8]	; (1a002320 <TIMER3_IRQHandler+0x3c>)
1a002318:	601d      	str	r5, [r3, #0]
1a00231a:	e7e6      	b.n	1a0022ea <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a00231c:	bd38      	pop	{r3, r4, r5, pc}
1a00231e:	bf00      	nop
1a002320:	400c4000 	.word	0x400c4000
1a002324:	10000004 	.word	0x10000004

1a002328 <uartConfig>:
void uartConfig( uartMap_t uart, uint32_t baudRate ){
1a002328:	b538      	push	{r3, r4, r5, lr}
1a00232a:	460c      	mov	r4, r1
   switch(uart){
1a00232c:	b110      	cbz	r0, 1a002334 <uartConfig+0xc>
1a00232e:	2801      	cmp	r0, #1
1a002330:	d013      	beq.n	1a00235a <uartConfig+0x32>
1a002332:	bd38      	pop	{r3, r4, r5, pc}
      Chip_UART_Init(UART_USB_LPC);
1a002334:	4d12      	ldr	r5, [pc, #72]	; (1a002380 <uartConfig+0x58>)
1a002336:	4628      	mov	r0, r5
1a002338:	f7ff fc0e 	bl	1a001b58 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_USB_LPC, baudRate);  /* Set Baud rate */
1a00233c:	4621      	mov	r1, r4
1a00233e:	4628      	mov	r0, r5
1a002340:	f7ff fc34 	bl	1a001bac <Chip_UART_SetBaud>
   pUART->FCR = fcr;
1a002344:	2301      	movs	r3, #1
1a002346:	60ab      	str	r3, [r5, #8]
    pUART->TER2 = UART_TER2_TXEN;
1a002348:	65eb      	str	r3, [r5, #92]	; 0x5c
1a00234a:	4b0e      	ldr	r3, [pc, #56]	; (1a002384 <uartConfig+0x5c>)
1a00234c:	221e      	movs	r2, #30
1a00234e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
1a002352:	22d6      	movs	r2, #214	; 0xd6
1a002354:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
1a002358:	bd38      	pop	{r3, r4, r5, pc}
      Chip_UART_Init(UART_232_LPC);
1a00235a:	4d0b      	ldr	r5, [pc, #44]	; (1a002388 <uartConfig+0x60>)
1a00235c:	4628      	mov	r0, r5
1a00235e:	f7ff fbfb 	bl	1a001b58 <Chip_UART_Init>
      Chip_UART_SetBaud(UART_232_LPC, baudRate);  /* Set Baud rate */
1a002362:	4621      	mov	r1, r4
1a002364:	4628      	mov	r0, r5
1a002366:	f7ff fc21 	bl	1a001bac <Chip_UART_SetBaud>
   pUART->FCR = fcr;
1a00236a:	2301      	movs	r3, #1
1a00236c:	60ab      	str	r3, [r5, #8]
    pUART->TER2 = UART_TER2_TXEN;
1a00236e:	65eb      	str	r3, [r5, #92]	; 0x5c
1a002370:	4b04      	ldr	r3, [pc, #16]	; (1a002384 <uartConfig+0x5c>)
1a002372:	221a      	movs	r2, #26
1a002374:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
1a002378:	22d2      	movs	r2, #210	; 0xd2
1a00237a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
1a00237e:	bd38      	pop	{r3, r4, r5, pc}
1a002380:	400c1000 	.word	0x400c1000
1a002384:	40086000 	.word	0x40086000
1a002388:	400c2000 	.word	0x400c2000

1a00238c <uartReadByte>:
   switch(uart){
1a00238c:	b118      	cbz	r0, 1a002396 <uartReadByte+0xa>
1a00238e:	2801      	cmp	r0, #1
1a002390:	d00b      	beq.n	1a0023aa <uartReadByte+0x1e>
   bool_t retVal = TRUE;
1a002392:	2001      	movs	r0, #1
1a002394:	4770      	bx	lr
 * @note   Mask bits of the returned status value with UART_LSR_*
 *         definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
   return pUART->LSR;
1a002396:	4b0c      	ldr	r3, [pc, #48]	; (1a0023c8 <uartReadByte+0x3c>)
1a002398:	695b      	ldr	r3, [r3, #20]
      if ( Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_RDR ) {
1a00239a:	f013 0f01 	tst.w	r3, #1
1a00239e:	d00e      	beq.n	1a0023be <uartReadByte+0x32>
   return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0023a0:	4b09      	ldr	r3, [pc, #36]	; (1a0023c8 <uartReadByte+0x3c>)
1a0023a2:	681b      	ldr	r3, [r3, #0]
         *receivedByte = Chip_UART_ReadByte(UART_USB_LPC);
1a0023a4:	700b      	strb	r3, [r1, #0]
   bool_t retVal = TRUE;
1a0023a6:	2001      	movs	r0, #1
1a0023a8:	4770      	bx	lr
   return pUART->LSR;
1a0023aa:	4b08      	ldr	r3, [pc, #32]	; (1a0023cc <uartReadByte+0x40>)
1a0023ac:	695b      	ldr	r3, [r3, #20]
      if ( Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_RDR ) {
1a0023ae:	f013 0f01 	tst.w	r3, #1
1a0023b2:	d006      	beq.n	1a0023c2 <uartReadByte+0x36>
   return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0023b4:	4b05      	ldr	r3, [pc, #20]	; (1a0023cc <uartReadByte+0x40>)
1a0023b6:	681b      	ldr	r3, [r3, #0]
         *receivedByte = Chip_UART_ReadByte(UART_232_LPC);
1a0023b8:	700b      	strb	r3, [r1, #0]
   bool_t retVal = TRUE;
1a0023ba:	2001      	movs	r0, #1
1a0023bc:	4770      	bx	lr
         retVal = FALSE;
1a0023be:	2000      	movs	r0, #0
1a0023c0:	4770      	bx	lr
         retVal = FALSE;
1a0023c2:	2000      	movs	r0, #0
}
1a0023c4:	4770      	bx	lr
1a0023c6:	bf00      	nop
1a0023c8:	400c1000 	.word	0x400c1000
1a0023cc:	400c2000 	.word	0x400c2000

1a0023d0 <uartWriteByte>:
   switch(uart){
1a0023d0:	b110      	cbz	r0, 1a0023d8 <uartWriteByte+0x8>
1a0023d2:	2801      	cmp	r0, #1
1a0023d4:	d008      	beq.n	1a0023e8 <uartWriteByte+0x18>
1a0023d6:	4770      	bx	lr
   return pUART->LSR;
1a0023d8:	4b07      	ldr	r3, [pc, #28]	; (1a0023f8 <uartWriteByte+0x28>)
1a0023da:	695b      	ldr	r3, [r3, #20]
      while ((Chip_UART_ReadLineStatus(UART_USB_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a0023dc:	f013 0f20 	tst.w	r3, #32
1a0023e0:	d0fa      	beq.n	1a0023d8 <uartWriteByte+0x8>
   pUART->THR = (uint32_t) data;
1a0023e2:	4b05      	ldr	r3, [pc, #20]	; (1a0023f8 <uartWriteByte+0x28>)
1a0023e4:	6019      	str	r1, [r3, #0]
1a0023e6:	4770      	bx	lr
   return pUART->LSR;
1a0023e8:	4b04      	ldr	r3, [pc, #16]	; (1a0023fc <uartWriteByte+0x2c>)
1a0023ea:	695b      	ldr	r3, [r3, #20]
      while ((Chip_UART_ReadLineStatus(UART_232_LPC) & UART_LSR_THRE) == 0) {}   // Wait for space in FIFO
1a0023ec:	f013 0f20 	tst.w	r3, #32
1a0023f0:	d0fa      	beq.n	1a0023e8 <uartWriteByte+0x18>
   pUART->THR = (uint32_t) data;
1a0023f2:	4b02      	ldr	r3, [pc, #8]	; (1a0023fc <uartWriteByte+0x2c>)
1a0023f4:	6019      	str	r1, [r3, #0]
1a0023f6:	4770      	bx	lr
1a0023f8:	400c1000 	.word	0x400c1000
1a0023fc:	400c2000 	.word	0x400c2000

1a002400 <UART2_IRQHandler>:
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a002400:	4770      	bx	lr

1a002402 <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a002402:	4770      	bx	lr

1a002404 <__aeabi_uldivmod>:
1a002404:	b953      	cbnz	r3, 1a00241c <__aeabi_uldivmod+0x18>
1a002406:	b94a      	cbnz	r2, 1a00241c <__aeabi_uldivmod+0x18>
1a002408:	2900      	cmp	r1, #0
1a00240a:	bf08      	it	eq
1a00240c:	2800      	cmpeq	r0, #0
1a00240e:	bf1c      	itt	ne
1a002410:	f04f 31ff 	movne.w	r1, #4294967295
1a002414:	f04f 30ff 	movne.w	r0, #4294967295
1a002418:	f000 b97a 	b.w	1a002710 <__aeabi_idiv0>
1a00241c:	f1ad 0c08 	sub.w	ip, sp, #8
1a002420:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002424:	f000 f806 	bl	1a002434 <__udivmoddi4>
1a002428:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00242c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002430:	b004      	add	sp, #16
1a002432:	4770      	bx	lr

1a002434 <__udivmoddi4>:
1a002434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002438:	468c      	mov	ip, r1
1a00243a:	460d      	mov	r5, r1
1a00243c:	4604      	mov	r4, r0
1a00243e:	9e08      	ldr	r6, [sp, #32]
1a002440:	2b00      	cmp	r3, #0
1a002442:	d151      	bne.n	1a0024e8 <__udivmoddi4+0xb4>
1a002444:	428a      	cmp	r2, r1
1a002446:	4617      	mov	r7, r2
1a002448:	d96d      	bls.n	1a002526 <__udivmoddi4+0xf2>
1a00244a:	fab2 fe82 	clz	lr, r2
1a00244e:	f1be 0f00 	cmp.w	lr, #0
1a002452:	d00b      	beq.n	1a00246c <__udivmoddi4+0x38>
1a002454:	f1ce 0c20 	rsb	ip, lr, #32
1a002458:	fa01 f50e 	lsl.w	r5, r1, lr
1a00245c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002460:	fa02 f70e 	lsl.w	r7, r2, lr
1a002464:	ea4c 0c05 	orr.w	ip, ip, r5
1a002468:	fa00 f40e 	lsl.w	r4, r0, lr
1a00246c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a002470:	0c25      	lsrs	r5, r4, #16
1a002472:	fbbc f8fa 	udiv	r8, ip, sl
1a002476:	fa1f f987 	uxth.w	r9, r7
1a00247a:	fb0a cc18 	mls	ip, sl, r8, ip
1a00247e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a002482:	fb08 f309 	mul.w	r3, r8, r9
1a002486:	42ab      	cmp	r3, r5
1a002488:	d90a      	bls.n	1a0024a0 <__udivmoddi4+0x6c>
1a00248a:	19ed      	adds	r5, r5, r7
1a00248c:	f108 32ff 	add.w	r2, r8, #4294967295
1a002490:	f080 8123 	bcs.w	1a0026da <__udivmoddi4+0x2a6>
1a002494:	42ab      	cmp	r3, r5
1a002496:	f240 8120 	bls.w	1a0026da <__udivmoddi4+0x2a6>
1a00249a:	f1a8 0802 	sub.w	r8, r8, #2
1a00249e:	443d      	add	r5, r7
1a0024a0:	1aed      	subs	r5, r5, r3
1a0024a2:	b2a4      	uxth	r4, r4
1a0024a4:	fbb5 f0fa 	udiv	r0, r5, sl
1a0024a8:	fb0a 5510 	mls	r5, sl, r0, r5
1a0024ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a0024b0:	fb00 f909 	mul.w	r9, r0, r9
1a0024b4:	45a1      	cmp	r9, r4
1a0024b6:	d909      	bls.n	1a0024cc <__udivmoddi4+0x98>
1a0024b8:	19e4      	adds	r4, r4, r7
1a0024ba:	f100 33ff 	add.w	r3, r0, #4294967295
1a0024be:	f080 810a 	bcs.w	1a0026d6 <__udivmoddi4+0x2a2>
1a0024c2:	45a1      	cmp	r9, r4
1a0024c4:	f240 8107 	bls.w	1a0026d6 <__udivmoddi4+0x2a2>
1a0024c8:	3802      	subs	r0, #2
1a0024ca:	443c      	add	r4, r7
1a0024cc:	eba4 0409 	sub.w	r4, r4, r9
1a0024d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a0024d4:	2100      	movs	r1, #0
1a0024d6:	2e00      	cmp	r6, #0
1a0024d8:	d061      	beq.n	1a00259e <__udivmoddi4+0x16a>
1a0024da:	fa24 f40e 	lsr.w	r4, r4, lr
1a0024de:	2300      	movs	r3, #0
1a0024e0:	6034      	str	r4, [r6, #0]
1a0024e2:	6073      	str	r3, [r6, #4]
1a0024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0024e8:	428b      	cmp	r3, r1
1a0024ea:	d907      	bls.n	1a0024fc <__udivmoddi4+0xc8>
1a0024ec:	2e00      	cmp	r6, #0
1a0024ee:	d054      	beq.n	1a00259a <__udivmoddi4+0x166>
1a0024f0:	2100      	movs	r1, #0
1a0024f2:	e886 0021 	stmia.w	r6, {r0, r5}
1a0024f6:	4608      	mov	r0, r1
1a0024f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0024fc:	fab3 f183 	clz	r1, r3
1a002500:	2900      	cmp	r1, #0
1a002502:	f040 808e 	bne.w	1a002622 <__udivmoddi4+0x1ee>
1a002506:	42ab      	cmp	r3, r5
1a002508:	d302      	bcc.n	1a002510 <__udivmoddi4+0xdc>
1a00250a:	4282      	cmp	r2, r0
1a00250c:	f200 80fa 	bhi.w	1a002704 <__udivmoddi4+0x2d0>
1a002510:	1a84      	subs	r4, r0, r2
1a002512:	eb65 0503 	sbc.w	r5, r5, r3
1a002516:	2001      	movs	r0, #1
1a002518:	46ac      	mov	ip, r5
1a00251a:	2e00      	cmp	r6, #0
1a00251c:	d03f      	beq.n	1a00259e <__udivmoddi4+0x16a>
1a00251e:	e886 1010 	stmia.w	r6, {r4, ip}
1a002522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002526:	b912      	cbnz	r2, 1a00252e <__udivmoddi4+0xfa>
1a002528:	2701      	movs	r7, #1
1a00252a:	fbb7 f7f2 	udiv	r7, r7, r2
1a00252e:	fab7 fe87 	clz	lr, r7
1a002532:	f1be 0f00 	cmp.w	lr, #0
1a002536:	d134      	bne.n	1a0025a2 <__udivmoddi4+0x16e>
1a002538:	1beb      	subs	r3, r5, r7
1a00253a:	0c3a      	lsrs	r2, r7, #16
1a00253c:	fa1f fc87 	uxth.w	ip, r7
1a002540:	2101      	movs	r1, #1
1a002542:	fbb3 f8f2 	udiv	r8, r3, r2
1a002546:	0c25      	lsrs	r5, r4, #16
1a002548:	fb02 3318 	mls	r3, r2, r8, r3
1a00254c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a002550:	fb0c f308 	mul.w	r3, ip, r8
1a002554:	42ab      	cmp	r3, r5
1a002556:	d907      	bls.n	1a002568 <__udivmoddi4+0x134>
1a002558:	19ed      	adds	r5, r5, r7
1a00255a:	f108 30ff 	add.w	r0, r8, #4294967295
1a00255e:	d202      	bcs.n	1a002566 <__udivmoddi4+0x132>
1a002560:	42ab      	cmp	r3, r5
1a002562:	f200 80d1 	bhi.w	1a002708 <__udivmoddi4+0x2d4>
1a002566:	4680      	mov	r8, r0
1a002568:	1aed      	subs	r5, r5, r3
1a00256a:	b2a3      	uxth	r3, r4
1a00256c:	fbb5 f0f2 	udiv	r0, r5, r2
1a002570:	fb02 5510 	mls	r5, r2, r0, r5
1a002574:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a002578:	fb0c fc00 	mul.w	ip, ip, r0
1a00257c:	45a4      	cmp	ip, r4
1a00257e:	d907      	bls.n	1a002590 <__udivmoddi4+0x15c>
1a002580:	19e4      	adds	r4, r4, r7
1a002582:	f100 33ff 	add.w	r3, r0, #4294967295
1a002586:	d202      	bcs.n	1a00258e <__udivmoddi4+0x15a>
1a002588:	45a4      	cmp	ip, r4
1a00258a:	f200 80b8 	bhi.w	1a0026fe <__udivmoddi4+0x2ca>
1a00258e:	4618      	mov	r0, r3
1a002590:	eba4 040c 	sub.w	r4, r4, ip
1a002594:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a002598:	e79d      	b.n	1a0024d6 <__udivmoddi4+0xa2>
1a00259a:	4631      	mov	r1, r6
1a00259c:	4630      	mov	r0, r6
1a00259e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0025a2:	f1ce 0420 	rsb	r4, lr, #32
1a0025a6:	fa05 f30e 	lsl.w	r3, r5, lr
1a0025aa:	fa07 f70e 	lsl.w	r7, r7, lr
1a0025ae:	fa20 f804 	lsr.w	r8, r0, r4
1a0025b2:	0c3a      	lsrs	r2, r7, #16
1a0025b4:	fa25 f404 	lsr.w	r4, r5, r4
1a0025b8:	ea48 0803 	orr.w	r8, r8, r3
1a0025bc:	fbb4 f1f2 	udiv	r1, r4, r2
1a0025c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a0025c4:	fb02 4411 	mls	r4, r2, r1, r4
1a0025c8:	fa1f fc87 	uxth.w	ip, r7
1a0025cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a0025d0:	fb01 f30c 	mul.w	r3, r1, ip
1a0025d4:	42ab      	cmp	r3, r5
1a0025d6:	fa00 f40e 	lsl.w	r4, r0, lr
1a0025da:	d909      	bls.n	1a0025f0 <__udivmoddi4+0x1bc>
1a0025dc:	19ed      	adds	r5, r5, r7
1a0025de:	f101 30ff 	add.w	r0, r1, #4294967295
1a0025e2:	f080 808a 	bcs.w	1a0026fa <__udivmoddi4+0x2c6>
1a0025e6:	42ab      	cmp	r3, r5
1a0025e8:	f240 8087 	bls.w	1a0026fa <__udivmoddi4+0x2c6>
1a0025ec:	3902      	subs	r1, #2
1a0025ee:	443d      	add	r5, r7
1a0025f0:	1aeb      	subs	r3, r5, r3
1a0025f2:	fa1f f588 	uxth.w	r5, r8
1a0025f6:	fbb3 f0f2 	udiv	r0, r3, r2
1a0025fa:	fb02 3310 	mls	r3, r2, r0, r3
1a0025fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a002602:	fb00 f30c 	mul.w	r3, r0, ip
1a002606:	42ab      	cmp	r3, r5
1a002608:	d907      	bls.n	1a00261a <__udivmoddi4+0x1e6>
1a00260a:	19ed      	adds	r5, r5, r7
1a00260c:	f100 38ff 	add.w	r8, r0, #4294967295
1a002610:	d26f      	bcs.n	1a0026f2 <__udivmoddi4+0x2be>
1a002612:	42ab      	cmp	r3, r5
1a002614:	d96d      	bls.n	1a0026f2 <__udivmoddi4+0x2be>
1a002616:	3802      	subs	r0, #2
1a002618:	443d      	add	r5, r7
1a00261a:	1aeb      	subs	r3, r5, r3
1a00261c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a002620:	e78f      	b.n	1a002542 <__udivmoddi4+0x10e>
1a002622:	f1c1 0720 	rsb	r7, r1, #32
1a002626:	fa22 f807 	lsr.w	r8, r2, r7
1a00262a:	408b      	lsls	r3, r1
1a00262c:	fa05 f401 	lsl.w	r4, r5, r1
1a002630:	ea48 0303 	orr.w	r3, r8, r3
1a002634:	fa20 fe07 	lsr.w	lr, r0, r7
1a002638:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a00263c:	40fd      	lsrs	r5, r7
1a00263e:	ea4e 0e04 	orr.w	lr, lr, r4
1a002642:	fbb5 f9fc 	udiv	r9, r5, ip
1a002646:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a00264a:	fb0c 5519 	mls	r5, ip, r9, r5
1a00264e:	fa1f f883 	uxth.w	r8, r3
1a002652:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a002656:	fb09 f408 	mul.w	r4, r9, r8
1a00265a:	42ac      	cmp	r4, r5
1a00265c:	fa02 f201 	lsl.w	r2, r2, r1
1a002660:	fa00 fa01 	lsl.w	sl, r0, r1
1a002664:	d908      	bls.n	1a002678 <__udivmoddi4+0x244>
1a002666:	18ed      	adds	r5, r5, r3
1a002668:	f109 30ff 	add.w	r0, r9, #4294967295
1a00266c:	d243      	bcs.n	1a0026f6 <__udivmoddi4+0x2c2>
1a00266e:	42ac      	cmp	r4, r5
1a002670:	d941      	bls.n	1a0026f6 <__udivmoddi4+0x2c2>
1a002672:	f1a9 0902 	sub.w	r9, r9, #2
1a002676:	441d      	add	r5, r3
1a002678:	1b2d      	subs	r5, r5, r4
1a00267a:	fa1f fe8e 	uxth.w	lr, lr
1a00267e:	fbb5 f0fc 	udiv	r0, r5, ip
1a002682:	fb0c 5510 	mls	r5, ip, r0, r5
1a002686:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a00268a:	fb00 f808 	mul.w	r8, r0, r8
1a00268e:	45a0      	cmp	r8, r4
1a002690:	d907      	bls.n	1a0026a2 <__udivmoddi4+0x26e>
1a002692:	18e4      	adds	r4, r4, r3
1a002694:	f100 35ff 	add.w	r5, r0, #4294967295
1a002698:	d229      	bcs.n	1a0026ee <__udivmoddi4+0x2ba>
1a00269a:	45a0      	cmp	r8, r4
1a00269c:	d927      	bls.n	1a0026ee <__udivmoddi4+0x2ba>
1a00269e:	3802      	subs	r0, #2
1a0026a0:	441c      	add	r4, r3
1a0026a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0026a6:	eba4 0408 	sub.w	r4, r4, r8
1a0026aa:	fba0 8902 	umull	r8, r9, r0, r2
1a0026ae:	454c      	cmp	r4, r9
1a0026b0:	46c6      	mov	lr, r8
1a0026b2:	464d      	mov	r5, r9
1a0026b4:	d315      	bcc.n	1a0026e2 <__udivmoddi4+0x2ae>
1a0026b6:	d012      	beq.n	1a0026de <__udivmoddi4+0x2aa>
1a0026b8:	b156      	cbz	r6, 1a0026d0 <__udivmoddi4+0x29c>
1a0026ba:	ebba 030e 	subs.w	r3, sl, lr
1a0026be:	eb64 0405 	sbc.w	r4, r4, r5
1a0026c2:	fa04 f707 	lsl.w	r7, r4, r7
1a0026c6:	40cb      	lsrs	r3, r1
1a0026c8:	431f      	orrs	r7, r3
1a0026ca:	40cc      	lsrs	r4, r1
1a0026cc:	6037      	str	r7, [r6, #0]
1a0026ce:	6074      	str	r4, [r6, #4]
1a0026d0:	2100      	movs	r1, #0
1a0026d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0026d6:	4618      	mov	r0, r3
1a0026d8:	e6f8      	b.n	1a0024cc <__udivmoddi4+0x98>
1a0026da:	4690      	mov	r8, r2
1a0026dc:	e6e0      	b.n	1a0024a0 <__udivmoddi4+0x6c>
1a0026de:	45c2      	cmp	sl, r8
1a0026e0:	d2ea      	bcs.n	1a0026b8 <__udivmoddi4+0x284>
1a0026e2:	ebb8 0e02 	subs.w	lr, r8, r2
1a0026e6:	eb69 0503 	sbc.w	r5, r9, r3
1a0026ea:	3801      	subs	r0, #1
1a0026ec:	e7e4      	b.n	1a0026b8 <__udivmoddi4+0x284>
1a0026ee:	4628      	mov	r0, r5
1a0026f0:	e7d7      	b.n	1a0026a2 <__udivmoddi4+0x26e>
1a0026f2:	4640      	mov	r0, r8
1a0026f4:	e791      	b.n	1a00261a <__udivmoddi4+0x1e6>
1a0026f6:	4681      	mov	r9, r0
1a0026f8:	e7be      	b.n	1a002678 <__udivmoddi4+0x244>
1a0026fa:	4601      	mov	r1, r0
1a0026fc:	e778      	b.n	1a0025f0 <__udivmoddi4+0x1bc>
1a0026fe:	3802      	subs	r0, #2
1a002700:	443c      	add	r4, r7
1a002702:	e745      	b.n	1a002590 <__udivmoddi4+0x15c>
1a002704:	4608      	mov	r0, r1
1a002706:	e708      	b.n	1a00251a <__udivmoddi4+0xe6>
1a002708:	f1a8 0802 	sub.w	r8, r8, #2
1a00270c:	443d      	add	r5, r7
1a00270e:	e72b      	b.n	1a002568 <__udivmoddi4+0x134>

1a002710 <__aeabi_idiv0>:
1a002710:	4770      	bx	lr
1a002712:	bf00      	nop

1a002714 <memset>:
1a002714:	4402      	add	r2, r0
1a002716:	4603      	mov	r3, r0
1a002718:	4293      	cmp	r3, r2
1a00271a:	d100      	bne.n	1a00271e <memset+0xa>
1a00271c:	4770      	bx	lr
1a00271e:	f803 1b01 	strb.w	r1, [r3], #1
1a002722:	e7f9      	b.n	1a002718 <memset+0x4>

1a002724 <strcpy>:
1a002724:	4603      	mov	r3, r0
1a002726:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00272a:	f803 2b01 	strb.w	r2, [r3], #1
1a00272e:	2a00      	cmp	r2, #0
1a002730:	d1f9      	bne.n	1a002726 <strcpy+0x2>
1a002732:	4770      	bx	lr

1a002734 <strlen>:
1a002734:	4603      	mov	r3, r0
1a002736:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00273a:	2a00      	cmp	r2, #0
1a00273c:	d1fb      	bne.n	1a002736 <strlen+0x2>
1a00273e:	1a18      	subs	r0, r3, r0
1a002740:	3801      	subs	r0, #1
1a002742:	4770      	bx	lr

1a002744 <HttpWebPageEnd>:
1a002744:	703c 7320 7974 656c 223d 6574 7478 612d     <p style="text-a
1a002754:	696c 6e67 203a 6563 746e 7265 223b 263e     lign: center;">&
1a002764:	626e 7073 3c3b 702f 3c3e 2070 7473 6c79     nbsp;</p><p styl
1a002774:	3d65 7422 7865 2d74 6c61 6769 3a6e 6320     e="text-align: c
1a002784:	6e65 6574 3b72 3e22 6e26 7362 3b70 2f3c     enter;">&nbsp;</
1a002794:	3e70 703c 7320 7974 656c 223d 6574 7478     p><p style="text
1a0027a4:	612d 696c 6e67 203a 6563 746e 7265 223b     -align: center;"
1a0027b4:	463e 4e49 5520 4553 2052 5448 4c4d 2f3c     >FIN USER HTML</
1a0027c4:	3e70 683c 2072 3e2f 703c 7320 7974 656c     p><hr /><p style
1a0027d4:	223d 6574 7478 612d 696c 6e67 203a 6563     ="text-align: ce
1a0027e4:	746e 7265 223b 3c3e 6d65 433e 706f 7279     nter;"><em>Copyr
1a0027f4:	6769 7468 6e26 7362 3b70 6741 7375 6974     ight&nbsp;Agusti
1a002804:	206e 6142 7373 2069 262d 626e 7073 3c3b     n Bassi -&nbsp;<
1a002814:	652f 3e6d 653c 3e6d 6150 6c62 206f 6f47     /em><em>Pablo Go
1a002824:	656d 3c7a 652f 3e6d 2f3c 3e70 703c 7320     mez</em></p><p s
1a002834:	7974 656c 223d 6574 7478 612d 696c 6e67     tyle="text-align
1a002844:	203a 6563 746e 7265 223b 433e 5255 4f53     : center;">CURSO
1a002854:	2053 4e49 5445 3220 3130 3c37 702f 3c3e     S INET 2017</p><
1a002864:	2070 7473 6c79 3d65 7422 7865 2d74 6c61     p style="text-al
1a002874:	6769 3a6e 6320 6e65 6574 3b72 3e22 613c     ign: center;"><a
1a002884:	6820 6572 3d66 6822 7474 3a70 2f2f 7777      href="http://ww
1a002894:	2e77 7270 796f 6365 6f74 632d 6169 2e61     w.proyecto-ciaa.
1a0028a4:	6f63 2e6d 7261 3e22 7777 2e77 7270 796f     com.ar">www.proy
1a0028b4:	6365 6f74 632d 6169 2e61 6f63 2e6d 7261     ecto-ciaa.com.ar
1a0028c4:	2f3c 3e61 2f3c 3e70 2f3c 7468 6c6d 003e     </a></p></html>.

1a0028d4 <HttpWebPageHeader>:
1a0028d4:	213c 4f44 5443 5059 2045 5448 4c4d 3c3e     <!DOCTYPE HTML><
1a0028e4:	7468 6c6d 3c3e 6568 6461 3c3e 6974 6c74     html><head><titl
1a0028f4:	3e65 4445 2d55 4943 4141 4e20 5058 2f3c     e>EDU-CIAA NXP</
1a002904:	6974 6c74 3e65 6d3c 7465 2061 7468 7074     title><meta http
1a002914:	652d 7571 7669 223d 6572 7266 7365 2268     -equiv="refresh"
1a002924:	6320 6e6f 6574 746e 223d 3531 3e22 2f3c      content="15"></
1a002934:	6568 6461 3c3e 2070 7473 6c79 3d65 7422     head><p style="t
1a002944:	7865 2d74 6c61 6769 3a6e 6320 6e65 6574     ext-align: cente
1a002954:	3b72 3e22 6e26 7362 3b70 2f3c 3e70 703c     r;">&nbsp;</p><p
1a002964:	7320 7974 656c 223d 6574 7478 612d 696c      style="text-ali
1a002974:	6e67 203a 6563 746e 7265 223b 3c3e 7073     gn: center;"><sp
1a002984:	6e61 7320 7974 656c 223d 6f63 6f6c 3a72     an style="color:
1a002994:	2320 3030 3030 6666 223b 3c3e 7473 6f72      #0000ff;"><stro
1a0029a4:	676e 3c3e 6d69 2067 7273 3d63 6822 7474     ng><img src="htt
1a0029b4:	7370 2f3a 652f 636e 7972 7470 6465 742d     ps://encrypted-t
1a0029c4:	6e62 2e30 7367 6174 6974 2e63 6f63 2f6d     bn0.gstatic.com/
1a0029d4:	6d69 6761 7365 713f 743d 6e62 413a 644e     images?q=tbn:ANd
1a0029e4:	4739 5463 6d32 5a6f 305a 5a71 4135 5f7a     9GcT2moZZ0qZ5Az_
1a0029f4:	7451 6b34 7652 4e36 4a73 4974 4b78 6c4a     Qt4kRv6NsJtIxKJl
1a002a04:	7038 7968 306e 5041 7941 7366 6873 7068     8phyn0APAyfsshhp
1a002a14:	7076 506a 2273 6120 746c 223d 6f4c 6f67     vpjPs" alt="Logo
1a002a24:	2022 6977 7464 3d68 3122 3533 2022 6568     " width="135" he
1a002a34:	6769 7468 223d 3331 2235 2f20 3c3e 732f     ight="135" /></s
1a002a44:	7274 6e6f 3e67 2f3c 7073 6e61 3c3e 702f     trong></span></p
1a002a54:	3c3e 3168 7320 7974 656c 223d 6574 7478     ><h1 style="text
1a002a64:	612d 696c 6e67 203a 6563 746e 7265 223b     -align: center;"
1a002a74:	3c3e 7073 6e61 7320 7974 656c 223d 6f63     ><span style="co
1a002a84:	6f6c 3a72 2320 3030 3030 6666 223b 3c3e     lor: #0000ff;"><
1a002a94:	7473 6f72 676e 533e 7265 6976 6f64 2072     strong>Servidor 
1a002aa4:	6557 2062 5448 5054 623c 2072 3e2f 5345     Web HTTP<br />ES
1a002ab4:	3850 3632 2036 202d 4445 2055 4943 4141     P8266 - EDU CIAA
1a002ac4:	4e20 5058 2f3c 7473 6f72 676e 3c3e 732f      NXP</strong></s
1a002ad4:	6170 3e6e 2f3c 3168 3c3e 3468 7320 7974     pan></h1><h4 sty
1a002ae4:	656c 223d 6574 7478 612d 696c 6e67 203a     le="text-align: 
1a002af4:	6563 746e 7265 223b 3c3e 7473 6f72 676e     center;"><strong
1a002b04:	3c3e 6d65 453e 206e 7365 6174 7020 6761     ><em>En esta pag
1a002b14:	6e69 2061 6577 2062 6573 6d20 6575 7473     ina web se muest
1a002b24:	6172 206e 6164 6f74 2073 7270 766f 6e65     ran datos proven
1a002b34:	6569 746e 7365 6420 2065 616c 4520 5544     ientes de la EDU
1a002b44:	432d 4149 2041 584e 3c50 652f 3e6d 2f3c     -CIAA NXP</em></
1a002b54:	7473 6f72 676e 3c3e 7262 2f20 3c3e 7473     strong><br /><st
1a002b64:	6f72 676e 3c3e 6d65 653e 766e 6169 6f64     rong><em>enviado
1a002b74:	2073 7563 6e61 6f64 7520 206e 6c63 6569     s cuando un clie
1a002b84:	746e 2065 5448 5054 6320 6d6f 206f 7365     nte HTTP como es
1a002b94:	6174 7020 6761 6e69 2061 6572 6c61 7a69     ta pagina realiz
1a002ba4:	2061 6e75 2061 6570 6974 6963 6e6f 6120     a una peticion a
1a002bb4:	206c 6573 7672 6469 726f 2f3c 6d65 3c3e     l servidor</em><
1a002bc4:	732f 7274 6e6f 3e67 2f3c 3468 3c3e 2070     /strong></h4><p 
1a002bd4:	7473 6c79 3d65 7422 7865 2d74 6c61 6769     style="text-alig
1a002be4:	3a6e 6320 6e65 6574 3b72 3e22 4e49 4349     n: center;">INIC
1a002bf4:	4f49 5520 4553 2052 5448 4c4d 2f3c 3e70     IO USER HTML</p>
1a002c04:	703c 7320 7974 656c 223d 6574 7478 612d     <p style="text-a
1a002c14:	696c 6e67 203a 6563 746e 7265 223b 263e     lign: center;">&
1a002c24:	626e 7073 3c3b 702f 3c3e 2070 7473 6c79     nbsp;</p><p styl
1a002c34:	3d65 7422 7865 2d74 6c61 6769 3a6e 6320     e="text-align: c
1a002c44:	6e65 6574 3b72 3e22 6e26 7362 3b70 2f3c     enter;">&nbsp;</
1a002c54:	3e70 ff00 0d0a 6942 6e65 6576 696e 6f64     p>....Bienvenido
1a002c64:	6120 206c 6573 7672 6469 726f 4820 5454      al servidor HTT
1a002c74:	2050 7345 3870 3632 2036 6f63 206e 4445     P Esp8266 con ED
1a002c84:	2055 4943 4141 0000 0d0a 614c 6320 6e6f     U CIAA....La con
1a002c94:	6966 7567 6172 6963 6e6f 7020 6575 6564     figuracion puede
1a002ca4:	7420 7261 6164 2072 6168 7473 2061 2031      tardar hasta 1 
1a002cb4:	696d 756e 6f74 002e 3030 3834 3933 3630     minuto..00483906
1a002cc4:	3336 0000 6946 6562 7472 6c65 2e32 4734     63..Fibertel2.4G
1a002cd4:	7a48 0000 0d0a 6553 7672 6469 726f 4820     Hz....Servidor H
1a002ce4:	5454 2050 6f63 666e 6769 7275 6461 2e6f     TTP configurado.
1a002cf4:	4920 3a50 2520 0073 0d0a 7245 6f72 2072      IP: %s...Error 
1a002d04:	6c61 6320 6e6f 6966 7567 6172 2072 6573     al configurar se
1a002d14:	7672 6469 726f 4820 5454 2e50 0000 0000     rvidor HTTP.....
1a002d24:	683c 2033 7473 6c79 3d65 7422 7865 2d74     <h3 style="text-
1a002d34:	6c61 6769 3a6e 6320 6e65 6574 3b72 3e22     align: center;">
1a002d44:	733c 7274 6e6f 3e67 0000 0000 7325 4520     <strong>....%s E
1a002d54:	7473 6461 206f 454c 3144 203a 6425 2d20     stado LED1: %d -
1a002d64:	5620 4c41 524f 4120 4344 432d 3148 203a      VALOR ADC-CH1: 
1a002d74:	6425 2520 0073 0000 2f3c 7473 6f72 676e     %d %s...</strong
1a002d84:	3c3e 682f 3e33 0000 0d0a 6550 6974 6963     ></h3>....Petici
1a002d94:	6e6f 7220 7365 6f70 646e 6469 2061 6c61     on respondida al
1a002da4:	6320 696c 6e65 6574 4820 5454 2050 6425      cliente HTTP %d
1a002db4:	002e ffff 5441 0a0d 0000 0000 5441 432b     ....AT......AT+C
1a002dc4:	4d57 444f 3d45 0d33 000a 0000 5441 432b     WMODE=3.....AT+C
1a002dd4:	4a57 5041 0d3f 000a 5441 432b 4a57 5041     WJAP?...AT+CWJAP
1a002de4:	223d 7325 2c22 2522 2273 0000 5441 432b     ="%s","%s"..AT+C
1a002df4:	5049 554d 3d58 0d31 000a 0000 5441 432b     IPMUX=1.....AT+C
1a002e04:	5049 4c43 534f 3d45 6425 0a0d 0000 0000     IPCLOSE=%d......
1a002e14:	5441 432b 5049 4553 5652 5245 313d 382c     AT+CIPSERVER=1,8
1a002e24:	0d30 000a 5441 432b 4649 5253 0a0d 0000     0...AT+CIFSR....
1a002e34:	5441 432b 5049 5453 5441 5355 0a0d 0000     AT+CIPSTATUS....
1a002e44:	5245 4f52 3a52 4c20 2061 6f6c 676e 7469     ERROR: La longit
1a002e54:	6475 6420 2065 6164 6f74 2073 5448 5054     ud de datos HTTP
1a002e64:	7320 7075 7265 2061 6c65 6d20 7861 6d69      supera el maxim
1a002e74:	206f 6570 6d72 7469 6469 206f 6564 2520     o permitido de %
1a002e84:	2064 7962 6574 2e73 0000 0000 5441 432b     d bytes.....AT+C
1a002e94:	5049 4553 444e 253d 2c63 6425 0a0d 0000     IPSEND=%c,%d....
1a002ea4:	7325 7325 7325 0000 5441 432b 5049 4c43     %s%s%s..AT+CIPCL
1a002eb4:	534f 3d45 6325 0a0d ff00 ffff               OSE=%c......

1a002ec0 <Response_CIFSR>:
1a002ec0:	432b 4649 5253 533a 4154 5049 222c ff00     +CIFSR:STAIP,"..

1a002ed0 <Response_CIPCLOSE>:
1a002ed0:	4c43 534f 4445 ff00                         CLOSED..

1a002ed8 <Response_CIPSTATUS>:
1a002ed8:	432b 5049 5453 5441 5355 003a               +CIPSTATUS:.

1a002ee4 <Response_CWJAP_1>:
1a002ee4:	4957 4946 4320 4e4f 454e 5443 4445 ff00     WIFI CONNECTED..

1a002ef4 <Response_CWJAP_2>:
1a002ef4:	4957 4946 4720 544f 4920 0050               WIFI GOT IP.

1a002f00 <Response_CWJAP_OK>:
1a002f00:	432b 4a57 5041 003a                         +CWJAP:.

1a002f08 <Response_OK>:
1a002f08:	4b4f ff00                                   OK..

1a002f0c <Response_SEND_OK>:
1a002f0c:	4553 444e 4f20 004b                         SEND OK.

1a002f14 <Response_STATUS_3>:
1a002f14:	5453 5441 5355 333a ff00 ffff 6e28 6c75     STATUS:3....(nul
1a002f24:	296c ff00                                   l)..

1a002f28 <ExtRateIn>:
1a002f28:	0000 0000                                   ....

1a002f2c <OscRateIn>:
1a002f2c:	1b00 00b7                                   ....

1a002f30 <gpioLEDBits>:
1a002f30:	0e00 0b01 0c01 0005 0105 0205               ............

1a002f3c <InitClkStates>:
1a002f3c:	0308 0001 0307 0001 0f01 0101               ............

1a002f48 <pinmuxing>:
1a002f48:	0a02 0040 0b02 0040 0c02 0040 0002 0044     ..@...@...@...D.
1a002f58:	0102 0044 0202 0044 0302 0052 0402 0052     ..D...D...R...R.
1a002f68:	0509 0052 0609 0057 0206 0057 0001 0050     ..R...W...W...P.
1a002f78:	0101 0050 0201 0050 0601 0050 0f01 00f3     ..P...P...P.....
1a002f88:	1001 00f7 1101 00f3 1201 00b3 1301 00f0     ................
1a002f98:	1401 00b3 0707 00b6 0000 00f2 0100 00b6     ................
1a002fa8:	0201 0804 0f03 0f0f 00ff 0000               ............

1a002fb4 <periph_to_base>:
1a002fb4:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002fc4:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a002fd4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a002fe4:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a002ff4:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a003004:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a003014:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a003020 <InitClkStates>:
1a003020:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a003030:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a003040:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a003050:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a003060:	111a 0001 111b 0001                         ........

1a003068 <UART_BClock>:
1a003068:	01c2 01a2 0182 0162                         ......b.

1a003070 <UART_PClock>:
1a003070:	0081 0082 00a1 00a2                         ........

1a003078 <gpioPinsConfig>:
1a003078:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a003088:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a003098:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a0030a8:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a0030b8:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a0030c8:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a0030d8:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a0030e8:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a0030f8:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a003108:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a003118:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a003128:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a003138:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a003148:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a003158:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a003168:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a003178:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a003188:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a003198:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a0031a8:	010e 0005 0801 ffff                         ........
